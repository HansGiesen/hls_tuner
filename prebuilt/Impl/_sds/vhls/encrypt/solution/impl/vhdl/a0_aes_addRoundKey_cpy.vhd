-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aes_addRoundKey_cpy is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    buf_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWVALID : OUT STD_LOGIC;
    m_axi_key_AWREADY : IN STD_LOGIC;
    m_axi_key_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WVALID : OUT STD_LOGIC;
    m_axi_key_WREADY : IN STD_LOGIC;
    m_axi_key_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_key_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WLAST : OUT STD_LOGIC;
    m_axi_key_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_ARVALID : OUT STD_LOGIC;
    m_axi_key_ARREADY : IN STD_LOGIC;
    m_axi_key_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RVALID : IN STD_LOGIC;
    m_axi_key_RREADY : OUT STD_LOGIC;
    m_axi_key_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_key_RLAST : IN STD_LOGIC;
    m_axi_key_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_BVALID : IN STD_LOGIC;
    m_axi_key_BREADY : OUT STD_LOGIC;
    m_axi_key_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    key_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_AWVALID : OUT STD_LOGIC;
    m_axi_cpk_AWREADY : IN STD_LOGIC;
    m_axi_cpk_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_WVALID : OUT STD_LOGIC;
    m_axi_cpk_WREADY : IN STD_LOGIC;
    m_axi_cpk_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_cpk_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_WLAST : OUT STD_LOGIC;
    m_axi_cpk_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_ARVALID : OUT STD_LOGIC;
    m_axi_cpk_ARREADY : IN STD_LOGIC;
    m_axi_cpk_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_RVALID : IN STD_LOGIC;
    m_axi_cpk_RREADY : OUT STD_LOGIC;
    m_axi_cpk_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_cpk_RLAST : IN STD_LOGIC;
    m_axi_cpk_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_BVALID : IN STD_LOGIC;
    m_axi_cpk_BREADY : OUT STD_LOGIC;
    m_axi_cpk_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    cpk_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_aes_addRoundKey_cpy is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (65 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (65 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (65 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (65 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (65 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (65 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (65 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (65 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (65 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (65 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (65 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (65 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (65 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (65 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal key_blk_n_AR : STD_LOGIC;
    signal key_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal cpk_blk_n_AW : STD_LOGIC;
    signal cpk_blk_n_W : STD_LOGIC;
    signal cpk_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal key_addr_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cpk_addr_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_read_reg_808 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal buf_addr_read_reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_cpk_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC;
    signal ap_block_state11_io : BOOLEAN;
    signal key_addr_1_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state17 : BOOLEAN;
    signal cpk_addr_1_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_2_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpk_addr_2_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_28_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_1_read_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state25 : BOOLEAN;
    signal buf_addr_28_read_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_addr_2_read_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_1_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_1_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state27_io : BOOLEAN;
    signal key_addr_3_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state33 : BOOLEAN;
    signal cpk_addr_3_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_4_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpk_addr_4_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_29_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_5_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpk_addr_5_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_3_fu_667_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_3_reg_919 : STD_LOGIC_VECTOR (4 downto 0);
    signal key_addr_6_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpk_addr_6_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_30_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_7_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpk_addr_7_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_3_read_reg_955 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state41 : BOOLEAN;
    signal buf_addr_29_read_reg_960 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_addr_4_read_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_key_ARREADY : STD_LOGIC;
    signal tmp_67_2_fu_746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_2_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state43_io : BOOLEAN;
    signal key_addr_5_read_reg_976 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state49 : BOOLEAN;
    signal key_addr_6_read_reg_981 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state57 : BOOLEAN;
    signal buf_addr_30_read_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_3_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_3_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state58_io : BOOLEAN;
    signal key_addr_7_read_reg_997 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_404 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum6_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum15_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum7_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum16_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum17_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum9_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum18_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum10_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum19_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum11_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum20_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum12_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum21_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum13_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum22_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_key_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_cpk_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_cpk_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_cpk_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_buf_r_WREADY : STD_LOGIC;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_WREADY : STD_LOGIC := '0';
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_state50_io : BOOLEAN;
    signal ap_block_state64 : BOOLEAN;
    signal ap_block_state59_io : BOOLEAN;
    signal i_s_fu_416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum5_cast_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_1_fu_505_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_1_cast_fu_511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_1_fu_556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum5_1_cast_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_2_fu_588_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_2_cast_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_2_fu_635_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum5_2_cast_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_3_cast_fu_673_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_3_fu_714_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum5_3_cast_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (65 downto 0);
    signal ap_condition_825 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_block_state18_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_block_state34_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_block_state50_io = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)))) then 
                    ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_block_state27_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_block_state43_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_block_state58_io = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_block_state12_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_block_state28_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_block_state44_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_block_state59_io = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_logic_1 = m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_logic_1 = m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_logic_1 = m_axi_buf_r_WREADY)))) then 
                    ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_cpk_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_block_state27_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_block_state43_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_block_state58_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_sig_ioackin_m_axi_cpk_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_sig_ioackin_m_axi_cpk_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_1 = m_axi_cpk_AWREADY) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_key_RVALID = ap_const_logic_1) and (ap_const_logic_1 = m_axi_cpk_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_cpk_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_cpk_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_block_state12_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_block_state28_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_block_state44_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_block_state50_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_block_state59_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_cpk_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_const_logic_1 = m_axi_cpk_WREADY)))) then 
                    ap_reg_ioackin_m_axi_cpk_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_key_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state42) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_block_state18_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_block_state34_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_block_state50_io = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (m_axi_key_RVALID = ap_const_logic_1) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_cpk_BVALID = ap_const_logic_1) and (ap_const_logic_1 = m_axi_key_ARREADY)))) then 
                    ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (m_axi_cpk_BVALID = ap_const_logic_1))) then 
                i_reg_404 <= i_10_3_reg_919;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_404 <= ap_const_lv5_10;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                buf_addr_28_read_reg_860 <= m_axi_buf_r_RDATA;
                key_addr_1_read_reg_855 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                buf_addr_28_reg_848 <= sum1_fu_541_p2;
                cpk_addr_1_reg_830 <= sum16_fu_494_p2;
                cpk_addr_2_reg_842 <= sum17_fu_530_p2;
                key_addr_1_reg_824 <= sum7_fu_483_p2;
                key_addr_2_reg_836 <= sum8_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                buf_addr_29_read_reg_960 <= m_axi_buf_r_RDATA;
                key_addr_3_read_reg_955 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                buf_addr_29_reg_900 <= sum2_fu_624_p2;
                buf_addr_30_reg_936 <= sum3_fu_703_p2;
                cpk_addr_3_reg_882 <= sum18_fu_577_p2;
                cpk_addr_4_reg_894 <= sum19_fu_613_p2;
                cpk_addr_5_reg_913 <= sum20_fu_656_p2;
                cpk_addr_6_reg_930 <= sum21_fu_692_p2;
                cpk_addr_7_reg_949 <= sum22_fu_735_p2;
                i_10_3_reg_919 <= i_10_3_fu_667_p2;
                key_addr_3_reg_876 <= sum9_fu_566_p2;
                key_addr_4_reg_888 <= sum10_fu_602_p2;
                key_addr_5_reg_907 <= sum11_fu_645_p2;
                key_addr_6_reg_924 <= sum12_fu_681_p2;
                key_addr_7_reg_943 <= sum13_fu_724_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state57) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                buf_addr_30_read_reg_987 <= m_axi_buf_r_RDATA;
                key_addr_6_read_reg_981 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                buf_addr_read_reg_814 <= m_axi_buf_r_RDATA;
                key_addr_read_reg_808 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_426_p2))) then
                buf_addr_reg_801 <= sum_fu_458_p2;
                cpk_addr_reg_795 <= sum15_fu_447_p2;
                key_addr_reg_789 <= sum6_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_key_RVALID = ap_const_logic_1))) then
                key_addr_2_read_reg_865 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY))))) then
                key_addr_4_read_reg_965 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                key_addr_5_read_reg_976 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY))))) then
                key_addr_7_read_reg_997 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0))) then
                tmp_24_reg_819 <= tmp_24_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_block_state27_io = ap_const_boolean_0))) then
                tmp_67_1_reg_871 <= tmp_67_1_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_block_state43_io = ap_const_boolean_0))) then
                tmp_67_2_reg_971 <= tmp_67_2_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_block_state58_io = ap_const_boolean_0))) then
                tmp_67_3_reg_992 <= tmp_67_3_fu_750_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_buf_r_RVALID, m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state64, ap_CS_fsm_state19, ap_CS_fsm_state26, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state53, ap_CS_fsm_state60, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state51, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state55, ap_CS_fsm_state61, ap_CS_fsm_state66, ap_CS_fsm_state2, tmp_fu_426_p2, ap_sig_ioackin_m_axi_cpk_AWREADY, ap_block_state11_io, ap_block_state27_io, ap_sig_ioackin_m_axi_key_ARREADY, ap_block_state43_io, ap_block_state58_io, ap_block_state3_io, ap_sig_ioackin_m_axi_cpk_WREADY, ap_block_state12_io, ap_block_state18_io, ap_block_state28_io, ap_block_state34_io, ap_block_state44_io, ap_block_state50_io, ap_block_state59_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_426_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_block_state12_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_block_state18_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_key_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_block_state27_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_block_state28_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_block_state34_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_block_state43_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_block_state44_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_sig_ioackin_m_axi_cpk_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_sig_ioackin_m_axi_cpk_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_block_state50_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_cpk_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_cpk_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_block_state58_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_block_state59_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state60) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state66) and (m_axi_cpk_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);

    ap_block_state10_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_state11_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
                ap_block_state11_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY));
    end process;


    ap_block_state12_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_WREADY, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
                ap_block_state12_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_WREADY));
    end process;


    ap_block_state17_assign_proc : process(m_axi_buf_r_BVALID, m_axi_cpk_BVALID)
    begin
                ap_block_state17 <= ((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;


    ap_block_state18_io_assign_proc : process(ap_sig_ioackin_m_axi_key_ARREADY, ap_sig_ioackin_m_axi_buf_r_ARREADY)
    begin
                ap_block_state18_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_ARREADY));
    end process;


    ap_block_state25_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID)
    begin
                ap_block_state25 <= ((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_state27_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
                ap_block_state27_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY));
    end process;


    ap_block_state28_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_WREADY, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
                ap_block_state28_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_WREADY));
    end process;


    ap_block_state33_assign_proc : process(m_axi_buf_r_BVALID, m_axi_cpk_BVALID)
    begin
                ap_block_state33 <= ((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;


    ap_block_state34_io_assign_proc : process(ap_sig_ioackin_m_axi_key_ARREADY, ap_sig_ioackin_m_axi_buf_r_ARREADY)
    begin
                ap_block_state34_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_ARREADY));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_m_axi_key_ARREADY, ap_sig_ioackin_m_axi_buf_r_ARREADY)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_ARREADY));
    end process;


    ap_block_state41_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID)
    begin
                ap_block_state41 <= ((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_state43_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
                ap_block_state43_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY));
    end process;


    ap_block_state44_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_WREADY, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
                ap_block_state44_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_WREADY));
    end process;


    ap_block_state49_assign_proc : process(m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID)
    begin
                ap_block_state49 <= ((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;


    ap_block_state50_io_assign_proc : process(ap_sig_ioackin_m_axi_key_ARREADY, ap_sig_ioackin_m_axi_buf_r_ARREADY, ap_sig_ioackin_m_axi_cpk_WREADY)
    begin
                ap_block_state50_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_WREADY));
    end process;


    ap_block_state57_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID)
    begin
                ap_block_state57 <= ((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_state58_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
                ap_block_state58_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY));
    end process;


    ap_block_state59_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_WREADY, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
                ap_block_state59_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_WREADY));
    end process;


    ap_block_state64_assign_proc : process(m_axi_buf_r_BVALID, m_axi_cpk_BVALID)
    begin
                ap_block_state64 <= ((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;


    ap_condition_825_assign_proc : process(m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state49)
    begin
                ap_condition_825 <= ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_426_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_426_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_426_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_426_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(m_axi_buf_r_ARREADY, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= m_axi_buf_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(m_axi_buf_r_AWREADY, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= m_axi_buf_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_WREADY_assign_proc : process(m_axi_buf_r_WREADY, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= m_axi_buf_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_cpk_AWREADY_assign_proc : process(m_axi_cpk_AWREADY, ap_reg_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) then 
            ap_sig_ioackin_m_axi_cpk_AWREADY <= m_axi_cpk_AWREADY;
        else 
            ap_sig_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_cpk_WREADY_assign_proc : process(m_axi_cpk_WREADY, ap_reg_ioackin_m_axi_cpk_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) then 
            ap_sig_ioackin_m_axi_cpk_WREADY <= m_axi_cpk_WREADY;
        else 
            ap_sig_ioackin_m_axi_cpk_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_key_ARREADY_assign_proc : process(m_axi_key_ARREADY, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) then 
            ap_sig_ioackin_m_axi_key_ARREADY <= m_axi_key_ARREADY;
        else 
            ap_sig_ioackin_m_axi_key_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AR_assign_proc : process(m_axi_buf_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            buf_r_blk_n_AR <= m_axi_buf_r_ARREADY;
        else 
            buf_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(m_axi_buf_r_AWREADY, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state43, ap_CS_fsm_state58)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_R_assign_proc : process(m_axi_buf_r_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            buf_r_blk_n_R <= m_axi_buf_r_RVALID;
        else 
            buf_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state44, ap_CS_fsm_state59)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    cpk_blk_n_AW_assign_proc : process(m_axi_cpk_AWREADY, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state45, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            cpk_blk_n_AW <= m_axi_cpk_AWREADY;
        else 
            cpk_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    cpk_blk_n_B_assign_proc : process(m_axi_cpk_BVALID, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state64, ap_CS_fsm_state53, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            cpk_blk_n_B <= m_axi_cpk_BVALID;
        else 
            cpk_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    cpk_blk_n_W_assign_proc : process(m_axi_cpk_WREADY, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state61))) then 
            cpk_blk_n_W <= m_axi_cpk_WREADY;
        else 
            cpk_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        i_10_1_cast_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_10_1_fu_505_p2),8));

    i_10_1_fu_505_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_1E));
        i_10_2_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_10_2_fu_588_p2),8));

    i_10_2_fu_588_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_1D));
        i_10_3_cast_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_10_3_fu_667_p2),8));

    i_10_3_fu_667_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_1C));
        i_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_s_fu_416_p2),8));

    i_s_fu_416_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_1F));

    key_blk_n_AR_assign_proc : process(m_axi_key_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state50, ap_CS_fsm_state19, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state53))) then 
            key_blk_n_AR <= m_axi_key_ARREADY;
        else 
            key_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    key_blk_n_R_assign_proc : process(m_axi_key_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state26, ap_CS_fsm_state42, ap_CS_fsm_state60)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            key_blk_n_R <= m_axi_key_RVALID;
        else 
            key_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    m_axi_buf_r_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state50, buf_addr_reg_801, buf_addr_28_reg_848, buf_addr_29_reg_900, buf_addr_30_reg_936, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                m_axi_buf_r_ARADDR <= buf_addr_30_reg_936;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                m_axi_buf_r_ARADDR <= buf_addr_29_reg_900;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_buf_r_ARADDR <= buf_addr_28_reg_848;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_buf_r_ARADDR <= buf_addr_reg_801;
            else 
                m_axi_buf_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_buf_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_buf_r_ARBURST <= ap_const_lv2_0;
    m_axi_buf_r_ARCACHE <= ap_const_lv4_0;
    m_axi_buf_r_ARID <= ap_const_lv1_0;
    m_axi_buf_r_ARLEN <= ap_const_lv32_1;
    m_axi_buf_r_ARLOCK <= ap_const_lv2_0;
    m_axi_buf_r_ARPROT <= ap_const_lv3_0;
    m_axi_buf_r_ARQOS <= ap_const_lv4_0;
    m_axi_buf_r_ARREGION <= ap_const_lv4_0;
    m_axi_buf_r_ARSIZE <= ap_const_lv3_0;
    m_axi_buf_r_ARUSER <= ap_const_lv1_0;

    m_axi_buf_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state50, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)))) then 
            m_axi_buf_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_AWADDR_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state43, ap_CS_fsm_state58, buf_addr_reg_801, buf_addr_28_reg_848, buf_addr_29_reg_900, buf_addr_30_reg_936, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                m_axi_buf_r_AWADDR <= buf_addr_30_reg_936;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                m_axi_buf_r_AWADDR <= buf_addr_29_reg_900;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                m_axi_buf_r_AWADDR <= buf_addr_28_reg_848;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                m_axi_buf_r_AWADDR <= buf_addr_reg_801;
            else 
                m_axi_buf_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_buf_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_buf_r_AWBURST <= ap_const_lv2_0;
    m_axi_buf_r_AWCACHE <= ap_const_lv4_0;
    m_axi_buf_r_AWID <= ap_const_lv1_0;
    m_axi_buf_r_AWLEN <= ap_const_lv32_1;
    m_axi_buf_r_AWLOCK <= ap_const_lv2_0;
    m_axi_buf_r_AWPROT <= ap_const_lv3_0;
    m_axi_buf_r_AWQOS <= ap_const_lv4_0;
    m_axi_buf_r_AWREGION <= ap_const_lv4_0;
    m_axi_buf_r_AWSIZE <= ap_const_lv3_0;
    m_axi_buf_r_AWUSER <= ap_const_lv1_0;

    m_axi_buf_r_AWVALID_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)))) then 
            m_axi_buf_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_BREADY_assign_proc : process(m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state64, ap_sig_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state33) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state64) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))))) then 
            m_axi_buf_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_RREADY_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state57)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state57) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))))) then 
            m_axi_buf_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_WDATA_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state44, ap_CS_fsm_state59, tmp_24_reg_819, tmp_67_1_reg_871, tmp_67_2_reg_971, tmp_67_3_reg_992, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                m_axi_buf_r_WDATA <= tmp_67_3_reg_992;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                m_axi_buf_r_WDATA <= tmp_67_2_reg_971;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                m_axi_buf_r_WDATA <= tmp_67_1_reg_871;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_axi_buf_r_WDATA <= tmp_24_reg_819;
            else 
                m_axi_buf_r_WDATA <= "XXXXXXXX";
            end if;
        else 
            m_axi_buf_r_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_buf_r_WID <= ap_const_lv1_0;
    m_axi_buf_r_WLAST <= ap_const_logic_0;
    m_axi_buf_r_WSTRB <= ap_const_lv1_1;
    m_axi_buf_r_WUSER <= ap_const_lv1_0;

    m_axi_buf_r_WVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state44, ap_CS_fsm_state59, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)))) then 
            m_axi_buf_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_cpk_ARADDR <= ap_const_lv32_0;
    m_axi_cpk_ARBURST <= ap_const_lv2_0;
    m_axi_cpk_ARCACHE <= ap_const_lv4_0;
    m_axi_cpk_ARID <= ap_const_lv1_0;
    m_axi_cpk_ARLEN <= ap_const_lv32_0;
    m_axi_cpk_ARLOCK <= ap_const_lv2_0;
    m_axi_cpk_ARPROT <= ap_const_lv3_0;
    m_axi_cpk_ARQOS <= ap_const_lv4_0;
    m_axi_cpk_ARREGION <= ap_const_lv4_0;
    m_axi_cpk_ARSIZE <= ap_const_lv3_0;
    m_axi_cpk_ARUSER <= ap_const_lv1_0;
    m_axi_cpk_ARVALID <= ap_const_logic_0;

    m_axi_cpk_AWADDR_assign_proc : process(m_axi_key_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state43, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state45, ap_CS_fsm_state47, cpk_addr_reg_795, cpk_addr_1_reg_830, cpk_addr_2_reg_842, cpk_addr_3_reg_882, cpk_addr_4_reg_894, cpk_addr_5_reg_913, cpk_addr_6_reg_930, cpk_addr_7_reg_949, ap_reg_ioackin_m_axi_cpk_AWREADY, ap_condition_825)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_key_RVALID = ap_const_logic_1))) then 
                m_axi_cpk_AWADDR <= cpk_addr_7_reg_949;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
                m_axi_cpk_AWADDR <= cpk_addr_6_reg_930;
            elsif ((ap_condition_825 = ap_const_boolean_1)) then 
                m_axi_cpk_AWADDR <= cpk_addr_5_reg_913;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                m_axi_cpk_AWADDR <= cpk_addr_4_reg_894;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                m_axi_cpk_AWADDR <= cpk_addr_3_reg_882;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                m_axi_cpk_AWADDR <= cpk_addr_2_reg_842;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                m_axi_cpk_AWADDR <= cpk_addr_1_reg_830;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                m_axi_cpk_AWADDR <= cpk_addr_reg_795;
            else 
                m_axi_cpk_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_cpk_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_cpk_AWBURST <= ap_const_lv2_0;
    m_axi_cpk_AWCACHE <= ap_const_lv4_0;
    m_axi_cpk_AWID <= ap_const_lv1_0;
    m_axi_cpk_AWLEN <= ap_const_lv32_1;
    m_axi_cpk_AWLOCK <= ap_const_lv2_0;
    m_axi_cpk_AWPROT <= ap_const_lv3_0;
    m_axi_cpk_AWQOS <= ap_const_lv4_0;
    m_axi_cpk_AWREGION <= ap_const_lv4_0;
    m_axi_cpk_AWSIZE <= ap_const_lv3_0;
    m_axi_cpk_AWUSER <= ap_const_lv1_0;

    m_axi_cpk_AWVALID_assign_proc : process(m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state11, ap_CS_fsm_state27, ap_CS_fsm_state43, ap_CS_fsm_state49, ap_CS_fsm_state58, ap_CS_fsm_state60, ap_CS_fsm_state45, ap_CS_fsm_state47, ap_reg_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state47) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state49) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state58) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state60) and (m_axi_key_RVALID = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)))) then 
            m_axi_cpk_AWVALID <= ap_const_logic_1;
        else 
            m_axi_cpk_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_cpk_BREADY_assign_proc : process(m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state17, ap_CS_fsm_state33, ap_CS_fsm_state49, ap_CS_fsm_state64, ap_CS_fsm_state53, ap_CS_fsm_state51, ap_CS_fsm_state55, ap_CS_fsm_state66, ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_key_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state33) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state66) and (m_axi_cpk_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state51) and (m_axi_cpk_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state55) and (m_axi_cpk_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))))) then 
            m_axi_cpk_BREADY <= ap_const_logic_1;
        else 
            m_axi_cpk_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_cpk_RREADY <= ap_const_logic_0;

    m_axi_cpk_WDATA_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state61, key_addr_read_reg_808, key_addr_1_read_reg_855, key_addr_2_read_reg_865, key_addr_3_read_reg_955, key_addr_4_read_reg_965, key_addr_5_read_reg_976, key_addr_6_read_reg_981, key_addr_7_read_reg_997, ap_reg_ioackin_m_axi_cpk_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                m_axi_cpk_WDATA <= key_addr_7_read_reg_997;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                m_axi_cpk_WDATA <= key_addr_6_read_reg_981;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                m_axi_cpk_WDATA <= key_addr_5_read_reg_976;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                m_axi_cpk_WDATA <= key_addr_4_read_reg_965;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                m_axi_cpk_WDATA <= key_addr_3_read_reg_955;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                m_axi_cpk_WDATA <= key_addr_2_read_reg_865;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                m_axi_cpk_WDATA <= key_addr_1_read_reg_855;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_axi_cpk_WDATA <= key_addr_read_reg_808;
            else 
                m_axi_cpk_WDATA <= "XXXXXXXX";
            end if;
        else 
            m_axi_cpk_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_cpk_WID <= ap_const_lv1_0;
    m_axi_cpk_WLAST <= ap_const_logic_0;
    m_axi_cpk_WSTRB <= ap_const_lv1_1;
    m_axi_cpk_WUSER <= ap_const_lv1_0;

    m_axi_cpk_WVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state44, ap_CS_fsm_state50, ap_CS_fsm_state59, ap_CS_fsm_state46, ap_CS_fsm_state48, ap_CS_fsm_state61, ap_reg_ioackin_m_axi_cpk_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state59) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)))) then 
            m_axi_cpk_WVALID <= ap_const_logic_1;
        else 
            m_axi_cpk_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_key_ARADDR_assign_proc : process(m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state50, ap_CS_fsm_state19, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state53, key_addr_reg_789, key_addr_1_reg_824, key_addr_2_reg_836, key_addr_3_reg_876, key_addr_4_reg_888, key_addr_5_reg_907, key_addr_6_reg_924, key_addr_7_reg_943, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_cpk_BVALID = ap_const_logic_1))) then 
                m_axi_key_ARADDR <= key_addr_7_reg_943;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                m_axi_key_ARADDR <= key_addr_6_reg_924;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (m_axi_key_RVALID = ap_const_logic_1))) then 
                m_axi_key_ARADDR <= key_addr_5_reg_907;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                m_axi_key_ARADDR <= key_addr_4_reg_888;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                m_axi_key_ARADDR <= key_addr_3_reg_876;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                m_axi_key_ARADDR <= key_addr_2_reg_836;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_key_ARADDR <= key_addr_1_reg_824;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_key_ARADDR <= key_addr_reg_789;
            else 
                m_axi_key_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_key_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_key_ARBURST <= ap_const_lv2_0;
    m_axi_key_ARCACHE <= ap_const_lv4_0;
    m_axi_key_ARID <= ap_const_lv1_0;
    m_axi_key_ARLEN <= ap_const_lv32_1;
    m_axi_key_ARLOCK <= ap_const_lv2_0;
    m_axi_key_ARPROT <= ap_const_lv3_0;
    m_axi_key_ARQOS <= ap_const_lv4_0;
    m_axi_key_ARREGION <= ap_const_lv4_0;
    m_axi_key_ARSIZE <= ap_const_lv3_0;
    m_axi_key_ARUSER <= ap_const_lv1_0;

    m_axi_key_ARVALID_assign_proc : process(m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state50, ap_CS_fsm_state19, ap_CS_fsm_state35, ap_CS_fsm_state42, ap_CS_fsm_state53, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state42) and (m_axi_key_RVALID = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state50) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (m_axi_cpk_BVALID = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)))) then 
            m_axi_key_ARVALID <= ap_const_logic_1;
        else 
            m_axi_key_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_AWADDR <= ap_const_lv32_0;
    m_axi_key_AWBURST <= ap_const_lv2_0;
    m_axi_key_AWCACHE <= ap_const_lv4_0;
    m_axi_key_AWID <= ap_const_lv1_0;
    m_axi_key_AWLEN <= ap_const_lv32_0;
    m_axi_key_AWLOCK <= ap_const_lv2_0;
    m_axi_key_AWPROT <= ap_const_lv3_0;
    m_axi_key_AWQOS <= ap_const_lv4_0;
    m_axi_key_AWREGION <= ap_const_lv4_0;
    m_axi_key_AWSIZE <= ap_const_lv3_0;
    m_axi_key_AWUSER <= ap_const_lv1_0;
    m_axi_key_AWVALID <= ap_const_logic_0;
    m_axi_key_BREADY <= ap_const_logic_0;

    m_axi_key_RREADY_assign_proc : process(m_axi_buf_r_RVALID, m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state10, ap_CS_fsm_state25, ap_CS_fsm_state41, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state26, ap_CS_fsm_state42, ap_CS_fsm_state60, ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_key_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state25) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_key_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state42) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY)))) or ((ap_const_logic_1 = ap_CS_fsm_state49) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state57) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state60) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY)))))) then 
            m_axi_key_RREADY <= ap_const_logic_1;
        else 
            m_axi_key_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_WDATA <= ap_const_lv8_0;
    m_axi_key_WID <= ap_const_lv1_0;
    m_axi_key_WLAST <= ap_const_logic_0;
    m_axi_key_WSTRB <= ap_const_lv1_0;
    m_axi_key_WUSER <= ap_const_lv1_0;
    m_axi_key_WVALID <= ap_const_logic_0;
    sum10_fu_602_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(tmp_2_fu_598_p1));
    sum11_fu_645_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(sum5_2_cast_fu_641_p1));
    sum12_fu_681_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(tmp_3_fu_677_p1));
    sum13_fu_724_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(sum5_3_cast_fu_720_p1));
    sum15_fu_447_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(tmp_s_fu_432_p1));
    sum16_fu_494_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(sum5_cast_fu_479_p1));
    sum17_fu_530_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(tmp_1_fu_515_p1));
    sum18_fu_577_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(sum5_1_cast_fu_562_p1));
    sum19_fu_613_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(tmp_2_fu_598_p1));
    sum1_fu_541_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_1_fu_515_p1));
    sum20_fu_656_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(sum5_2_cast_fu_641_p1));
    sum21_fu_692_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(tmp_3_fu_677_p1));
    sum22_fu_735_p2 <= std_logic_vector(unsigned(cpk_offset) + unsigned(sum5_3_cast_fu_720_p1));
    sum2_fu_624_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_2_fu_598_p1));
    sum3_fu_703_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_3_fu_677_p1));
    sum5_1_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_1_fu_556_p2),32));
    sum5_1_fu_556_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_E));
    sum5_2_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_2_fu_635_p2),32));
    sum5_2_fu_635_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_D));
    sum5_3_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_3_fu_714_p2),32));
    sum5_3_fu_714_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_C));
    sum5_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_473_p2),32));
    sum5_fu_473_p2 <= std_logic_vector(unsigned(i_reg_404) + unsigned(ap_const_lv5_F));
    sum6_fu_436_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(tmp_s_fu_432_p1));
    sum7_fu_483_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(sum5_cast_fu_479_p1));
    sum8_fu_519_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(tmp_1_fu_515_p1));
    sum9_fu_566_p2 <= std_logic_vector(unsigned(key_offset) + unsigned(sum5_1_cast_fu_562_p1));
    sum_fu_458_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_s_fu_432_p1));
    tmp_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_1_cast_fu_511_p1),32));
    tmp_24_fu_469_p2 <= (buf_addr_read_reg_814 xor key_addr_read_reg_808);
    tmp_2_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_2_cast_fu_594_p1),32));
    tmp_3_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_3_cast_fu_673_p1),32));
    tmp_67_1_fu_552_p2 <= (buf_addr_28_read_reg_860 xor key_addr_2_read_reg_865);
    tmp_67_2_fu_746_p2 <= (buf_addr_29_read_reg_960 xor key_addr_4_read_reg_965);
    tmp_67_3_fu_750_p2 <= (buf_addr_30_read_reg_987 xor key_addr_6_read_reg_981);
    tmp_fu_426_p2 <= "1" when (i_reg_404 = ap_const_lv5_0) else "0";
    tmp_s_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast_fu_422_p1),32));
end behav;
