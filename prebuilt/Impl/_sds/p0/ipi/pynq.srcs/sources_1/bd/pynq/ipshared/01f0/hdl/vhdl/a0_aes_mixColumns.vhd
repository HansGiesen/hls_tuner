-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aes_mixColumns is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    buf_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_aes_mixColumns is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal buf_addr_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_169_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_addr_12_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_13_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_14_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_481 : STD_LOGIC_VECTOR (4 downto 0);
    signal a_reg_486 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_493 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_reg_508 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC;
    signal tmp_5_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_530 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_158 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_buf_r_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_buf_r_WREADY : STD_LOGIC;
    signal tmp_s_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_181_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_196_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_cast_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_cast_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_cast_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_fu_265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_279_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_fu_293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i_fu_299_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i1_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i1_fu_342_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_2_fu_361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_365_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i2_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i2_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_3_fu_404_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_416_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i3_fu_422_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_i3_fu_428_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = m_axi_buf_r_ARREADY)))) then 
                    ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_buf_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = m_axi_buf_r_AWREADY)))) then 
                    ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_1 = m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_logic_1 = m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_1 = m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_logic_1 = m_axi_buf_r_WREADY)))) then 
                    ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_buf_r_BVALID = ap_const_logic_1))) then 
                i_reg_158 <= i_7_reg_481;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_158 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                a_reg_486 <= m_axi_buf_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                b_reg_493 <= m_axi_buf_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_169_p3 = ap_const_lv1_0))) then
                buf_addr_12_reg_460 <= sum1_fu_206_p2;
                buf_addr_13_reg_467 <= sum2_fu_227_p2;
                buf_addr_14_reg_474 <= sum3_fu_248_p2;
                buf_addr_reg_453 <= sum_fu_185_p2;
                i_7_reg_481 <= i_7_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                c_reg_500 <= m_axi_buf_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                d_reg_508 <= m_axi_buf_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1))) then
                tmp_1_reg_525 <= tmp_1_fu_399_p2;
                tmp_5_reg_520 <= tmp_5_fu_356_p2;
                tmp_7_reg_530 <= tmp_7_fu_436_p2;
                tmp_9_reg_515 <= tmp_9_fu_313_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_buf_r_RVALID, m_axi_buf_r_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state22, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state2, tmp_fu_169_p3, ap_sig_ioackin_m_axi_buf_r_AWREADY, ap_sig_ioackin_m_axi_buf_r_ARREADY, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_169_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_buf_r_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_buf_r_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_buf_r_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_buf_r_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_169_p3)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_169_p3 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_169_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_169_p3 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(m_axi_buf_r_ARREADY, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= m_axi_buf_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(m_axi_buf_r_AWREADY, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= m_axi_buf_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_WREADY_assign_proc : process(m_axi_buf_r_WREADY, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= m_axi_buf_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AR_assign_proc : process(m_axi_buf_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            buf_r_blk_n_AR <= m_axi_buf_r_ARREADY;
        else 
            buf_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(m_axi_buf_r_AWREADY, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_R_assign_proc : process(m_axi_buf_r_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_blk_n_R <= m_axi_buf_r_RVALID;
        else 
            buf_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    e_fu_274_p2 <= (d_reg_508 xor tmp_6_fu_269_p2);
    i_7_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv5_4) + unsigned(i_reg_158));

    m_axi_buf_r_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, buf_addr_reg_453, buf_addr_12_reg_460, buf_addr_13_reg_467, buf_addr_14_reg_474, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_buf_r_ARADDR <= buf_addr_14_reg_474;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_axi_buf_r_ARADDR <= buf_addr_13_reg_467;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_buf_r_ARADDR <= buf_addr_12_reg_460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_buf_r_ARADDR <= buf_addr_reg_453;
            else 
                m_axi_buf_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_buf_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_buf_r_ARBURST <= ap_const_lv2_0;
    m_axi_buf_r_ARCACHE <= ap_const_lv4_0;
    m_axi_buf_r_ARID <= ap_const_lv1_0;
    m_axi_buf_r_ARLEN <= ap_const_lv32_1;
    m_axi_buf_r_ARLOCK <= ap_const_lv2_0;
    m_axi_buf_r_ARPROT <= ap_const_lv3_0;
    m_axi_buf_r_ARQOS <= ap_const_lv4_0;
    m_axi_buf_r_ARREGION <= ap_const_lv4_0;
    m_axi_buf_r_ARSIZE <= ap_const_lv3_0;
    m_axi_buf_r_ARUSER <= ap_const_lv1_0;

    m_axi_buf_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)))) then 
            m_axi_buf_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_AWADDR_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state18, buf_addr_reg_453, buf_addr_12_reg_460, buf_addr_13_reg_467, buf_addr_14_reg_474, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_buf_r_BVALID = ap_const_logic_1))) then 
                m_axi_buf_r_AWADDR <= buf_addr_14_reg_474;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                m_axi_buf_r_AWADDR <= buf_addr_13_reg_467;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                m_axi_buf_r_AWADDR <= buf_addr_12_reg_460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                m_axi_buf_r_AWADDR <= buf_addr_reg_453;
            else 
                m_axi_buf_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_buf_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_buf_r_AWBURST <= ap_const_lv2_0;
    m_axi_buf_r_AWCACHE <= ap_const_lv4_0;
    m_axi_buf_r_AWID <= ap_const_lv1_0;
    m_axi_buf_r_AWLEN <= ap_const_lv32_1;
    m_axi_buf_r_AWLOCK <= ap_const_lv2_0;
    m_axi_buf_r_AWPROT <= ap_const_lv3_0;
    m_axi_buf_r_AWQOS <= ap_const_lv4_0;
    m_axi_buf_r_AWREGION <= ap_const_lv4_0;
    m_axi_buf_r_AWSIZE <= ap_const_lv3_0;
    m_axi_buf_r_AWUSER <= ap_const_lv1_0;

    m_axi_buf_r_AWVALID_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (m_axi_buf_r_BVALID = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)))) then 
            m_axi_buf_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_BREADY_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state24, ap_CS_fsm_state26, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (m_axi_buf_r_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (m_axi_buf_r_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (m_axi_buf_r_BVALID = ap_const_logic_1)))) then 
            m_axi_buf_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_RREADY_assign_proc : process(m_axi_buf_r_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_buf_r_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_buf_r_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_buf_r_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_buf_r_RVALID = ap_const_logic_1)))) then 
            m_axi_buf_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_WDATA_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, tmp_9_reg_515, tmp_5_reg_520, tmp_1_reg_525, tmp_7_reg_530, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                m_axi_buf_r_WDATA <= tmp_7_reg_530;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                m_axi_buf_r_WDATA <= tmp_1_reg_525;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                m_axi_buf_r_WDATA <= tmp_5_reg_520;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                m_axi_buf_r_WDATA <= tmp_9_reg_515;
            else 
                m_axi_buf_r_WDATA <= "XXXXXXXX";
            end if;
        else 
            m_axi_buf_r_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_buf_r_WID <= ap_const_lv1_0;
    m_axi_buf_r_WLAST <= ap_const_logic_0;
    m_axi_buf_r_WSTRB <= ap_const_lv1_1;
    m_axi_buf_r_WUSER <= ap_const_lv1_0;

    m_axi_buf_r_WVALID_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)))) then 
            m_axi_buf_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    sum1_fu_206_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_2_cast_fu_202_p1));
    sum2_fu_227_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_3_cast_fu_223_p1));
    sum3_fu_248_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_4_cast_fu_244_p1));
    sum_fu_185_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_s_fu_177_p1));
    tmp1_fu_307_p2 <= (tmp_4_i_fu_299_p3 xor e_fu_274_p2);
    tmp2_fu_350_p2 <= (tmp_4_i1_fu_342_p3 xor e_fu_274_p2);
    tmp3_fu_393_p2 <= (tmp_4_i2_fu_385_p3 xor e_fu_274_p2);
    tmp_10_fu_279_p3 <= x_assign_fu_265_p2(7 downto 7);
    tmp_11_fu_287_p2 <= std_logic_vector(shift_left(unsigned(x_assign_fu_265_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_12_fu_322_p3 <= x_assign_1_fu_318_p2(7 downto 7);
    tmp_13_fu_330_p2 <= std_logic_vector(shift_left(unsigned(x_assign_1_fu_318_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_14_fu_365_p3 <= x_assign_2_fu_361_p2(7 downto 7);
    tmp_15_fu_373_p2 <= std_logic_vector(shift_left(unsigned(x_assign_2_fu_361_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_16_fu_408_p3 <= x_assign_3_fu_404_p2(7 downto 7);
    tmp_17_fu_416_p2 <= std_logic_vector(shift_left(unsigned(x_assign_3_fu_404_p2),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_1_fu_399_p2 <= (tmp3_fu_393_p2 xor c_reg_500);
    tmp_2_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_196_p2),32));
    tmp_2_fu_196_p2 <= (tmp_8_fu_181_p1 or ap_const_lv4_1);
    tmp_2_i1_fu_336_p2 <= (tmp_13_fu_330_p2 xor ap_const_lv8_1B);
    tmp_2_i2_fu_379_p2 <= (tmp_15_fu_373_p2 xor ap_const_lv8_1B);
    tmp_2_i3_fu_422_p2 <= (tmp_17_fu_416_p2 xor ap_const_lv8_1B);
    tmp_2_i_fu_293_p2 <= (tmp_11_fu_287_p2 xor ap_const_lv8_1B);
    tmp_3_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_217_p2),32));
    tmp_3_fu_217_p2 <= (tmp_8_fu_181_p1 or ap_const_lv4_2);
    tmp_4_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_238_p2),32));
    tmp_4_fu_238_p2 <= (tmp_8_fu_181_p1 or ap_const_lv4_3);
    tmp_4_i1_fu_342_p3 <= 
        tmp_2_i1_fu_336_p2 when (tmp_12_fu_322_p3(0) = '1') else 
        tmp_13_fu_330_p2;
    tmp_4_i2_fu_385_p3 <= 
        tmp_2_i2_fu_379_p2 when (tmp_14_fu_365_p3(0) = '1') else 
        tmp_15_fu_373_p2;
    tmp_4_i3_fu_428_p3 <= 
        tmp_2_i3_fu_422_p2 when (tmp_16_fu_408_p3(0) = '1') else 
        tmp_17_fu_416_p2;
    tmp_4_i_fu_299_p3 <= 
        tmp_2_i_fu_293_p2 when (tmp_10_fu_279_p3(0) = '1') else 
        tmp_11_fu_287_p2;
    tmp_5_fu_356_p2 <= (tmp2_fu_350_p2 xor b_reg_493);
    tmp_6_fu_269_p2 <= (c_reg_500 xor x_assign_fu_265_p2);
    tmp_7_fu_436_p2 <= (tmp_4_i3_fu_428_p3 xor tmp_6_fu_269_p2);
    tmp_8_fu_181_p1 <= i_reg_158(4 - 1 downto 0);
    tmp_9_fu_313_p2 <= (tmp1_fu_307_p2 xor a_reg_486);
    tmp_fu_169_p3 <= i_reg_158(4 downto 4);
    tmp_s_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_158),32));
    x_assign_1_fu_318_p2 <= (c_reg_500 xor b_reg_493);
    x_assign_2_fu_361_p2 <= (d_reg_508 xor c_reg_500);
    x_assign_3_fu_404_p2 <= (d_reg_508 xor a_reg_486);
    x_assign_fu_265_p2 <= (b_reg_493 xor a_reg_486);
end behav;
