-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_encrypt is
generic (
    C_M_AXI_CTX_KEY_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTX_KEY_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_KEY_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_KEY_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTX_KEY_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_KEY_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_KEY_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_KEY_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_ENCKEY_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTX_ENCKEY_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_ENCKEY_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_ENCKEY_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTX_ENCKEY_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_ENCKEY_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_ENCKEY_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_ENCKEY_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_DECKEY_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CTX_DECKEY_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_DECKEY_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_DECKEY_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CTX_DECKEY_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_DECKEY_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_DECKEY_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_DECKEY_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CTX_KEY_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTX_KEY_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTX_KEY_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CTX_ENCKEY_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTX_ENCKEY_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTX_ENCKEY_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CTX_DECKEY_USER_VALUE : INTEGER := 0;
    C_M_AXI_CTX_DECKEY_PROT_VALUE : INTEGER := 0;
    C_M_AXI_CTX_DECKEY_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_BUF_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_ctx_key_AWVALID : OUT STD_LOGIC;
    m_axi_ctx_key_AWREADY : IN STD_LOGIC;
    m_axi_ctx_key_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ADDR_WIDTH-1 downto 0);
    m_axi_ctx_key_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_key_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ctx_key_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_key_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_key_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_key_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_key_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_key_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_key_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_key_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_AWUSER_WIDTH-1 downto 0);
    m_axi_ctx_key_WVALID : OUT STD_LOGIC;
    m_axi_ctx_key_WREADY : IN STD_LOGIC;
    m_axi_ctx_key_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_DATA_WIDTH-1 downto 0);
    m_axi_ctx_key_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_DATA_WIDTH/8-1 downto 0);
    m_axi_ctx_key_WLAST : OUT STD_LOGIC;
    m_axi_ctx_key_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_key_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_WUSER_WIDTH-1 downto 0);
    m_axi_ctx_key_ARVALID : OUT STD_LOGIC;
    m_axi_ctx_key_ARREADY : IN STD_LOGIC;
    m_axi_ctx_key_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ADDR_WIDTH-1 downto 0);
    m_axi_ctx_key_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_key_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ctx_key_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_key_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_key_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_key_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_key_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_key_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_key_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_key_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ARUSER_WIDTH-1 downto 0);
    m_axi_ctx_key_RVALID : IN STD_LOGIC;
    m_axi_ctx_key_RREADY : OUT STD_LOGIC;
    m_axi_ctx_key_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_DATA_WIDTH-1 downto 0);
    m_axi_ctx_key_RLAST : IN STD_LOGIC;
    m_axi_ctx_key_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_key_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_RUSER_WIDTH-1 downto 0);
    m_axi_ctx_key_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_key_BVALID : IN STD_LOGIC;
    m_axi_ctx_key_BREADY : OUT STD_LOGIC;
    m_axi_ctx_key_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_key_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_key_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_KEY_BUSER_WIDTH-1 downto 0);
    m_axi_ctx_enckey_AWVALID : OUT STD_LOGIC;
    m_axi_ctx_enckey_AWREADY : IN STD_LOGIC;
    m_axi_ctx_enckey_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ADDR_WIDTH-1 downto 0);
    m_axi_ctx_enckey_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_enckey_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ctx_enckey_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_enckey_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_enckey_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_enckey_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_enckey_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_enckey_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_enckey_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_enckey_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_AWUSER_WIDTH-1 downto 0);
    m_axi_ctx_enckey_WVALID : OUT STD_LOGIC;
    m_axi_ctx_enckey_WREADY : IN STD_LOGIC;
    m_axi_ctx_enckey_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_DATA_WIDTH-1 downto 0);
    m_axi_ctx_enckey_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_DATA_WIDTH/8-1 downto 0);
    m_axi_ctx_enckey_WLAST : OUT STD_LOGIC;
    m_axi_ctx_enckey_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_enckey_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_WUSER_WIDTH-1 downto 0);
    m_axi_ctx_enckey_ARVALID : OUT STD_LOGIC;
    m_axi_ctx_enckey_ARREADY : IN STD_LOGIC;
    m_axi_ctx_enckey_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ADDR_WIDTH-1 downto 0);
    m_axi_ctx_enckey_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_enckey_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ctx_enckey_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_enckey_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_enckey_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_enckey_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_enckey_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_enckey_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_enckey_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_enckey_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ARUSER_WIDTH-1 downto 0);
    m_axi_ctx_enckey_RVALID : IN STD_LOGIC;
    m_axi_ctx_enckey_RREADY : OUT STD_LOGIC;
    m_axi_ctx_enckey_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_DATA_WIDTH-1 downto 0);
    m_axi_ctx_enckey_RLAST : IN STD_LOGIC;
    m_axi_ctx_enckey_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_enckey_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_RUSER_WIDTH-1 downto 0);
    m_axi_ctx_enckey_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_enckey_BVALID : IN STD_LOGIC;
    m_axi_ctx_enckey_BREADY : OUT STD_LOGIC;
    m_axi_ctx_enckey_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_enckey_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_enckey_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_ENCKEY_BUSER_WIDTH-1 downto 0);
    m_axi_ctx_deckey_AWVALID : OUT STD_LOGIC;
    m_axi_ctx_deckey_AWREADY : IN STD_LOGIC;
    m_axi_ctx_deckey_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ADDR_WIDTH-1 downto 0);
    m_axi_ctx_deckey_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_deckey_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ctx_deckey_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_deckey_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_deckey_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_deckey_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_deckey_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_deckey_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_deckey_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_deckey_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_AWUSER_WIDTH-1 downto 0);
    m_axi_ctx_deckey_WVALID : OUT STD_LOGIC;
    m_axi_ctx_deckey_WREADY : IN STD_LOGIC;
    m_axi_ctx_deckey_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_DATA_WIDTH-1 downto 0);
    m_axi_ctx_deckey_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_DATA_WIDTH/8-1 downto 0);
    m_axi_ctx_deckey_WLAST : OUT STD_LOGIC;
    m_axi_ctx_deckey_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_deckey_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_WUSER_WIDTH-1 downto 0);
    m_axi_ctx_deckey_ARVALID : OUT STD_LOGIC;
    m_axi_ctx_deckey_ARREADY : IN STD_LOGIC;
    m_axi_ctx_deckey_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ADDR_WIDTH-1 downto 0);
    m_axi_ctx_deckey_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_deckey_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ctx_deckey_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_deckey_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_deckey_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_deckey_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_deckey_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ctx_deckey_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_deckey_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ctx_deckey_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ARUSER_WIDTH-1 downto 0);
    m_axi_ctx_deckey_RVALID : IN STD_LOGIC;
    m_axi_ctx_deckey_RREADY : OUT STD_LOGIC;
    m_axi_ctx_deckey_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_DATA_WIDTH-1 downto 0);
    m_axi_ctx_deckey_RLAST : IN STD_LOGIC;
    m_axi_ctx_deckey_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_deckey_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_RUSER_WIDTH-1 downto 0);
    m_axi_ctx_deckey_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_deckey_BVALID : IN STD_LOGIC;
    m_axi_ctx_deckey_BREADY : OUT STD_LOGIC;
    m_axi_ctx_deckey_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ctx_deckey_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_ID_WIDTH-1 downto 0);
    m_axi_ctx_deckey_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CTX_DECKEY_BUSER_WIDTH-1 downto 0);
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_AWUSER_WIDTH-1 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH/8-1 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_WUSER_WIDTH-1 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ARUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_RUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_BUSER_WIDTH-1 downto 0);
    ctx_key_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_enckey_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    ctx_deckey_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    k_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    k_EN_A : OUT STD_LOGIC;
    k_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    k_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    k_Clk_A : OUT STD_LOGIC;
    k_Rst_A : OUT STD_LOGIC;
    buf_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a0_encrypt,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.110001,HLS_SYN_LAT=18489,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=5268,HLS_SYN_LUT=11732}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctx_enckey_blk_n_AW : STD_LOGIC;
    signal ctx_enckey_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ctx_enckey_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ctx_deckey_blk_n_AW : STD_LOGIC;
    signal ctx_deckey_blk_n_B : STD_LOGIC;
    signal ctx_deckey_blk_n_W : STD_LOGIC;
    signal ctx_key_AWVALID : STD_LOGIC;
    signal ctx_key_AWREADY : STD_LOGIC;
    signal ctx_key_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_key_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_key_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_key_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_key_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_key_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_key_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_key_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_key_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_key_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_WVALID : STD_LOGIC;
    signal ctx_key_WREADY : STD_LOGIC;
    signal ctx_key_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_WLAST : STD_LOGIC;
    signal ctx_key_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_ARVALID : STD_LOGIC;
    signal ctx_key_ARREADY : STD_LOGIC;
    signal ctx_key_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_key_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_key_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_key_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_key_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_key_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_key_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_key_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_key_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_key_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_RVALID : STD_LOGIC;
    signal ctx_key_RREADY : STD_LOGIC;
    signal ctx_key_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_key_RLAST : STD_LOGIC;
    signal ctx_key_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_key_BVALID : STD_LOGIC;
    signal ctx_key_BREADY : STD_LOGIC;
    signal ctx_key_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_key_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_key_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_enckey_AWVALID : STD_LOGIC;
    signal ctx_enckey_AWREADY : STD_LOGIC;
    signal ctx_enckey_WVALID : STD_LOGIC;
    signal ctx_enckey_WREADY : STD_LOGIC;
    signal ctx_enckey_ARVALID : STD_LOGIC;
    signal ctx_enckey_ARREADY : STD_LOGIC;
    signal ctx_enckey_RVALID : STD_LOGIC;
    signal ctx_enckey_RREADY : STD_LOGIC;
    signal ctx_enckey_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_enckey_RLAST : STD_LOGIC;
    signal ctx_enckey_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_enckey_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_enckey_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_enckey_BVALID : STD_LOGIC;
    signal ctx_enckey_BREADY : STD_LOGIC;
    signal ctx_enckey_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_enckey_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_enckey_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_AWVALID : STD_LOGIC;
    signal ctx_deckey_AWREADY : STD_LOGIC;
    signal ctx_deckey_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_deckey_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ctx_deckey_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_deckey_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_deckey_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_deckey_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_deckey_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_deckey_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_deckey_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ctx_deckey_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_WVALID : STD_LOGIC;
    signal ctx_deckey_WREADY : STD_LOGIC;
    signal ctx_deckey_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_WLAST : STD_LOGIC;
    signal ctx_deckey_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_ARVALID : STD_LOGIC;
    signal ctx_deckey_ARREADY : STD_LOGIC;
    signal ctx_deckey_RVALID : STD_LOGIC;
    signal ctx_deckey_RREADY : STD_LOGIC;
    signal ctx_deckey_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_deckey_RLAST : STD_LOGIC;
    signal ctx_deckey_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_deckey_BVALID : STD_LOGIC;
    signal ctx_deckey_BREADY : STD_LOGIC;
    signal ctx_deckey_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ctx_deckey_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ctx_deckey_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_AWVALID : STD_LOGIC;
    signal buf_r_AWREADY : STD_LOGIC;
    signal buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal buf_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal buf_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_WVALID : STD_LOGIC;
    signal buf_r_WREADY : STD_LOGIC;
    signal buf_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_WLAST : STD_LOGIC;
    signal buf_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_ARVALID : STD_LOGIC;
    signal buf_r_ARREADY : STD_LOGIC;
    signal buf_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal buf_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal buf_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RVALID : STD_LOGIC;
    signal buf_r_RREADY : STD_LOGIC;
    signal buf_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_r_RLAST : STD_LOGIC;
    signal buf_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BVALID : STD_LOGIC;
    signal buf_r_BREADY : STD_LOGIC;
    signal buf_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_301 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_aes_mixColumns_fu_255_ap_done : STD_LOGIC;
    signal tmp_1_fu_360_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_ctx_deckey_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_ctx_enckey_AWREADY : STD_LOGIC;
    signal ap_block_state1_io : BOOLEAN;
    signal i_3_fu_326_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_416 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_load_reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal phitmp_fu_343_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal phitmp_reg_435 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_7_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_aes_expandEncKey_fu_236_ap_done : STD_LOGIC;
    signal tmp_1_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_369_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_aes_addRoundKey_fu_275_ap_done : STD_LOGIC;
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal grp_aes_expandEncKey_fu_236_ap_start : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_ap_idle : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_ap_ready : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WVALID : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WREADY : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WLAST : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RVALID : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RREADY : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RLAST : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_BVALID : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_BREADY : STD_LOGIC;
    signal grp_aes_expandEncKey_fu_236_m_axi_k_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_m_axi_k_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_expandEncKey_fu_236_k_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_expandEncKey_fu_236_rc_read : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_shiftRows_fu_248_ap_start : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_ap_done : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_ap_idle : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_ap_ready : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY : STD_LOGIC;
    signal grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_ap_start : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_ap_idle : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_ap_ready : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY : STD_LOGIC;
    signal grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_ap_start : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_ap_done : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_ap_idle : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_ap_ready : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WLAST : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_key_BREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_RREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_ap_start : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_ap_idle : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_ap_ready : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_WVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_key_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_WLAST : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_key_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_addRoundKey_fu_275_m_axi_key_RREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_m_axi_key_BREADY : STD_LOGIC;
    signal grp_aes_addRoundKey_fu_275_key_offset_offset : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_subBytes_fu_288_ap_start : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_ap_done : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_ap_idle : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_ap_ready : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY : STD_LOGIC;
    signal grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY : STD_LOGIC;
    signal i_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_ioackin_ctx_deckey_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_ctx_enckey_WREADY : STD_LOGIC;
    signal ap_block_state4_io : BOOLEAN;
    signal rcon_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal i_1_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_reg_grp_aes_expandEncKey_fu_236_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_reg_grp_aes_shiftRows_fu_248_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_reg_grp_aes_mixColumns_fu_255_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_aes_addRoundKey_fu_275_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_reg_grp_aes_subBytes_fu_288_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_5_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_ctx_deckey_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_ctx_enckey_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_ctx_deckey_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_ctx_enckey_WREADY : STD_LOGIC := '0';
    signal rcon_1_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_state23_on_subcall_done : BOOLEAN;

    component a0_aes_expandEncKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_k_AWVALID : OUT STD_LOGIC;
        m_axi_k_AWREADY : IN STD_LOGIC;
        m_axi_k_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_k_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_k_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_k_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_k_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_k_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_k_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_k_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_k_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_k_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_WVALID : OUT STD_LOGIC;
        m_axi_k_WREADY : IN STD_LOGIC;
        m_axi_k_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_k_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_WLAST : OUT STD_LOGIC;
        m_axi_k_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_ARVALID : OUT STD_LOGIC;
        m_axi_k_ARREADY : IN STD_LOGIC;
        m_axi_k_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_k_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_k_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_k_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_k_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_k_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_k_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_k_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_k_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_k_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_RVALID : IN STD_LOGIC;
        m_axi_k_RREADY : OUT STD_LOGIC;
        m_axi_k_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_k_RLAST : IN STD_LOGIC;
        m_axi_k_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_k_BVALID : IN STD_LOGIC;
        m_axi_k_BREADY : OUT STD_LOGIC;
        m_axi_k_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_k_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_k_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        k_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_aes_shiftRows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_buf_r_AWVALID : OUT STD_LOGIC;
        m_axi_buf_r_AWREADY : IN STD_LOGIC;
        m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WVALID : OUT STD_LOGIC;
        m_axi_buf_r_WREADY : IN STD_LOGIC;
        m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WLAST : OUT STD_LOGIC;
        m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARVALID : OUT STD_LOGIC;
        m_axi_buf_r_ARREADY : IN STD_LOGIC;
        m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RVALID : IN STD_LOGIC;
        m_axi_buf_r_RREADY : OUT STD_LOGIC;
        m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_RLAST : IN STD_LOGIC;
        m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BVALID : IN STD_LOGIC;
        m_axi_buf_r_BREADY : OUT STD_LOGIC;
        m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buf_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_aes_mixColumns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_buf_r_AWVALID : OUT STD_LOGIC;
        m_axi_buf_r_AWREADY : IN STD_LOGIC;
        m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WVALID : OUT STD_LOGIC;
        m_axi_buf_r_WREADY : IN STD_LOGIC;
        m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WLAST : OUT STD_LOGIC;
        m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARVALID : OUT STD_LOGIC;
        m_axi_buf_r_ARREADY : IN STD_LOGIC;
        m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RVALID : IN STD_LOGIC;
        m_axi_buf_r_RREADY : OUT STD_LOGIC;
        m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_RLAST : IN STD_LOGIC;
        m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BVALID : IN STD_LOGIC;
        m_axi_buf_r_BREADY : OUT STD_LOGIC;
        m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buf_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_aes_addRoundKey_cpy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_buf_r_AWVALID : OUT STD_LOGIC;
        m_axi_buf_r_AWREADY : IN STD_LOGIC;
        m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WVALID : OUT STD_LOGIC;
        m_axi_buf_r_WREADY : IN STD_LOGIC;
        m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WLAST : OUT STD_LOGIC;
        m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARVALID : OUT STD_LOGIC;
        m_axi_buf_r_ARREADY : IN STD_LOGIC;
        m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RVALID : IN STD_LOGIC;
        m_axi_buf_r_RREADY : OUT STD_LOGIC;
        m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_RLAST : IN STD_LOGIC;
        m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BVALID : IN STD_LOGIC;
        m_axi_buf_r_BREADY : OUT STD_LOGIC;
        m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buf_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_AWVALID : OUT STD_LOGIC;
        m_axi_key_AWREADY : IN STD_LOGIC;
        m_axi_key_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_WVALID : OUT STD_LOGIC;
        m_axi_key_WREADY : IN STD_LOGIC;
        m_axi_key_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_key_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_WLAST : OUT STD_LOGIC;
        m_axi_key_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_ARVALID : OUT STD_LOGIC;
        m_axi_key_ARREADY : IN STD_LOGIC;
        m_axi_key_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_RVALID : IN STD_LOGIC;
        m_axi_key_RREADY : OUT STD_LOGIC;
        m_axi_key_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_key_RLAST : IN STD_LOGIC;
        m_axi_key_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_BVALID : IN STD_LOGIC;
        m_axi_key_BREADY : OUT STD_LOGIC;
        m_axi_key_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        key_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cpk_AWVALID : OUT STD_LOGIC;
        m_axi_cpk_AWREADY : IN STD_LOGIC;
        m_axi_cpk_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cpk_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cpk_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cpk_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cpk_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cpk_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cpk_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cpk_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cpk_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cpk_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_WVALID : OUT STD_LOGIC;
        m_axi_cpk_WREADY : IN STD_LOGIC;
        m_axi_cpk_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_cpk_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_WLAST : OUT STD_LOGIC;
        m_axi_cpk_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_ARVALID : OUT STD_LOGIC;
        m_axi_cpk_ARREADY : IN STD_LOGIC;
        m_axi_cpk_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cpk_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_cpk_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cpk_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cpk_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cpk_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cpk_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_cpk_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cpk_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_cpk_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_RVALID : IN STD_LOGIC;
        m_axi_cpk_RREADY : OUT STD_LOGIC;
        m_axi_cpk_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_cpk_RLAST : IN STD_LOGIC;
        m_axi_cpk_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cpk_BVALID : IN STD_LOGIC;
        m_axi_cpk_BREADY : OUT STD_LOGIC;
        m_axi_cpk_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_cpk_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_cpk_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        cpk_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_aes_addRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_buf_r_AWVALID : OUT STD_LOGIC;
        m_axi_buf_r_AWREADY : IN STD_LOGIC;
        m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WVALID : OUT STD_LOGIC;
        m_axi_buf_r_WREADY : IN STD_LOGIC;
        m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WLAST : OUT STD_LOGIC;
        m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARVALID : OUT STD_LOGIC;
        m_axi_buf_r_ARREADY : IN STD_LOGIC;
        m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RVALID : IN STD_LOGIC;
        m_axi_buf_r_RREADY : OUT STD_LOGIC;
        m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_RLAST : IN STD_LOGIC;
        m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BVALID : IN STD_LOGIC;
        m_axi_buf_r_BREADY : OUT STD_LOGIC;
        m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buf_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_AWVALID : OUT STD_LOGIC;
        m_axi_key_AWREADY : IN STD_LOGIC;
        m_axi_key_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_WVALID : OUT STD_LOGIC;
        m_axi_key_WREADY : IN STD_LOGIC;
        m_axi_key_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_key_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_WLAST : OUT STD_LOGIC;
        m_axi_key_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_ARVALID : OUT STD_LOGIC;
        m_axi_key_ARREADY : IN STD_LOGIC;
        m_axi_key_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_key_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_key_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_key_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_RVALID : IN STD_LOGIC;
        m_axi_key_RREADY : OUT STD_LOGIC;
        m_axi_key_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_key_RLAST : IN STD_LOGIC;
        m_axi_key_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_BVALID : IN STD_LOGIC;
        m_axi_key_BREADY : OUT STD_LOGIC;
        m_axi_key_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_key_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_key_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        key_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        key_offset_offset : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component a0_aes_subBytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_buf_r_AWVALID : OUT STD_LOGIC;
        m_axi_buf_r_AWREADY : IN STD_LOGIC;
        m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WVALID : OUT STD_LOGIC;
        m_axi_buf_r_WREADY : IN STD_LOGIC;
        m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WLAST : OUT STD_LOGIC;
        m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARVALID : OUT STD_LOGIC;
        m_axi_buf_r_ARREADY : IN STD_LOGIC;
        m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RVALID : IN STD_LOGIC;
        m_axi_buf_r_RREADY : OUT STD_LOGIC;
        m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_buf_r_RLAST : IN STD_LOGIC;
        m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BVALID : IN STD_LOGIC;
        m_axi_buf_r_BREADY : OUT STD_LOGIC;
        m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        buf_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_encrypt_ctx_key_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component a0_encrypt_ctx_enckey_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component a0_encrypt_ctx_deckey_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component a0_encrypt_buf_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    encrypt_ctx_key_m_axi_U : component a0_encrypt_ctx_key_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTX_KEY_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTX_KEY_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTX_KEY_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTX_KEY_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTX_KEY_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTX_KEY_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTX_KEY_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTX_KEY_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CTX_KEY_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTX_KEY_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTX_KEY_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ctx_key_AWVALID,
        AWREADY => m_axi_ctx_key_AWREADY,
        AWADDR => m_axi_ctx_key_AWADDR,
        AWID => m_axi_ctx_key_AWID,
        AWLEN => m_axi_ctx_key_AWLEN,
        AWSIZE => m_axi_ctx_key_AWSIZE,
        AWBURST => m_axi_ctx_key_AWBURST,
        AWLOCK => m_axi_ctx_key_AWLOCK,
        AWCACHE => m_axi_ctx_key_AWCACHE,
        AWPROT => m_axi_ctx_key_AWPROT,
        AWQOS => m_axi_ctx_key_AWQOS,
        AWREGION => m_axi_ctx_key_AWREGION,
        AWUSER => m_axi_ctx_key_AWUSER,
        WVALID => m_axi_ctx_key_WVALID,
        WREADY => m_axi_ctx_key_WREADY,
        WDATA => m_axi_ctx_key_WDATA,
        WSTRB => m_axi_ctx_key_WSTRB,
        WLAST => m_axi_ctx_key_WLAST,
        WID => m_axi_ctx_key_WID,
        WUSER => m_axi_ctx_key_WUSER,
        ARVALID => m_axi_ctx_key_ARVALID,
        ARREADY => m_axi_ctx_key_ARREADY,
        ARADDR => m_axi_ctx_key_ARADDR,
        ARID => m_axi_ctx_key_ARID,
        ARLEN => m_axi_ctx_key_ARLEN,
        ARSIZE => m_axi_ctx_key_ARSIZE,
        ARBURST => m_axi_ctx_key_ARBURST,
        ARLOCK => m_axi_ctx_key_ARLOCK,
        ARCACHE => m_axi_ctx_key_ARCACHE,
        ARPROT => m_axi_ctx_key_ARPROT,
        ARQOS => m_axi_ctx_key_ARQOS,
        ARREGION => m_axi_ctx_key_ARREGION,
        ARUSER => m_axi_ctx_key_ARUSER,
        RVALID => m_axi_ctx_key_RVALID,
        RREADY => m_axi_ctx_key_RREADY,
        RDATA => m_axi_ctx_key_RDATA,
        RLAST => m_axi_ctx_key_RLAST,
        RID => m_axi_ctx_key_RID,
        RUSER => m_axi_ctx_key_RUSER,
        RRESP => m_axi_ctx_key_RRESP,
        BVALID => m_axi_ctx_key_BVALID,
        BREADY => m_axi_ctx_key_BREADY,
        BRESP => m_axi_ctx_key_BRESP,
        BID => m_axi_ctx_key_BID,
        BUSER => m_axi_ctx_key_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ctx_key_ARVALID,
        I_ARREADY => ctx_key_ARREADY,
        I_ARADDR => ctx_key_ARADDR,
        I_ARID => ctx_key_ARID,
        I_ARLEN => ctx_key_ARLEN,
        I_ARSIZE => ctx_key_ARSIZE,
        I_ARLOCK => ctx_key_ARLOCK,
        I_ARCACHE => ctx_key_ARCACHE,
        I_ARQOS => ctx_key_ARQOS,
        I_ARPROT => ctx_key_ARPROT,
        I_ARUSER => ctx_key_ARUSER,
        I_ARBURST => ctx_key_ARBURST,
        I_ARREGION => ctx_key_ARREGION,
        I_RVALID => ctx_key_RVALID,
        I_RREADY => ctx_key_RREADY,
        I_RDATA => ctx_key_RDATA,
        I_RID => ctx_key_RID,
        I_RUSER => ctx_key_RUSER,
        I_RRESP => ctx_key_RRESP,
        I_RLAST => ctx_key_RLAST,
        I_AWVALID => ctx_key_AWVALID,
        I_AWREADY => ctx_key_AWREADY,
        I_AWADDR => ctx_key_AWADDR,
        I_AWID => ctx_key_AWID,
        I_AWLEN => ctx_key_AWLEN,
        I_AWSIZE => ctx_key_AWSIZE,
        I_AWLOCK => ctx_key_AWLOCK,
        I_AWCACHE => ctx_key_AWCACHE,
        I_AWQOS => ctx_key_AWQOS,
        I_AWPROT => ctx_key_AWPROT,
        I_AWUSER => ctx_key_AWUSER,
        I_AWBURST => ctx_key_AWBURST,
        I_AWREGION => ctx_key_AWREGION,
        I_WVALID => ctx_key_WVALID,
        I_WREADY => ctx_key_WREADY,
        I_WDATA => ctx_key_WDATA,
        I_WID => ctx_key_WID,
        I_WUSER => ctx_key_WUSER,
        I_WLAST => ctx_key_WLAST,
        I_WSTRB => ctx_key_WSTRB,
        I_BVALID => ctx_key_BVALID,
        I_BREADY => ctx_key_BREADY,
        I_BRESP => ctx_key_BRESP,
        I_BID => ctx_key_BID,
        I_BUSER => ctx_key_BUSER);

    encrypt_ctx_enckey_m_axi_U : component a0_encrypt_ctx_enckey_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTX_ENCKEY_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTX_ENCKEY_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTX_ENCKEY_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTX_ENCKEY_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTX_ENCKEY_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTX_ENCKEY_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTX_ENCKEY_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTX_ENCKEY_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CTX_ENCKEY_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTX_ENCKEY_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTX_ENCKEY_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ctx_enckey_AWVALID,
        AWREADY => m_axi_ctx_enckey_AWREADY,
        AWADDR => m_axi_ctx_enckey_AWADDR,
        AWID => m_axi_ctx_enckey_AWID,
        AWLEN => m_axi_ctx_enckey_AWLEN,
        AWSIZE => m_axi_ctx_enckey_AWSIZE,
        AWBURST => m_axi_ctx_enckey_AWBURST,
        AWLOCK => m_axi_ctx_enckey_AWLOCK,
        AWCACHE => m_axi_ctx_enckey_AWCACHE,
        AWPROT => m_axi_ctx_enckey_AWPROT,
        AWQOS => m_axi_ctx_enckey_AWQOS,
        AWREGION => m_axi_ctx_enckey_AWREGION,
        AWUSER => m_axi_ctx_enckey_AWUSER,
        WVALID => m_axi_ctx_enckey_WVALID,
        WREADY => m_axi_ctx_enckey_WREADY,
        WDATA => m_axi_ctx_enckey_WDATA,
        WSTRB => m_axi_ctx_enckey_WSTRB,
        WLAST => m_axi_ctx_enckey_WLAST,
        WID => m_axi_ctx_enckey_WID,
        WUSER => m_axi_ctx_enckey_WUSER,
        ARVALID => m_axi_ctx_enckey_ARVALID,
        ARREADY => m_axi_ctx_enckey_ARREADY,
        ARADDR => m_axi_ctx_enckey_ARADDR,
        ARID => m_axi_ctx_enckey_ARID,
        ARLEN => m_axi_ctx_enckey_ARLEN,
        ARSIZE => m_axi_ctx_enckey_ARSIZE,
        ARBURST => m_axi_ctx_enckey_ARBURST,
        ARLOCK => m_axi_ctx_enckey_ARLOCK,
        ARCACHE => m_axi_ctx_enckey_ARCACHE,
        ARPROT => m_axi_ctx_enckey_ARPROT,
        ARQOS => m_axi_ctx_enckey_ARQOS,
        ARREGION => m_axi_ctx_enckey_ARREGION,
        ARUSER => m_axi_ctx_enckey_ARUSER,
        RVALID => m_axi_ctx_enckey_RVALID,
        RREADY => m_axi_ctx_enckey_RREADY,
        RDATA => m_axi_ctx_enckey_RDATA,
        RLAST => m_axi_ctx_enckey_RLAST,
        RID => m_axi_ctx_enckey_RID,
        RUSER => m_axi_ctx_enckey_RUSER,
        RRESP => m_axi_ctx_enckey_RRESP,
        BVALID => m_axi_ctx_enckey_BVALID,
        BREADY => m_axi_ctx_enckey_BREADY,
        BRESP => m_axi_ctx_enckey_BRESP,
        BID => m_axi_ctx_enckey_BID,
        BUSER => m_axi_ctx_enckey_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ctx_enckey_ARVALID,
        I_ARREADY => ctx_enckey_ARREADY,
        I_ARADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARADDR,
        I_ARID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARID,
        I_ARLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLEN,
        I_ARSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARSIZE,
        I_ARLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLOCK,
        I_ARCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARCACHE,
        I_ARQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARQOS,
        I_ARPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARPROT,
        I_ARUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARUSER,
        I_ARBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARBURST,
        I_ARREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARREGION,
        I_RVALID => ctx_enckey_RVALID,
        I_RREADY => ctx_enckey_RREADY,
        I_RDATA => ctx_enckey_RDATA,
        I_RID => ctx_enckey_RID,
        I_RUSER => ctx_enckey_RUSER,
        I_RRESP => ctx_enckey_RRESP,
        I_RLAST => ctx_enckey_RLAST,
        I_AWVALID => ctx_enckey_AWVALID,
        I_AWREADY => ctx_enckey_AWREADY,
        I_AWADDR => ctx_enckey_offset,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_20,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ctx_enckey_WVALID,
        I_WREADY => ctx_enckey_WREADY,
        I_WDATA => k_load_reg_426,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => ctx_enckey_BVALID,
        I_BREADY => ctx_enckey_BREADY,
        I_BRESP => ctx_enckey_BRESP,
        I_BID => ctx_enckey_BID,
        I_BUSER => ctx_enckey_BUSER);

    encrypt_ctx_deckey_m_axi_U : component a0_encrypt_ctx_deckey_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_CTX_DECKEY_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CTX_DECKEY_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CTX_DECKEY_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CTX_DECKEY_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CTX_DECKEY_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CTX_DECKEY_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CTX_DECKEY_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CTX_DECKEY_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CTX_DECKEY_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CTX_DECKEY_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CTX_DECKEY_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ctx_deckey_AWVALID,
        AWREADY => m_axi_ctx_deckey_AWREADY,
        AWADDR => m_axi_ctx_deckey_AWADDR,
        AWID => m_axi_ctx_deckey_AWID,
        AWLEN => m_axi_ctx_deckey_AWLEN,
        AWSIZE => m_axi_ctx_deckey_AWSIZE,
        AWBURST => m_axi_ctx_deckey_AWBURST,
        AWLOCK => m_axi_ctx_deckey_AWLOCK,
        AWCACHE => m_axi_ctx_deckey_AWCACHE,
        AWPROT => m_axi_ctx_deckey_AWPROT,
        AWQOS => m_axi_ctx_deckey_AWQOS,
        AWREGION => m_axi_ctx_deckey_AWREGION,
        AWUSER => m_axi_ctx_deckey_AWUSER,
        WVALID => m_axi_ctx_deckey_WVALID,
        WREADY => m_axi_ctx_deckey_WREADY,
        WDATA => m_axi_ctx_deckey_WDATA,
        WSTRB => m_axi_ctx_deckey_WSTRB,
        WLAST => m_axi_ctx_deckey_WLAST,
        WID => m_axi_ctx_deckey_WID,
        WUSER => m_axi_ctx_deckey_WUSER,
        ARVALID => m_axi_ctx_deckey_ARVALID,
        ARREADY => m_axi_ctx_deckey_ARREADY,
        ARADDR => m_axi_ctx_deckey_ARADDR,
        ARID => m_axi_ctx_deckey_ARID,
        ARLEN => m_axi_ctx_deckey_ARLEN,
        ARSIZE => m_axi_ctx_deckey_ARSIZE,
        ARBURST => m_axi_ctx_deckey_ARBURST,
        ARLOCK => m_axi_ctx_deckey_ARLOCK,
        ARCACHE => m_axi_ctx_deckey_ARCACHE,
        ARPROT => m_axi_ctx_deckey_ARPROT,
        ARQOS => m_axi_ctx_deckey_ARQOS,
        ARREGION => m_axi_ctx_deckey_ARREGION,
        ARUSER => m_axi_ctx_deckey_ARUSER,
        RVALID => m_axi_ctx_deckey_RVALID,
        RREADY => m_axi_ctx_deckey_RREADY,
        RDATA => m_axi_ctx_deckey_RDATA,
        RLAST => m_axi_ctx_deckey_RLAST,
        RID => m_axi_ctx_deckey_RID,
        RUSER => m_axi_ctx_deckey_RUSER,
        RRESP => m_axi_ctx_deckey_RRESP,
        BVALID => m_axi_ctx_deckey_BVALID,
        BREADY => m_axi_ctx_deckey_BREADY,
        BRESP => m_axi_ctx_deckey_BRESP,
        BID => m_axi_ctx_deckey_BID,
        BUSER => m_axi_ctx_deckey_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ctx_deckey_ARVALID,
        I_ARREADY => ctx_deckey_ARREADY,
        I_ARADDR => grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR,
        I_ARID => grp_aes_expandEncKey_fu_236_m_axi_k_ARID,
        I_ARLEN => grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN,
        I_ARSIZE => grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE,
        I_ARLOCK => grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK,
        I_ARCACHE => grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE,
        I_ARQOS => grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS,
        I_ARPROT => grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT,
        I_ARUSER => grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER,
        I_ARBURST => grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST,
        I_ARREGION => grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION,
        I_RVALID => ctx_deckey_RVALID,
        I_RREADY => ctx_deckey_RREADY,
        I_RDATA => ctx_deckey_RDATA,
        I_RID => ctx_deckey_RID,
        I_RUSER => ctx_deckey_RUSER,
        I_RRESP => ctx_deckey_RRESP,
        I_RLAST => ctx_deckey_RLAST,
        I_AWVALID => ctx_deckey_AWVALID,
        I_AWREADY => ctx_deckey_AWREADY,
        I_AWADDR => ctx_deckey_AWADDR,
        I_AWID => ctx_deckey_AWID,
        I_AWLEN => ctx_deckey_AWLEN,
        I_AWSIZE => ctx_deckey_AWSIZE,
        I_AWLOCK => ctx_deckey_AWLOCK,
        I_AWCACHE => ctx_deckey_AWCACHE,
        I_AWQOS => ctx_deckey_AWQOS,
        I_AWPROT => ctx_deckey_AWPROT,
        I_AWUSER => ctx_deckey_AWUSER,
        I_AWBURST => ctx_deckey_AWBURST,
        I_AWREGION => ctx_deckey_AWREGION,
        I_WVALID => ctx_deckey_WVALID,
        I_WREADY => ctx_deckey_WREADY,
        I_WDATA => ctx_deckey_WDATA,
        I_WID => ctx_deckey_WID,
        I_WUSER => ctx_deckey_WUSER,
        I_WLAST => ctx_deckey_WLAST,
        I_WSTRB => ctx_deckey_WSTRB,
        I_BVALID => ctx_deckey_BVALID,
        I_BREADY => ctx_deckey_BREADY,
        I_BRESP => ctx_deckey_BRESP,
        I_BID => ctx_deckey_BID,
        I_BUSER => ctx_deckey_BUSER);

    encrypt_buf_r_m_axi_U : component a0_encrypt_buf_r_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUF_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUF_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUF_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUF_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUF_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUF_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUF_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUF_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUF_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUF_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUF_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_buf_r_AWVALID,
        AWREADY => m_axi_buf_r_AWREADY,
        AWADDR => m_axi_buf_r_AWADDR,
        AWID => m_axi_buf_r_AWID,
        AWLEN => m_axi_buf_r_AWLEN,
        AWSIZE => m_axi_buf_r_AWSIZE,
        AWBURST => m_axi_buf_r_AWBURST,
        AWLOCK => m_axi_buf_r_AWLOCK,
        AWCACHE => m_axi_buf_r_AWCACHE,
        AWPROT => m_axi_buf_r_AWPROT,
        AWQOS => m_axi_buf_r_AWQOS,
        AWREGION => m_axi_buf_r_AWREGION,
        AWUSER => m_axi_buf_r_AWUSER,
        WVALID => m_axi_buf_r_WVALID,
        WREADY => m_axi_buf_r_WREADY,
        WDATA => m_axi_buf_r_WDATA,
        WSTRB => m_axi_buf_r_WSTRB,
        WLAST => m_axi_buf_r_WLAST,
        WID => m_axi_buf_r_WID,
        WUSER => m_axi_buf_r_WUSER,
        ARVALID => m_axi_buf_r_ARVALID,
        ARREADY => m_axi_buf_r_ARREADY,
        ARADDR => m_axi_buf_r_ARADDR,
        ARID => m_axi_buf_r_ARID,
        ARLEN => m_axi_buf_r_ARLEN,
        ARSIZE => m_axi_buf_r_ARSIZE,
        ARBURST => m_axi_buf_r_ARBURST,
        ARLOCK => m_axi_buf_r_ARLOCK,
        ARCACHE => m_axi_buf_r_ARCACHE,
        ARPROT => m_axi_buf_r_ARPROT,
        ARQOS => m_axi_buf_r_ARQOS,
        ARREGION => m_axi_buf_r_ARREGION,
        ARUSER => m_axi_buf_r_ARUSER,
        RVALID => m_axi_buf_r_RVALID,
        RREADY => m_axi_buf_r_RREADY,
        RDATA => m_axi_buf_r_RDATA,
        RLAST => m_axi_buf_r_RLAST,
        RID => m_axi_buf_r_RID,
        RUSER => m_axi_buf_r_RUSER,
        RRESP => m_axi_buf_r_RRESP,
        BVALID => m_axi_buf_r_BVALID,
        BREADY => m_axi_buf_r_BREADY,
        BRESP => m_axi_buf_r_BRESP,
        BID => m_axi_buf_r_BID,
        BUSER => m_axi_buf_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => buf_r_ARVALID,
        I_ARREADY => buf_r_ARREADY,
        I_ARADDR => buf_r_ARADDR,
        I_ARID => buf_r_ARID,
        I_ARLEN => buf_r_ARLEN,
        I_ARSIZE => buf_r_ARSIZE,
        I_ARLOCK => buf_r_ARLOCK,
        I_ARCACHE => buf_r_ARCACHE,
        I_ARQOS => buf_r_ARQOS,
        I_ARPROT => buf_r_ARPROT,
        I_ARUSER => buf_r_ARUSER,
        I_ARBURST => buf_r_ARBURST,
        I_ARREGION => buf_r_ARREGION,
        I_RVALID => buf_r_RVALID,
        I_RREADY => buf_r_RREADY,
        I_RDATA => buf_r_RDATA,
        I_RID => buf_r_RID,
        I_RUSER => buf_r_RUSER,
        I_RRESP => buf_r_RRESP,
        I_RLAST => buf_r_RLAST,
        I_AWVALID => buf_r_AWVALID,
        I_AWREADY => buf_r_AWREADY,
        I_AWADDR => buf_r_AWADDR,
        I_AWID => buf_r_AWID,
        I_AWLEN => buf_r_AWLEN,
        I_AWSIZE => buf_r_AWSIZE,
        I_AWLOCK => buf_r_AWLOCK,
        I_AWCACHE => buf_r_AWCACHE,
        I_AWQOS => buf_r_AWQOS,
        I_AWPROT => buf_r_AWPROT,
        I_AWUSER => buf_r_AWUSER,
        I_AWBURST => buf_r_AWBURST,
        I_AWREGION => buf_r_AWREGION,
        I_WVALID => buf_r_WVALID,
        I_WREADY => buf_r_WREADY,
        I_WDATA => buf_r_WDATA,
        I_WID => buf_r_WID,
        I_WUSER => buf_r_WUSER,
        I_WLAST => buf_r_WLAST,
        I_WSTRB => buf_r_WSTRB,
        I_BVALID => buf_r_BVALID,
        I_BREADY => buf_r_BREADY,
        I_BRESP => buf_r_BRESP,
        I_BID => buf_r_BID,
        I_BUSER => buf_r_BUSER);

    grp_aes_expandEncKey_fu_236 : component a0_aes_expandEncKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_expandEncKey_fu_236_ap_start,
        ap_done => grp_aes_expandEncKey_fu_236_ap_done,
        ap_idle => grp_aes_expandEncKey_fu_236_ap_idle,
        ap_ready => grp_aes_expandEncKey_fu_236_ap_ready,
        m_axi_k_AWVALID => grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID,
        m_axi_k_AWREADY => grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY,
        m_axi_k_AWADDR => grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR,
        m_axi_k_AWID => grp_aes_expandEncKey_fu_236_m_axi_k_AWID,
        m_axi_k_AWLEN => grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN,
        m_axi_k_AWSIZE => grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE,
        m_axi_k_AWBURST => grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST,
        m_axi_k_AWLOCK => grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK,
        m_axi_k_AWCACHE => grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE,
        m_axi_k_AWPROT => grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT,
        m_axi_k_AWQOS => grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS,
        m_axi_k_AWREGION => grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION,
        m_axi_k_AWUSER => grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER,
        m_axi_k_WVALID => grp_aes_expandEncKey_fu_236_m_axi_k_WVALID,
        m_axi_k_WREADY => grp_aes_expandEncKey_fu_236_m_axi_k_WREADY,
        m_axi_k_WDATA => grp_aes_expandEncKey_fu_236_m_axi_k_WDATA,
        m_axi_k_WSTRB => grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB,
        m_axi_k_WLAST => grp_aes_expandEncKey_fu_236_m_axi_k_WLAST,
        m_axi_k_WID => grp_aes_expandEncKey_fu_236_m_axi_k_WID,
        m_axi_k_WUSER => grp_aes_expandEncKey_fu_236_m_axi_k_WUSER,
        m_axi_k_ARVALID => grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID,
        m_axi_k_ARREADY => grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY,
        m_axi_k_ARADDR => grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR,
        m_axi_k_ARID => grp_aes_expandEncKey_fu_236_m_axi_k_ARID,
        m_axi_k_ARLEN => grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN,
        m_axi_k_ARSIZE => grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE,
        m_axi_k_ARBURST => grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST,
        m_axi_k_ARLOCK => grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK,
        m_axi_k_ARCACHE => grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE,
        m_axi_k_ARPROT => grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT,
        m_axi_k_ARQOS => grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS,
        m_axi_k_ARREGION => grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION,
        m_axi_k_ARUSER => grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER,
        m_axi_k_RVALID => grp_aes_expandEncKey_fu_236_m_axi_k_RVALID,
        m_axi_k_RREADY => grp_aes_expandEncKey_fu_236_m_axi_k_RREADY,
        m_axi_k_RDATA => grp_aes_expandEncKey_fu_236_m_axi_k_RDATA,
        m_axi_k_RLAST => grp_aes_expandEncKey_fu_236_m_axi_k_RLAST,
        m_axi_k_RID => grp_aes_expandEncKey_fu_236_m_axi_k_RID,
        m_axi_k_RUSER => grp_aes_expandEncKey_fu_236_m_axi_k_RUSER,
        m_axi_k_RRESP => grp_aes_expandEncKey_fu_236_m_axi_k_RRESP,
        m_axi_k_BVALID => grp_aes_expandEncKey_fu_236_m_axi_k_BVALID,
        m_axi_k_BREADY => grp_aes_expandEncKey_fu_236_m_axi_k_BREADY,
        m_axi_k_BRESP => grp_aes_expandEncKey_fu_236_m_axi_k_BRESP,
        m_axi_k_BID => grp_aes_expandEncKey_fu_236_m_axi_k_BID,
        m_axi_k_BUSER => grp_aes_expandEncKey_fu_236_m_axi_k_BUSER,
        k_offset => grp_aes_expandEncKey_fu_236_k_offset,
        rc_read => grp_aes_expandEncKey_fu_236_rc_read,
        ap_return => grp_aes_expandEncKey_fu_236_ap_return);

    grp_aes_shiftRows_fu_248 : component a0_aes_shiftRows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_shiftRows_fu_248_ap_start,
        ap_done => grp_aes_shiftRows_fu_248_ap_done,
        ap_idle => grp_aes_shiftRows_fu_248_ap_idle,
        ap_ready => grp_aes_shiftRows_fu_248_ap_ready,
        m_axi_buf_r_AWVALID => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY => buf_r_AWREADY,
        m_axi_buf_r_AWADDR => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER => grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID => grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY => buf_r_WREADY,
        m_axi_buf_r_WDATA => grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB => grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST => grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST,
        m_axi_buf_r_WID => grp_aes_shiftRows_fu_248_m_axi_buf_r_WID,
        m_axi_buf_r_WUSER => grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY => buf_r_ARREADY,
        m_axi_buf_r_ARADDR => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER => grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID => buf_r_RVALID,
        m_axi_buf_r_RREADY => grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA => buf_r_RDATA,
        m_axi_buf_r_RLAST => buf_r_RLAST,
        m_axi_buf_r_RID => buf_r_RID,
        m_axi_buf_r_RUSER => buf_r_RUSER,
        m_axi_buf_r_RRESP => buf_r_RRESP,
        m_axi_buf_r_BVALID => buf_r_BVALID,
        m_axi_buf_r_BREADY => grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP => buf_r_BRESP,
        m_axi_buf_r_BID => buf_r_BID,
        m_axi_buf_r_BUSER => buf_r_BUSER,
        buf_offset => buf_offset);

    grp_aes_mixColumns_fu_255 : component a0_aes_mixColumns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_mixColumns_fu_255_ap_start,
        ap_done => grp_aes_mixColumns_fu_255_ap_done,
        ap_idle => grp_aes_mixColumns_fu_255_ap_idle,
        ap_ready => grp_aes_mixColumns_fu_255_ap_ready,
        m_axi_buf_r_AWVALID => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY => buf_r_AWREADY,
        m_axi_buf_r_AWADDR => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER => grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID => grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY => buf_r_WREADY,
        m_axi_buf_r_WDATA => grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB => grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST => grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST,
        m_axi_buf_r_WID => grp_aes_mixColumns_fu_255_m_axi_buf_r_WID,
        m_axi_buf_r_WUSER => grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY => buf_r_ARREADY,
        m_axi_buf_r_ARADDR => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER => grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID => buf_r_RVALID,
        m_axi_buf_r_RREADY => grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA => buf_r_RDATA,
        m_axi_buf_r_RLAST => buf_r_RLAST,
        m_axi_buf_r_RID => buf_r_RID,
        m_axi_buf_r_RUSER => buf_r_RUSER,
        m_axi_buf_r_RRESP => buf_r_RRESP,
        m_axi_buf_r_BVALID => buf_r_BVALID,
        m_axi_buf_r_BREADY => grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP => buf_r_BRESP,
        m_axi_buf_r_BID => buf_r_BID,
        m_axi_buf_r_BUSER => buf_r_BUSER,
        buf_offset => buf_offset);

    grp_aes_addRoundKey_cpy_fu_262 : component a0_aes_addRoundKey_cpy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_addRoundKey_cpy_fu_262_ap_start,
        ap_done => grp_aes_addRoundKey_cpy_fu_262_ap_done,
        ap_idle => grp_aes_addRoundKey_cpy_fu_262_ap_idle,
        ap_ready => grp_aes_addRoundKey_cpy_fu_262_ap_ready,
        m_axi_buf_r_AWVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY => buf_r_AWREADY,
        m_axi_buf_r_AWADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY => buf_r_WREADY,
        m_axi_buf_r_WDATA => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST,
        m_axi_buf_r_WID => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID,
        m_axi_buf_r_WUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY => buf_r_ARREADY,
        m_axi_buf_r_ARADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID => buf_r_RVALID,
        m_axi_buf_r_RREADY => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA => buf_r_RDATA,
        m_axi_buf_r_RLAST => buf_r_RLAST,
        m_axi_buf_r_RID => buf_r_RID,
        m_axi_buf_r_RUSER => buf_r_RUSER,
        m_axi_buf_r_RRESP => buf_r_RRESP,
        m_axi_buf_r_BVALID => buf_r_BVALID,
        m_axi_buf_r_BREADY => grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP => buf_r_BRESP,
        m_axi_buf_r_BID => buf_r_BID,
        m_axi_buf_r_BUSER => buf_r_BUSER,
        buf_offset => buf_offset,
        m_axi_key_AWVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWVALID,
        m_axi_key_AWREADY => ap_const_logic_0,
        m_axi_key_AWADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWADDR,
        m_axi_key_AWID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWID,
        m_axi_key_AWLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLEN,
        m_axi_key_AWSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWSIZE,
        m_axi_key_AWBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWBURST,
        m_axi_key_AWLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLOCK,
        m_axi_key_AWCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWCACHE,
        m_axi_key_AWPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWPROT,
        m_axi_key_AWQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWQOS,
        m_axi_key_AWREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWREGION,
        m_axi_key_AWUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWUSER,
        m_axi_key_WVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WVALID,
        m_axi_key_WREADY => ap_const_logic_0,
        m_axi_key_WDATA => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WDATA,
        m_axi_key_WSTRB => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WSTRB,
        m_axi_key_WLAST => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WLAST,
        m_axi_key_WID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WID,
        m_axi_key_WUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WUSER,
        m_axi_key_ARVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID,
        m_axi_key_ARREADY => ctx_enckey_ARREADY,
        m_axi_key_ARADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARADDR,
        m_axi_key_ARID => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARID,
        m_axi_key_ARLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLEN,
        m_axi_key_ARSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARSIZE,
        m_axi_key_ARBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARBURST,
        m_axi_key_ARLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLOCK,
        m_axi_key_ARCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARCACHE,
        m_axi_key_ARPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARPROT,
        m_axi_key_ARQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARQOS,
        m_axi_key_ARREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARREGION,
        m_axi_key_ARUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARUSER,
        m_axi_key_RVALID => ctx_enckey_RVALID,
        m_axi_key_RREADY => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY,
        m_axi_key_RDATA => ctx_enckey_RDATA,
        m_axi_key_RLAST => ctx_enckey_RLAST,
        m_axi_key_RID => ctx_enckey_RID,
        m_axi_key_RUSER => ctx_enckey_RUSER,
        m_axi_key_RRESP => ctx_enckey_RRESP,
        m_axi_key_BVALID => ap_const_logic_0,
        m_axi_key_BREADY => grp_aes_addRoundKey_cpy_fu_262_m_axi_key_BREADY,
        m_axi_key_BRESP => ap_const_lv2_0,
        m_axi_key_BID => ap_const_lv1_0,
        m_axi_key_BUSER => ap_const_lv1_0,
        key_offset => ctx_enckey_offset,
        m_axi_cpk_AWVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID,
        m_axi_cpk_AWREADY => ctx_key_AWREADY,
        m_axi_cpk_AWADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR,
        m_axi_cpk_AWID => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID,
        m_axi_cpk_AWLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN,
        m_axi_cpk_AWSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE,
        m_axi_cpk_AWBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST,
        m_axi_cpk_AWLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK,
        m_axi_cpk_AWCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE,
        m_axi_cpk_AWPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT,
        m_axi_cpk_AWQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS,
        m_axi_cpk_AWREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION,
        m_axi_cpk_AWUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER,
        m_axi_cpk_WVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID,
        m_axi_cpk_WREADY => ctx_key_WREADY,
        m_axi_cpk_WDATA => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA,
        m_axi_cpk_WSTRB => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB,
        m_axi_cpk_WLAST => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST,
        m_axi_cpk_WID => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID,
        m_axi_cpk_WUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER,
        m_axi_cpk_ARVALID => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARVALID,
        m_axi_cpk_ARREADY => ap_const_logic_0,
        m_axi_cpk_ARADDR => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARADDR,
        m_axi_cpk_ARID => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARID,
        m_axi_cpk_ARLEN => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLEN,
        m_axi_cpk_ARSIZE => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARSIZE,
        m_axi_cpk_ARBURST => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARBURST,
        m_axi_cpk_ARLOCK => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLOCK,
        m_axi_cpk_ARCACHE => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARCACHE,
        m_axi_cpk_ARPROT => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARPROT,
        m_axi_cpk_ARQOS => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARQOS,
        m_axi_cpk_ARREGION => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARREGION,
        m_axi_cpk_ARUSER => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARUSER,
        m_axi_cpk_RVALID => ap_const_logic_0,
        m_axi_cpk_RREADY => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_RREADY,
        m_axi_cpk_RDATA => ap_const_lv8_0,
        m_axi_cpk_RLAST => ap_const_logic_0,
        m_axi_cpk_RID => ap_const_lv1_0,
        m_axi_cpk_RUSER => ap_const_lv1_0,
        m_axi_cpk_RRESP => ap_const_lv2_0,
        m_axi_cpk_BVALID => ctx_key_BVALID,
        m_axi_cpk_BREADY => grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY,
        m_axi_cpk_BRESP => ctx_key_BRESP,
        m_axi_cpk_BID => ctx_key_BID,
        m_axi_cpk_BUSER => ctx_key_BUSER,
        cpk_offset => ctx_key_offset);

    grp_aes_addRoundKey_fu_275 : component a0_aes_addRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_addRoundKey_fu_275_ap_start,
        ap_done => grp_aes_addRoundKey_fu_275_ap_done,
        ap_idle => grp_aes_addRoundKey_fu_275_ap_idle,
        ap_ready => grp_aes_addRoundKey_fu_275_ap_ready,
        m_axi_buf_r_AWVALID => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY => buf_r_AWREADY,
        m_axi_buf_r_AWADDR => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER => grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID => grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY => buf_r_WREADY,
        m_axi_buf_r_WDATA => grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB => grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST => grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST,
        m_axi_buf_r_WID => grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID,
        m_axi_buf_r_WUSER => grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY => buf_r_ARREADY,
        m_axi_buf_r_ARADDR => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER => grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID => buf_r_RVALID,
        m_axi_buf_r_RREADY => grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA => buf_r_RDATA,
        m_axi_buf_r_RLAST => buf_r_RLAST,
        m_axi_buf_r_RID => buf_r_RID,
        m_axi_buf_r_RUSER => buf_r_RUSER,
        m_axi_buf_r_RRESP => buf_r_RRESP,
        m_axi_buf_r_BVALID => buf_r_BVALID,
        m_axi_buf_r_BREADY => grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP => buf_r_BRESP,
        m_axi_buf_r_BID => buf_r_BID,
        m_axi_buf_r_BUSER => buf_r_BUSER,
        buf_offset => buf_offset,
        m_axi_key_AWVALID => grp_aes_addRoundKey_fu_275_m_axi_key_AWVALID,
        m_axi_key_AWREADY => ap_const_logic_0,
        m_axi_key_AWADDR => grp_aes_addRoundKey_fu_275_m_axi_key_AWADDR,
        m_axi_key_AWID => grp_aes_addRoundKey_fu_275_m_axi_key_AWID,
        m_axi_key_AWLEN => grp_aes_addRoundKey_fu_275_m_axi_key_AWLEN,
        m_axi_key_AWSIZE => grp_aes_addRoundKey_fu_275_m_axi_key_AWSIZE,
        m_axi_key_AWBURST => grp_aes_addRoundKey_fu_275_m_axi_key_AWBURST,
        m_axi_key_AWLOCK => grp_aes_addRoundKey_fu_275_m_axi_key_AWLOCK,
        m_axi_key_AWCACHE => grp_aes_addRoundKey_fu_275_m_axi_key_AWCACHE,
        m_axi_key_AWPROT => grp_aes_addRoundKey_fu_275_m_axi_key_AWPROT,
        m_axi_key_AWQOS => grp_aes_addRoundKey_fu_275_m_axi_key_AWQOS,
        m_axi_key_AWREGION => grp_aes_addRoundKey_fu_275_m_axi_key_AWREGION,
        m_axi_key_AWUSER => grp_aes_addRoundKey_fu_275_m_axi_key_AWUSER,
        m_axi_key_WVALID => grp_aes_addRoundKey_fu_275_m_axi_key_WVALID,
        m_axi_key_WREADY => ap_const_logic_0,
        m_axi_key_WDATA => grp_aes_addRoundKey_fu_275_m_axi_key_WDATA,
        m_axi_key_WSTRB => grp_aes_addRoundKey_fu_275_m_axi_key_WSTRB,
        m_axi_key_WLAST => grp_aes_addRoundKey_fu_275_m_axi_key_WLAST,
        m_axi_key_WID => grp_aes_addRoundKey_fu_275_m_axi_key_WID,
        m_axi_key_WUSER => grp_aes_addRoundKey_fu_275_m_axi_key_WUSER,
        m_axi_key_ARVALID => grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID,
        m_axi_key_ARREADY => ctx_key_ARREADY,
        m_axi_key_ARADDR => grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR,
        m_axi_key_ARID => grp_aes_addRoundKey_fu_275_m_axi_key_ARID,
        m_axi_key_ARLEN => grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN,
        m_axi_key_ARSIZE => grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE,
        m_axi_key_ARBURST => grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST,
        m_axi_key_ARLOCK => grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK,
        m_axi_key_ARCACHE => grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE,
        m_axi_key_ARPROT => grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT,
        m_axi_key_ARQOS => grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS,
        m_axi_key_ARREGION => grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION,
        m_axi_key_ARUSER => grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER,
        m_axi_key_RVALID => ctx_key_RVALID,
        m_axi_key_RREADY => grp_aes_addRoundKey_fu_275_m_axi_key_RREADY,
        m_axi_key_RDATA => ctx_key_RDATA,
        m_axi_key_RLAST => ctx_key_RLAST,
        m_axi_key_RID => ctx_key_RID,
        m_axi_key_RUSER => ctx_key_RUSER,
        m_axi_key_RRESP => ctx_key_RRESP,
        m_axi_key_BVALID => ap_const_logic_0,
        m_axi_key_BREADY => grp_aes_addRoundKey_fu_275_m_axi_key_BREADY,
        m_axi_key_BRESP => ap_const_lv2_0,
        m_axi_key_BID => ap_const_lv1_0,
        m_axi_key_BUSER => ap_const_lv1_0,
        key_offset => ctx_key_offset,
        key_offset_offset => grp_aes_addRoundKey_fu_275_key_offset_offset);

    grp_aes_subBytes_fu_288 : component a0_aes_subBytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aes_subBytes_fu_288_ap_start,
        ap_done => grp_aes_subBytes_fu_288_ap_done,
        ap_idle => grp_aes_subBytes_fu_288_ap_idle,
        ap_ready => grp_aes_subBytes_fu_288_ap_ready,
        m_axi_buf_r_AWVALID => grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY => buf_r_AWREADY,
        m_axi_buf_r_AWADDR => grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID => grp_aes_subBytes_fu_288_m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN => grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE => grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST => grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK => grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE => grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT => grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS => grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION => grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER => grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID => grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY => buf_r_WREADY,
        m_axi_buf_r_WDATA => grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB => grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST => grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST,
        m_axi_buf_r_WID => grp_aes_subBytes_fu_288_m_axi_buf_r_WID,
        m_axi_buf_r_WUSER => grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID => grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY => buf_r_ARREADY,
        m_axi_buf_r_ARADDR => grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID => grp_aes_subBytes_fu_288_m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN => grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE => grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST => grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK => grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE => grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT => grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS => grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION => grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER => grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID => buf_r_RVALID,
        m_axi_buf_r_RREADY => grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA => buf_r_RDATA,
        m_axi_buf_r_RLAST => buf_r_RLAST,
        m_axi_buf_r_RID => buf_r_RID,
        m_axi_buf_r_RUSER => buf_r_RUSER,
        m_axi_buf_r_RRESP => buf_r_RRESP,
        m_axi_buf_r_BVALID => buf_r_BVALID,
        m_axi_buf_r_BREADY => grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP => buf_r_BRESP,
        m_axi_buf_r_BID => buf_r_BID,
        m_axi_buf_r_BUSER => buf_r_BUSER,
        buf_offset => buf_offset);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2))) then 
                    ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_addRoundKey_cpy_fu_262_ap_ready)) then 
                    ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_addRoundKey_fu_275_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_addRoundKey_fu_275_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    ap_reg_grp_aes_addRoundKey_fu_275_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_addRoundKey_fu_275_ap_ready)) then 
                    ap_reg_grp_aes_addRoundKey_fu_275_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_expandEncKey_fu_236_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_expandEncKey_fu_236_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_mixColumns_fu_255_ap_done = ap_const_logic_1) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)))) then 
                    ap_reg_grp_aes_expandEncKey_fu_236_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_expandEncKey_fu_236_ap_ready)) then 
                    ap_reg_grp_aes_expandEncKey_fu_236_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_mixColumns_fu_255_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_mixColumns_fu_255_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_reg_grp_aes_mixColumns_fu_255_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_mixColumns_fu_255_ap_ready)) then 
                    ap_reg_grp_aes_mixColumns_fu_255_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_shiftRows_fu_248_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_shiftRows_fu_248_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                    ap_reg_grp_aes_shiftRows_fu_248_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_shiftRows_fu_248_ap_ready)) then 
                    ap_reg_grp_aes_shiftRows_fu_248_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aes_subBytes_fu_288_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_aes_subBytes_fu_288_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)))) then 
                    ap_reg_grp_aes_subBytes_fu_288_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aes_subBytes_fu_288_ap_ready)) then 
                    ap_reg_grp_aes_subBytes_fu_288_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_ctx_deckey_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_ctx_deckey_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_logic_0 = ap_start) or (ap_const_boolean_1 = ap_block_state1_io)))) then 
                        ap_reg_ioackin_ctx_deckey_AWREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ctx_deckey_AWREADY))) then 
                        ap_reg_ioackin_ctx_deckey_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_ctx_deckey_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_ctx_deckey_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_block_state4_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_ctx_deckey_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ctx_deckey_WREADY)) then 
                        ap_reg_ioackin_ctx_deckey_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_ctx_enckey_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_ctx_enckey_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if (not(((ap_const_logic_0 = ap_start) or (ap_const_boolean_1 = ap_block_state1_io)))) then 
                        ap_reg_ioackin_ctx_enckey_AWREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ctx_enckey_AWREADY))) then 
                        ap_reg_ioackin_ctx_enckey_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_ctx_enckey_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_ctx_enckey_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    if ((ap_block_state4_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_ctx_enckey_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ctx_enckey_WREADY)) then 
                        ap_reg_ioackin_ctx_enckey_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = ctx_enckey_BVALID) or (ap_const_logic_0 = ctx_deckey_BVALID))))) then 
                i_1_reg_213 <= ap_const_lv3_7;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes_expandEncKey_fu_236_ap_done = ap_const_logic_1))) then 
                i_1_reg_213 <= phitmp_reg_435;
            end if; 
        end if;
    end process;

    i_2_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_on_subcall_done = ap_const_boolean_0))) then 
                i_2_reg_224 <= i_4_fu_369_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_aes_addRoundKey_cpy_fu_262_ap_done = ap_const_logic_1))) then 
                i_2_reg_224 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_block_state4_io = ap_const_boolean_0))) then 
                i_reg_190 <= i_3_reg_416;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_boolean_1 = ap_block_state1_io))))) then 
                i_reg_190 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    rcon_1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes_expandEncKey_fu_236_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                rcon_1_fu_118 <= grp_aes_expandEncKey_fu_236_ap_return;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2))) then 
                rcon_1_fu_118 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    rcon_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = ctx_enckey_BVALID) or (ap_const_logic_0 = ctx_deckey_BVALID))))) then 
                rcon_reg_201 <= ap_const_lv8_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes_expandEncKey_fu_236_ap_done = ap_const_logic_1))) then 
                rcon_reg_201 <= grp_aes_expandEncKey_fu_236_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_416 <= i_3_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_load_reg_426 <= k_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2))) then
                phitmp_reg_435 <= phitmp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_mixColumns_fu_255_ap_done = ap_const_logic_1) and (tmp_1_fu_360_p1 = ap_const_lv1_0)))) then
                reg_301 <= rcon_1_fu_118;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_mixColumns_fu_255_ap_done = ap_const_logic_1))) then
                tmp_1_reg_455 <= tmp_1_fu_360_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state8, ap_CS_fsm_state4, ctx_enckey_BVALID, ctx_deckey_BVALID, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, grp_aes_mixColumns_fu_255_ap_done, tmp_1_fu_360_p1, ap_block_state1_io, ap_CS_fsm_state2, tmp_fu_320_p2, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_ap_done, ap_CS_fsm_state20, grp_aes_addRoundKey_fu_275_ap_done, ap_block_state20_on_subcall_done, grp_aes_shiftRows_fu_248_ap_done, grp_aes_addRoundKey_cpy_fu_262_ap_done, grp_aes_subBytes_fu_288_ap_done, ap_block_state4_io, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13, ap_block_state23_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_boolean_1 = ap_block_state1_io))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_block_state4_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = ctx_enckey_BVALID) or (ap_const_logic_0 = ctx_deckey_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_aes_expandEncKey_fu_236_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_aes_addRoundKey_cpy_fu_262_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_aes_subBytes_fu_288_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_aes_shiftRows_fu_248_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_mixColumns_fu_255_ap_done = ap_const_logic_1) and (ap_const_lv1_1 = tmp_1_fu_360_p1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_aes_mixColumns_fu_255_ap_done = ap_const_logic_1) and (tmp_1_fu_360_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((grp_aes_expandEncKey_fu_236_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_block_state20_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_aes_addRoundKey_fu_275_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_block_state23_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_aes_shiftRows_fu_248_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_aes_addRoundKey_fu_275_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_io_assign_proc : process(ap_sig_ioackin_ctx_deckey_AWREADY, ap_sig_ioackin_ctx_enckey_AWREADY)
    begin
                ap_block_state1_io <= ((ap_const_logic_0 = ap_sig_ioackin_ctx_deckey_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_ctx_enckey_AWREADY));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(tmp_1_reg_455, grp_aes_addRoundKey_fu_275_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((ap_const_logic_0 = grp_aes_addRoundKey_fu_275_ap_done) and (ap_const_lv1_0 = tmp_1_reg_455));
    end process;


    ap_block_state23_on_subcall_done_assign_proc : process(grp_aes_expandEncKey_fu_236_ap_done, grp_aes_subBytes_fu_288_ap_done)
    begin
                ap_block_state23_on_subcall_done <= ((ap_const_logic_0 = grp_aes_expandEncKey_fu_236_ap_done) or (ap_const_logic_0 = grp_aes_subBytes_fu_288_ap_done));
    end process;


    ap_block_state4_io_assign_proc : process(ap_sig_ioackin_ctx_deckey_WREADY, ap_sig_ioackin_ctx_enckey_WREADY)
    begin
                ap_block_state4_io <= ((ap_const_logic_0 = ap_sig_ioackin_ctx_deckey_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_ctx_enckey_WREADY));
    end process;


    ap_block_state8_assign_proc : process(ctx_enckey_BVALID, ctx_deckey_BVALID)
    begin
                ap_block_state8 <= ((ap_const_logic_0 = ctx_enckey_BVALID) or (ap_const_logic_0 = ctx_deckey_BVALID));
    end process;


    ap_done_assign_proc : process(grp_aes_addRoundKey_fu_275_ap_done, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_aes_addRoundKey_fu_275_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_aes_addRoundKey_fu_275_ap_done, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_aes_addRoundKey_fu_275_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_ctx_deckey_AWREADY_assign_proc : process(ctx_deckey_AWREADY, ap_reg_ioackin_ctx_deckey_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_AWREADY)) then 
            ap_sig_ioackin_ctx_deckey_AWREADY <= ctx_deckey_AWREADY;
        else 
            ap_sig_ioackin_ctx_deckey_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_ctx_deckey_WREADY_assign_proc : process(ctx_deckey_WREADY, ap_reg_ioackin_ctx_deckey_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_WREADY)) then 
            ap_sig_ioackin_ctx_deckey_WREADY <= ctx_deckey_WREADY;
        else 
            ap_sig_ioackin_ctx_deckey_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_ctx_enckey_AWREADY_assign_proc : process(ctx_enckey_AWREADY, ap_reg_ioackin_ctx_enckey_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ctx_enckey_AWREADY)) then 
            ap_sig_ioackin_ctx_enckey_AWREADY <= ctx_enckey_AWREADY;
        else 
            ap_sig_ioackin_ctx_enckey_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_ctx_enckey_WREADY_assign_proc : process(ctx_enckey_WREADY, ap_reg_ioackin_ctx_enckey_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ctx_enckey_WREADY)) then 
            ap_sig_ioackin_ctx_enckey_WREADY <= ctx_enckey_WREADY;
        else 
            ap_sig_ioackin_ctx_enckey_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_ARADDR_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR, grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARADDR <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARADDR <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARADDR <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARADDR <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARADDR <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR;
        else 
            buf_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_r_ARBURST_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST, grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARBURST <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARBURST <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARBURST <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARBURST <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARBURST <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST;
        else 
            buf_r_ARBURST <= "XX";
        end if; 
    end process;


    buf_r_ARCACHE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE, grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARCACHE <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARCACHE <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARCACHE <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARCACHE <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARCACHE <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE;
        else 
            buf_r_ARCACHE <= "XXXX";
        end if; 
    end process;


    buf_r_ARID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID, grp_aes_subBytes_fu_288_m_axi_buf_r_ARID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARID <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARID <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARID <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARID <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID;
        else 
            buf_r_ARID <= "X";
        end if; 
    end process;


    buf_r_ARLEN_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN, grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARLEN <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARLEN <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARLEN <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARLEN <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARLEN <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN;
        else 
            buf_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_r_ARLOCK_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK, grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARLOCK <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARLOCK <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARLOCK <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARLOCK <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARLOCK <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK;
        else 
            buf_r_ARLOCK <= "XX";
        end if; 
    end process;


    buf_r_ARPROT_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT, grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARPROT <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARPROT <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARPROT <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARPROT <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARPROT <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT;
        else 
            buf_r_ARPROT <= "XXX";
        end if; 
    end process;


    buf_r_ARQOS_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS, grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARQOS <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARQOS <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARQOS <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARQOS <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARQOS <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS;
        else 
            buf_r_ARQOS <= "XXXX";
        end if; 
    end process;


    buf_r_ARREGION_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION, grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARREGION <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARREGION <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARREGION <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARREGION <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARREGION <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION;
        else 
            buf_r_ARREGION <= "XXXX";
        end if; 
    end process;


    buf_r_ARSIZE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE, grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARSIZE <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARSIZE <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARSIZE <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARSIZE <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARSIZE <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE;
        else 
            buf_r_ARSIZE <= "XXX";
        end if; 
    end process;


    buf_r_ARUSER_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER, grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARUSER <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARUSER <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARUSER <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARUSER <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARUSER <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER;
        else 
            buf_r_ARUSER <= "X";
        end if; 
    end process;


    buf_r_ARVALID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID, grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID, grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID, grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_ARVALID <= grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_ARVALID <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_ARVALID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_ARVALID <= grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_ARVALID <= grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID;
        else 
            buf_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_AWADDR_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR, grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWADDR <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWADDR <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWADDR <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWADDR <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWADDR <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR;
        else 
            buf_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_r_AWBURST_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST, grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWBURST <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWBURST <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWBURST <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWBURST <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWBURST <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST;
        else 
            buf_r_AWBURST <= "XX";
        end if; 
    end process;


    buf_r_AWCACHE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE, grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWCACHE <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWCACHE <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWCACHE <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWCACHE <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWCACHE <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE;
        else 
            buf_r_AWCACHE <= "XXXX";
        end if; 
    end process;


    buf_r_AWID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID, grp_aes_subBytes_fu_288_m_axi_buf_r_AWID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWID <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWID <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWID <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWID <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID;
        else 
            buf_r_AWID <= "X";
        end if; 
    end process;


    buf_r_AWLEN_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN, grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWLEN <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWLEN <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWLEN <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWLEN <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWLEN <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN;
        else 
            buf_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_r_AWLOCK_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK, grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWLOCK <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWLOCK <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWLOCK <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWLOCK <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWLOCK <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK;
        else 
            buf_r_AWLOCK <= "XX";
        end if; 
    end process;


    buf_r_AWPROT_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT, grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWPROT <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWPROT <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWPROT <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWPROT <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWPROT <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT;
        else 
            buf_r_AWPROT <= "XXX";
        end if; 
    end process;


    buf_r_AWQOS_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS, grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWQOS <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWQOS <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWQOS <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWQOS <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWQOS <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS;
        else 
            buf_r_AWQOS <= "XXXX";
        end if; 
    end process;


    buf_r_AWREGION_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION, grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWREGION <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWREGION <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWREGION <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWREGION <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWREGION <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION;
        else 
            buf_r_AWREGION <= "XXXX";
        end if; 
    end process;


    buf_r_AWSIZE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE, grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWSIZE <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWSIZE <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWSIZE <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWSIZE <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWSIZE <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE;
        else 
            buf_r_AWSIZE <= "XXX";
        end if; 
    end process;


    buf_r_AWUSER_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER, grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWUSER <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWUSER <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWUSER <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWUSER <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWUSER <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER;
        else 
            buf_r_AWUSER <= "X";
        end if; 
    end process;


    buf_r_AWVALID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID, grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID, grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID, grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_AWVALID <= grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_AWVALID <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_AWVALID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_AWVALID <= grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_AWVALID <= grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID;
        else 
            buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_BREADY_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY, grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY, grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY, grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_BREADY <= grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_BREADY <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_BREADY <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_BREADY <= grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_BREADY <= grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY;
        else 
            buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_RREADY_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY, grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY, grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY, grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_RREADY <= grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_RREADY <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_RREADY <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_RREADY <= grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_RREADY <= grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY;
        else 
            buf_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_WDATA_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA, grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA, grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA, grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_WDATA <= grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_WDATA <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_WDATA <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_WDATA <= grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_WDATA <= grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA;
        else 
            buf_r_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    buf_r_WID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_WID, grp_aes_mixColumns_fu_255_m_axi_buf_r_WID, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID, grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID, grp_aes_subBytes_fu_288_m_axi_buf_r_WID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_WID <= grp_aes_subBytes_fu_288_m_axi_buf_r_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_WID <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_WID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_WID <= grp_aes_mixColumns_fu_255_m_axi_buf_r_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_WID <= grp_aes_shiftRows_fu_248_m_axi_buf_r_WID;
        else 
            buf_r_WID <= "X";
        end if; 
    end process;


    buf_r_WLAST_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST, grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST, grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST, grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_WLAST <= grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_WLAST <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_WLAST <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_WLAST <= grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_WLAST <= grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST;
        else 
            buf_r_WLAST <= 'X';
        end if; 
    end process;


    buf_r_WSTRB_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB, grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB, grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB, grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_WSTRB <= grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_WSTRB <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_WSTRB <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_WSTRB <= grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_WSTRB <= grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB;
        else 
            buf_r_WSTRB <= "X";
        end if; 
    end process;


    buf_r_WUSER_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER, grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER, grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER, grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_WUSER <= grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_WUSER <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_WUSER <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_WUSER <= grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_WUSER <= grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER;
        else 
            buf_r_WUSER <= "X";
        end if; 
    end process;


    buf_r_WVALID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, ap_CS_fsm_state9, tmp_7_fu_337_p2, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID, grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID, grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID, grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID, grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state14, ap_CS_fsm_state24, ap_CS_fsm_state15, ap_CS_fsm_state25, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            buf_r_WVALID <= grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            buf_r_WVALID <= grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            buf_r_WVALID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            buf_r_WVALID <= grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            buf_r_WVALID <= grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID;
        else 
            buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_ARVALID_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_ARVALID <= grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID;
        else 
            ctx_deckey_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_AWADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, ctx_deckey_offset, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR, ap_reg_ioackin_ctx_deckey_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_AWREADY))) then 
            ctx_deckey_AWADDR <= ctx_deckey_offset;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWADDR <= grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR;
        else 
            ctx_deckey_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_deckey_AWBURST_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWBURST <= grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST;
        else 
            ctx_deckey_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    ctx_deckey_AWCACHE_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWCACHE <= grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE;
        else 
            ctx_deckey_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    ctx_deckey_AWID_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWID <= grp_aes_expandEncKey_fu_236_m_axi_k_AWID;
        else 
            ctx_deckey_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    ctx_deckey_AWLEN_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN, ap_reg_ioackin_ctx_deckey_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_AWREADY))) then 
            ctx_deckey_AWLEN <= ap_const_lv32_20;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWLEN <= grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN;
        else 
            ctx_deckey_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_deckey_AWLOCK_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWLOCK <= grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK;
        else 
            ctx_deckey_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    ctx_deckey_AWPROT_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWPROT <= grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT;
        else 
            ctx_deckey_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    ctx_deckey_AWQOS_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWQOS <= grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS;
        else 
            ctx_deckey_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    ctx_deckey_AWREGION_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWREGION <= grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION;
        else 
            ctx_deckey_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    ctx_deckey_AWSIZE_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWSIZE <= grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE;
        else 
            ctx_deckey_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    ctx_deckey_AWUSER_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWUSER <= grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER;
        else 
            ctx_deckey_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    ctx_deckey_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID, ap_reg_ioackin_ctx_deckey_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_AWREADY))) then 
            ctx_deckey_AWVALID <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_AWVALID <= grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID;
        else 
            ctx_deckey_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_BREADY_assign_proc : process(ap_CS_fsm_state8, ctx_enckey_BVALID, ctx_deckey_BVALID, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_BREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = ctx_enckey_BVALID) or (ap_const_logic_0 = ctx_deckey_BVALID))))) then 
            ctx_deckey_BREADY <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_BREADY <= grp_aes_expandEncKey_fu_236_m_axi_k_BREADY;
        else 
            ctx_deckey_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_RREADY_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_RREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_RREADY <= grp_aes_expandEncKey_fu_236_m_axi_k_RREADY;
        else 
            ctx_deckey_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_WDATA_assign_proc : process(ap_CS_fsm_state4, k_load_reg_426, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_WDATA, ap_reg_ioackin_ctx_deckey_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_WREADY))) then 
            ctx_deckey_WDATA <= k_load_reg_426;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_WDATA <= grp_aes_expandEncKey_fu_236_m_axi_k_WDATA;
        else 
            ctx_deckey_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    ctx_deckey_WID_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_WID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_WID <= grp_aes_expandEncKey_fu_236_m_axi_k_WID;
        else 
            ctx_deckey_WID <= ap_const_lv1_0;
        end if; 
    end process;


    ctx_deckey_WLAST_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_WLAST)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_WLAST <= grp_aes_expandEncKey_fu_236_m_axi_k_WLAST;
        else 
            ctx_deckey_WLAST <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_WSTRB_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB, ap_reg_ioackin_ctx_deckey_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_WREADY))) then 
            ctx_deckey_WSTRB <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_WSTRB <= grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB;
        else 
            ctx_deckey_WSTRB <= "X";
        end if; 
    end process;


    ctx_deckey_WUSER_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_WUSER)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_WUSER <= grp_aes_expandEncKey_fu_236_m_axi_k_WUSER;
        else 
            ctx_deckey_WUSER <= ap_const_lv1_0;
        end if; 
    end process;


    ctx_deckey_WVALID_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, grp_aes_expandEncKey_fu_236_m_axi_k_WVALID, ap_reg_ioackin_ctx_deckey_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_ctx_deckey_WREADY))) then 
            ctx_deckey_WVALID <= ap_const_logic_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ctx_deckey_WVALID <= grp_aes_expandEncKey_fu_236_m_axi_k_WVALID;
        else 
            ctx_deckey_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_deckey_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_ctx_deckey_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ctx_deckey_blk_n_AW <= m_axi_ctx_deckey_AWREADY;
        else 
            ctx_deckey_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    ctx_deckey_blk_n_B_assign_proc : process(m_axi_ctx_deckey_BVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_deckey_blk_n_B <= m_axi_ctx_deckey_BVALID;
        else 
            ctx_deckey_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    ctx_deckey_blk_n_W_assign_proc : process(m_axi_ctx_deckey_WREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_deckey_blk_n_W <= m_axi_ctx_deckey_WREADY;
        else 
            ctx_deckey_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    ctx_enckey_ARVALID_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_enckey_ARVALID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID;
        else 
            ctx_enckey_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_reg_ioackin_ctx_enckey_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_ctx_enckey_AWREADY))) then 
            ctx_enckey_AWVALID <= ap_const_logic_1;
        else 
            ctx_enckey_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_BREADY_assign_proc : process(ap_CS_fsm_state8, ctx_enckey_BVALID, ctx_deckey_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and not(((ap_const_logic_0 = ctx_enckey_BVALID) or (ap_const_logic_0 = ctx_deckey_BVALID))))) then 
            ctx_enckey_BREADY <= ap_const_logic_1;
        else 
            ctx_enckey_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_RREADY_assign_proc : process(ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_enckey_RREADY <= grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY;
        else 
            ctx_enckey_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_WVALID_assign_proc : process(ap_CS_fsm_state4, ap_reg_ioackin_ctx_enckey_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_logic_0 = ap_reg_ioackin_ctx_enckey_WREADY))) then 
            ctx_enckey_WVALID <= ap_const_logic_1;
        else 
            ctx_enckey_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_enckey_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_ctx_enckey_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ctx_enckey_blk_n_AW <= m_axi_ctx_enckey_AWREADY;
        else 
            ctx_enckey_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    ctx_enckey_blk_n_B_assign_proc : process(m_axi_ctx_enckey_BVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_enckey_blk_n_B <= m_axi_ctx_enckey_BVALID;
        else 
            ctx_enckey_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    ctx_enckey_blk_n_W_assign_proc : process(m_axi_ctx_enckey_WREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctx_enckey_blk_n_W <= m_axi_ctx_enckey_WREADY;
        else 
            ctx_enckey_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    ctx_key_ARADDR_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR, grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARADDR <= grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARADDR <= grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR;
        else 
            ctx_key_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_key_ARBURST_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST, grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARBURST <= grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARBURST <= grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST;
        else 
            ctx_key_ARBURST <= "XX";
        end if; 
    end process;


    ctx_key_ARCACHE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE, grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARCACHE <= grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARCACHE <= grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE;
        else 
            ctx_key_ARCACHE <= "XXXX";
        end if; 
    end process;


    ctx_key_ARID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARID, grp_aes_addRoundKey_fu_275_m_axi_key_ARID, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARID <= grp_aes_addRoundKey_fu_275_m_axi_key_ARID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARID <= grp_aes_expandEncKey_fu_236_m_axi_k_ARID;
        else 
            ctx_key_ARID <= "X";
        end if; 
    end process;


    ctx_key_ARLEN_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN, grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARLEN <= grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARLEN <= grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN;
        else 
            ctx_key_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_key_ARLOCK_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK, grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARLOCK <= grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARLOCK <= grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK;
        else 
            ctx_key_ARLOCK <= "XX";
        end if; 
    end process;


    ctx_key_ARPROT_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT, grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARPROT <= grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARPROT <= grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT;
        else 
            ctx_key_ARPROT <= "XXX";
        end if; 
    end process;


    ctx_key_ARQOS_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS, grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARQOS <= grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARQOS <= grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS;
        else 
            ctx_key_ARQOS <= "XXXX";
        end if; 
    end process;


    ctx_key_ARREGION_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION, grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARREGION <= grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARREGION <= grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION;
        else 
            ctx_key_ARREGION <= "XXXX";
        end if; 
    end process;


    ctx_key_ARSIZE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE, grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARSIZE <= grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARSIZE <= grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE;
        else 
            ctx_key_ARSIZE <= "XXX";
        end if; 
    end process;


    ctx_key_ARUSER_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER, grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARUSER <= grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARUSER <= grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER;
        else 
            ctx_key_ARUSER <= "X";
        end if; 
    end process;


    ctx_key_ARVALID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID, grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_ARVALID <= grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_ARVALID <= grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID;
        else 
            ctx_key_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_AWADDR_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWADDR <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWADDR <= grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR;
        else 
            ctx_key_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_key_AWBURST_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWBURST <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWBURST <= grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST;
        else 
            ctx_key_AWBURST <= "XX";
        end if; 
    end process;


    ctx_key_AWCACHE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWCACHE <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWCACHE <= grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE;
        else 
            ctx_key_AWCACHE <= "XXXX";
        end if; 
    end process;


    ctx_key_AWID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWID, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWID <= grp_aes_expandEncKey_fu_236_m_axi_k_AWID;
        else 
            ctx_key_AWID <= "X";
        end if; 
    end process;


    ctx_key_AWLEN_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWLEN <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWLEN <= grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN;
        else 
            ctx_key_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_key_AWLOCK_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWLOCK <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWLOCK <= grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK;
        else 
            ctx_key_AWLOCK <= "XX";
        end if; 
    end process;


    ctx_key_AWPROT_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWPROT <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWPROT <= grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT;
        else 
            ctx_key_AWPROT <= "XXX";
        end if; 
    end process;


    ctx_key_AWQOS_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWQOS <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWQOS <= grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS;
        else 
            ctx_key_AWQOS <= "XXXX";
        end if; 
    end process;


    ctx_key_AWREGION_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWREGION <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWREGION <= grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION;
        else 
            ctx_key_AWREGION <= "XXXX";
        end if; 
    end process;


    ctx_key_AWSIZE_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWSIZE <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWSIZE <= grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE;
        else 
            ctx_key_AWSIZE <= "XXX";
        end if; 
    end process;


    ctx_key_AWUSER_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWUSER <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWUSER <= grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER;
        else 
            ctx_key_AWUSER <= "X";
        end if; 
    end process;


    ctx_key_AWVALID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_AWVALID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_AWVALID <= grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID;
        else 
            ctx_key_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_BREADY_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_BREADY, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_BREADY <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_BREADY <= grp_aes_expandEncKey_fu_236_m_axi_k_BREADY;
        else 
            ctx_key_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_RREADY_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, tmp_1_reg_455, ap_CS_fsm_state20, grp_aes_expandEncKey_fu_236_m_axi_k_RREADY, grp_aes_addRoundKey_fu_275_m_axi_key_RREADY, ap_CS_fsm_state23, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ctx_key_RREADY <= grp_aes_addRoundKey_fu_275_m_axi_key_RREADY;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_RREADY <= grp_aes_expandEncKey_fu_236_m_axi_k_RREADY;
        else 
            ctx_key_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    ctx_key_WDATA_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_WDATA, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_WDATA <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_WDATA <= grp_aes_expandEncKey_fu_236_m_axi_k_WDATA;
        else 
            ctx_key_WDATA <= "XXXXXXXX";
        end if; 
    end process;


    ctx_key_WID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_WID, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_WID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_WID <= grp_aes_expandEncKey_fu_236_m_axi_k_WID;
        else 
            ctx_key_WID <= "X";
        end if; 
    end process;


    ctx_key_WLAST_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_WLAST, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_WLAST <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_WLAST <= grp_aes_expandEncKey_fu_236_m_axi_k_WLAST;
        else 
            ctx_key_WLAST <= 'X';
        end if; 
    end process;


    ctx_key_WSTRB_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_WSTRB <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_WSTRB <= grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB;
        else 
            ctx_key_WSTRB <= "X";
        end if; 
    end process;


    ctx_key_WUSER_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_WUSER, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_WUSER <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_WUSER <= grp_aes_expandEncKey_fu_236_m_axi_k_WUSER;
        else 
            ctx_key_WUSER <= "X";
        end if; 
    end process;


    ctx_key_WVALID_assign_proc : process(ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, grp_aes_expandEncKey_fu_236_m_axi_k_WVALID, grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_337_p2)))) then 
            ctx_key_WVALID <= grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ctx_key_WVALID <= grp_aes_expandEncKey_fu_236_m_axi_k_WVALID;
        else 
            ctx_key_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_354_p2 <= "1" when (i_2_reg_224 = ap_const_lv4_E) else "0";
    grp_aes_addRoundKey_cpy_fu_262_ap_start <= ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start;
    grp_aes_addRoundKey_fu_275_ap_start <= ap_reg_grp_aes_addRoundKey_fu_275_ap_start;

    grp_aes_addRoundKey_fu_275_key_offset_offset_assign_proc : process(tmp_1_reg_455, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_aes_addRoundKey_fu_275_key_offset_offset <= ap_const_lv6_10;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_1_reg_455)) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            grp_aes_addRoundKey_fu_275_key_offset_offset <= ap_const_lv6_0;
        else 
            grp_aes_addRoundKey_fu_275_key_offset_offset <= "XXXXXX";
        end if; 
    end process;

    grp_aes_expandEncKey_fu_236_ap_start <= ap_reg_grp_aes_expandEncKey_fu_236_ap_start;

    grp_aes_expandEncKey_fu_236_k_offset_assign_proc : process(ctx_key_offset, ctx_deckey_offset, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_k_offset <= ctx_key_offset;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_aes_expandEncKey_fu_236_k_offset <= ctx_deckey_offset;
        else 
            grp_aes_expandEncKey_fu_236_k_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY_assign_proc : process(ctx_key_ARREADY, ctx_deckey_ARREADY, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY <= ctx_key_ARREADY;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY <= ctx_deckey_ARREADY;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY <= 'X';
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY_assign_proc : process(ctx_key_AWREADY, ctx_deckey_AWREADY, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY <= ctx_key_AWREADY;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY <= ctx_deckey_AWREADY;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY <= 'X';
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_BID_assign_proc : process(ctx_key_BID, ctx_deckey_BID, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BID <= ctx_key_BID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BID <= ctx_deckey_BID;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_BID <= "X";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_BRESP_assign_proc : process(ctx_key_BRESP, ctx_deckey_BRESP, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BRESP <= ctx_key_BRESP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BRESP <= ctx_deckey_BRESP;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_BRESP <= "XX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_BUSER_assign_proc : process(ctx_key_BUSER, ctx_deckey_BUSER, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BUSER <= ctx_key_BUSER;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BUSER <= ctx_deckey_BUSER;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_BUSER <= "X";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_BVALID_assign_proc : process(ctx_key_BVALID, ctx_deckey_BVALID, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BVALID <= ctx_key_BVALID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_BVALID <= ctx_deckey_BVALID;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_BVALID <= 'X';
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_RDATA_assign_proc : process(ctx_key_RDATA, ctx_deckey_RDATA, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RDATA <= ctx_key_RDATA;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RDATA <= ctx_deckey_RDATA;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_RDATA <= "XXXXXXXX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_RID_assign_proc : process(ctx_key_RID, ctx_deckey_RID, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RID <= ctx_key_RID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RID <= ctx_deckey_RID;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_RID <= "X";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_RLAST_assign_proc : process(ctx_key_RLAST, ctx_deckey_RLAST, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RLAST <= ctx_key_RLAST;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RLAST <= ctx_deckey_RLAST;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_RLAST <= 'X';
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_RRESP_assign_proc : process(ctx_key_RRESP, ctx_deckey_RRESP, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RRESP <= ctx_key_RRESP;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RRESP <= ctx_deckey_RRESP;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_RRESP <= "XX";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_RUSER_assign_proc : process(ctx_key_RUSER, ctx_deckey_RUSER, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RUSER <= ctx_key_RUSER;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RUSER <= ctx_deckey_RUSER;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_RUSER <= "X";
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_RVALID_assign_proc : process(ctx_key_RVALID, ctx_deckey_RVALID, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RVALID <= ctx_key_RVALID;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_RVALID <= ctx_deckey_RVALID;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_RVALID <= 'X';
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_m_axi_k_WREADY_assign_proc : process(ctx_key_WREADY, ctx_deckey_WREADY, ap_CS_fsm_state12, exitcond_fu_354_p2, ap_CS_fsm_state17, tmp_1_fu_360_p1, ap_CS_fsm_state9, tmp_7_fu_337_p2, ap_CS_fsm_state10, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_fu_354_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_1_fu_360_p1 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_WREADY <= ctx_key_WREADY;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_337_p2)) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_aes_expandEncKey_fu_236_m_axi_k_WREADY <= ctx_deckey_WREADY;
        else 
            grp_aes_expandEncKey_fu_236_m_axi_k_WREADY <= 'X';
        end if; 
    end process;


    grp_aes_expandEncKey_fu_236_rc_read_assign_proc : process(reg_301, ap_CS_fsm_state10, rcon_reg_201, ap_CS_fsm_state23, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_aes_expandEncKey_fu_236_rc_read <= reg_301;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_aes_expandEncKey_fu_236_rc_read <= rcon_reg_201;
        else 
            grp_aes_expandEncKey_fu_236_rc_read <= "XXXXXXXX";
        end if; 
    end process;

    grp_aes_mixColumns_fu_255_ap_start <= ap_reg_grp_aes_mixColumns_fu_255_ap_start;
    grp_aes_shiftRows_fu_248_ap_start <= ap_reg_grp_aes_shiftRows_fu_248_ap_start;
    grp_aes_subBytes_fu_288_ap_start <= ap_reg_grp_aes_subBytes_fu_288_ap_start;
    i_3_fu_326_p2 <= std_logic_vector(unsigned(i_reg_190) + unsigned(ap_const_lv6_1));
    i_4_fu_369_p2 <= std_logic_vector(unsigned(i_2_reg_224) + unsigned(ap_const_lv4_1));
    k_Addr_A <= std_logic_vector(shift_left(unsigned(tmp_5_fu_332_p1),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    k_Clk_A <= ap_clk;
    k_Din_A <= ap_const_lv8_0;

    k_EN_A_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            k_EN_A <= ap_const_logic_1;
        else 
            k_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    k_Rst_A_assign_proc : process(ap_rst_n)
    begin
                k_Rst_A <= not(ap_rst_n);
    end process;

    k_WEN_A <= ap_const_lv1_0;
    phitmp_fu_343_p2 <= std_logic_vector(unsigned(i_1_reg_213) + unsigned(ap_const_lv3_7));
    tmp_1_fu_360_p1 <= i_2_reg_224(1 - 1 downto 0);
    tmp_5_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_190),32));
    tmp_7_fu_337_p2 <= "1" when (i_1_reg_213 = ap_const_lv3_0) else "0";
    tmp_fu_320_p2 <= "1" when (i_reg_190 = ap_const_lv6_20) else "0";
end behav;
