-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aes_addRoundKey_cpy is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    buf_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWVALID : OUT STD_LOGIC;
    m_axi_key_AWREADY : IN STD_LOGIC;
    m_axi_key_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WVALID : OUT STD_LOGIC;
    m_axi_key_WREADY : IN STD_LOGIC;
    m_axi_key_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_key_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WLAST : OUT STD_LOGIC;
    m_axi_key_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_ARVALID : OUT STD_LOGIC;
    m_axi_key_ARREADY : IN STD_LOGIC;
    m_axi_key_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RVALID : IN STD_LOGIC;
    m_axi_key_RREADY : OUT STD_LOGIC;
    m_axi_key_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_key_RLAST : IN STD_LOGIC;
    m_axi_key_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_BVALID : IN STD_LOGIC;
    m_axi_key_BREADY : OUT STD_LOGIC;
    m_axi_key_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    key_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_AWVALID : OUT STD_LOGIC;
    m_axi_cpk_AWREADY : IN STD_LOGIC;
    m_axi_cpk_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_WVALID : OUT STD_LOGIC;
    m_axi_cpk_WREADY : IN STD_LOGIC;
    m_axi_cpk_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_cpk_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_WLAST : OUT STD_LOGIC;
    m_axi_cpk_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_ARVALID : OUT STD_LOGIC;
    m_axi_cpk_ARREADY : IN STD_LOGIC;
    m_axi_cpk_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_cpk_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_cpk_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_cpk_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_RVALID : IN STD_LOGIC;
    m_axi_cpk_RREADY : OUT STD_LOGIC;
    m_axi_cpk_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_cpk_RLAST : IN STD_LOGIC;
    m_axi_cpk_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_BVALID : IN STD_LOGIC;
    m_axi_cpk_BREADY : OUT STD_LOGIC;
    m_axi_cpk_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_cpk_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_cpk_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    cpk_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_aes_addRoundKey_cpy is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal key_blk_n_AR : STD_LOGIC;
    signal key_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal cpk_blk_n_AW : STD_LOGIC;
    signal cpk_blk_n_W : STD_LOGIC;
    signal cpk_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_10_fu_169_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_10_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal key_addr_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cpk_addr_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_addr_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_1_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal cpk_addr_1_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_addr_read_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal buf_addr_read_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_325 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_cpk_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC;
    signal ap_block_state11_io : BOOLEAN;
    signal key_addr_1_read_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_158 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum2_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum6_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum7_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_key_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_key_ARREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC := '0';
    signal ap_block_state17 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_cpk_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_cpk_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_cpk_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_buf_r_WREADY : STD_LOGIC;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_WREADY : STD_LOGIC := '0';
    signal i_10_cast_fu_175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum5_fu_222_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum5_cast_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_block_state3_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_buf_r_ARREADY)) then 
                        ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    if ((ap_block_state11_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_buf_r_AWREADY)) then 
                        ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    if ((ap_block_state12_io = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_buf_r_WREADY)) then 
                        ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_cpk_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY)))))) then 
                    ap_reg_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_logic_1 = m_axi_cpk_AWREADY) and (m_axi_key_RVALID = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_cpk_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_cpk_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_block_state12_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_cpk_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_1 = m_axi_cpk_WREADY)))) then 
                    ap_reg_ioackin_m_axi_cpk_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_key_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_1 = m_axi_key_ARREADY)))) then 
                    ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_cpk_BVALID = ap_const_logic_1))) then 
                i_reg_158 <= i_10_reg_275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_158 <= ap_const_lv5_10;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                buf_addr_read_reg_320 <= m_axi_buf_r_RDATA;
                key_addr_read_reg_314 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_179_p2))) then
                buf_addr_reg_295 <= sum_fu_211_p2;
                cpk_addr_1_reg_308 <= sum7_fu_243_p2;
                cpk_addr_reg_289 <= sum6_fu_200_p2;
                key_addr_1_reg_302 <= sum3_fu_232_p2;
                key_addr_reg_283 <= sum2_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_10_reg_275 <= i_10_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY))))) then
                key_addr_1_read_reg_330 <= m_axi_key_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0))) then
                tmp_33_reg_325 <= tmp_33_fu_254_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_buf_r_RVALID, m_axi_buf_r_BVALID, m_axi_key_RVALID, m_axi_cpk_BVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state19, ap_CS_fsm_state2, tmp_fu_179_p2, ap_sig_ioackin_m_axi_cpk_AWREADY, ap_block_state11_io, ap_sig_ioackin_m_axi_key_ARREADY, ap_block_state3_io, ap_sig_ioackin_m_axi_cpk_WREADY, ap_block_state12_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_179_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_block_state3_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_block_state11_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_block_state12_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_cpk_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state10_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID)
    begin
                ap_block_state10 <= ((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_state11_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_AWREADY, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
                ap_block_state11_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY));
    end process;


    ap_block_state12_io_assign_proc : process(ap_sig_ioackin_m_axi_cpk_WREADY, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
                ap_block_state12_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_WREADY));
    end process;


    ap_block_state17_assign_proc : process(m_axi_buf_r_BVALID, m_axi_cpk_BVALID)
    begin
                ap_block_state17 <= ((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;


    ap_block_state3_io_assign_proc : process(ap_sig_ioackin_m_axi_key_ARREADY, ap_sig_ioackin_m_axi_buf_r_ARREADY)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_ARREADY));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_179_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_179_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_179_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_179_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(m_axi_buf_r_ARREADY, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= m_axi_buf_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(m_axi_buf_r_AWREADY, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= m_axi_buf_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_WREADY_assign_proc : process(m_axi_buf_r_WREADY, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= m_axi_buf_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_cpk_AWREADY_assign_proc : process(m_axi_cpk_AWREADY, ap_reg_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) then 
            ap_sig_ioackin_m_axi_cpk_AWREADY <= m_axi_cpk_AWREADY;
        else 
            ap_sig_ioackin_m_axi_cpk_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_cpk_WREADY_assign_proc : process(m_axi_cpk_WREADY, ap_reg_ioackin_m_axi_cpk_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) then 
            ap_sig_ioackin_m_axi_cpk_WREADY <= m_axi_cpk_WREADY;
        else 
            ap_sig_ioackin_m_axi_cpk_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_key_ARREADY_assign_proc : process(m_axi_key_ARREADY, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) then 
            ap_sig_ioackin_m_axi_key_ARREADY <= m_axi_key_ARREADY;
        else 
            ap_sig_ioackin_m_axi_key_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AR_assign_proc : process(m_axi_buf_r_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buf_r_blk_n_AR <= m_axi_buf_r_ARREADY;
        else 
            buf_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(m_axi_buf_r_AWREADY, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_R_assign_proc : process(m_axi_buf_r_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_r_blk_n_R <= m_axi_buf_r_RVALID;
        else 
            buf_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    cpk_blk_n_AW_assign_proc : process(m_axi_cpk_AWREADY, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            cpk_blk_n_AW <= m_axi_cpk_AWREADY;
        else 
            cpk_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    cpk_blk_n_B_assign_proc : process(m_axi_cpk_BVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            cpk_blk_n_B <= m_axi_cpk_BVALID;
        else 
            cpk_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    cpk_blk_n_W_assign_proc : process(m_axi_cpk_WREADY, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            cpk_blk_n_W <= m_axi_cpk_WREADY;
        else 
            cpk_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

        i_10_cast_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_10_fu_169_p2),8));

    i_10_fu_169_p2 <= std_logic_vector(unsigned(i_reg_158) + unsigned(ap_const_lv5_1F));

    key_blk_n_AR_assign_proc : process(m_axi_key_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            key_blk_n_AR <= m_axi_key_ARREADY;
        else 
            key_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    key_blk_n_R_assign_proc : process(m_axi_key_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            key_blk_n_R <= m_axi_key_RVALID;
        else 
            key_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_buf_r_ARADDR <= buf_addr_reg_295;
    m_axi_buf_r_ARBURST <= ap_const_lv2_0;
    m_axi_buf_r_ARCACHE <= ap_const_lv4_0;
    m_axi_buf_r_ARID <= ap_const_lv1_0;
    m_axi_buf_r_ARLEN <= ap_const_lv32_1;
    m_axi_buf_r_ARLOCK <= ap_const_lv2_0;
    m_axi_buf_r_ARPROT <= ap_const_lv3_0;
    m_axi_buf_r_ARQOS <= ap_const_lv4_0;
    m_axi_buf_r_ARREGION <= ap_const_lv4_0;
    m_axi_buf_r_ARSIZE <= ap_const_lv3_0;
    m_axi_buf_r_ARUSER <= ap_const_lv1_0;

    m_axi_buf_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY))) then 
            m_axi_buf_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_buf_r_AWADDR <= buf_addr_reg_295;
    m_axi_buf_r_AWBURST <= ap_const_lv2_0;
    m_axi_buf_r_AWCACHE <= ap_const_lv4_0;
    m_axi_buf_r_AWID <= ap_const_lv1_0;
    m_axi_buf_r_AWLEN <= ap_const_lv32_1;
    m_axi_buf_r_AWLOCK <= ap_const_lv2_0;
    m_axi_buf_r_AWPROT <= ap_const_lv3_0;
    m_axi_buf_r_AWQOS <= ap_const_lv4_0;
    m_axi_buf_r_AWREGION <= ap_const_lv4_0;
    m_axi_buf_r_AWSIZE <= ap_const_lv3_0;
    m_axi_buf_r_AWUSER <= ap_const_lv1_0;

    m_axi_buf_r_AWVALID_assign_proc : process(ap_CS_fsm_state11, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY))) then 
            m_axi_buf_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_BREADY_assign_proc : process(m_axi_buf_r_BVALID, m_axi_cpk_BVALID, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID))))) then 
            m_axi_buf_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_RREADY_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID))))) then 
            m_axi_buf_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_buf_r_WDATA <= tmp_33_reg_325;
    m_axi_buf_r_WID <= ap_const_lv1_0;
    m_axi_buf_r_WLAST <= ap_const_logic_0;
    m_axi_buf_r_WSTRB <= ap_const_lv1_1;
    m_axi_buf_r_WUSER <= ap_const_lv1_0;

    m_axi_buf_r_WVALID_assign_proc : process(ap_CS_fsm_state12, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY))) then 
            m_axi_buf_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_cpk_ARADDR <= ap_const_lv32_0;
    m_axi_cpk_ARBURST <= ap_const_lv2_0;
    m_axi_cpk_ARCACHE <= ap_const_lv4_0;
    m_axi_cpk_ARID <= ap_const_lv1_0;
    m_axi_cpk_ARLEN <= ap_const_lv32_0;
    m_axi_cpk_ARLOCK <= ap_const_lv2_0;
    m_axi_cpk_ARPROT <= ap_const_lv3_0;
    m_axi_cpk_ARQOS <= ap_const_lv4_0;
    m_axi_cpk_ARREGION <= ap_const_lv4_0;
    m_axi_cpk_ARSIZE <= ap_const_lv3_0;
    m_axi_cpk_ARUSER <= ap_const_lv1_0;
    m_axi_cpk_ARVALID <= ap_const_logic_0;

    m_axi_cpk_AWADDR_assign_proc : process(m_axi_key_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state13, cpk_addr_reg_289, cpk_addr_1_reg_308, ap_reg_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_key_RVALID = ap_const_logic_1))) then 
                m_axi_cpk_AWADDR <= cpk_addr_1_reg_308;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                m_axi_cpk_AWADDR <= cpk_addr_reg_289;
            else 
                m_axi_cpk_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_cpk_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_cpk_AWBURST <= ap_const_lv2_0;
    m_axi_cpk_AWCACHE <= ap_const_lv4_0;
    m_axi_cpk_AWID <= ap_const_lv1_0;
    m_axi_cpk_AWLEN <= ap_const_lv32_1;
    m_axi_cpk_AWLOCK <= ap_const_lv2_0;
    m_axi_cpk_AWPROT <= ap_const_lv3_0;
    m_axi_cpk_AWQOS <= ap_const_lv4_0;
    m_axi_cpk_AWREGION <= ap_const_lv4_0;
    m_axi_cpk_AWSIZE <= ap_const_lv3_0;
    m_axi_cpk_AWUSER <= ap_const_lv1_0;

    m_axi_cpk_AWVALID_assign_proc : process(m_axi_key_RVALID, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_reg_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_AWREADY) and (m_axi_key_RVALID = ap_const_logic_1)))) then 
            m_axi_cpk_AWVALID <= ap_const_logic_1;
        else 
            m_axi_cpk_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_cpk_BREADY_assign_proc : process(m_axi_buf_r_BVALID, m_axi_cpk_BVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_cpk_BVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and not(((ap_const_logic_0 = m_axi_cpk_BVALID) or (ap_const_logic_0 = m_axi_buf_r_BVALID)))))) then 
            m_axi_cpk_BREADY <= ap_const_logic_1;
        else 
            m_axi_cpk_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_cpk_RREADY <= ap_const_logic_0;

    m_axi_cpk_WDATA_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, key_addr_read_reg_314, key_addr_1_read_reg_330, ap_reg_ioackin_m_axi_cpk_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                m_axi_cpk_WDATA <= key_addr_1_read_reg_330;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                m_axi_cpk_WDATA <= key_addr_read_reg_314;
            else 
                m_axi_cpk_WDATA <= "XXXXXXXX";
            end if;
        else 
            m_axi_cpk_WDATA <= "XXXXXXXX";
        end if; 
    end process;

    m_axi_cpk_WID <= ap_const_lv1_0;
    m_axi_cpk_WLAST <= ap_const_logic_0;
    m_axi_cpk_WSTRB <= ap_const_lv1_1;
    m_axi_cpk_WUSER <= ap_const_lv1_0;

    m_axi_cpk_WVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, ap_reg_ioackin_m_axi_cpk_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_cpk_WREADY)))) then 
            m_axi_cpk_WVALID <= ap_const_logic_1;
        else 
            m_axi_cpk_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_key_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, key_addr_reg_283, key_addr_1_reg_302, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_key_ARADDR <= key_addr_1_reg_302;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_key_ARADDR <= key_addr_reg_283;
            else 
                m_axi_key_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_key_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_key_ARBURST <= ap_const_lv2_0;
    m_axi_key_ARCACHE <= ap_const_lv4_0;
    m_axi_key_ARID <= ap_const_lv1_0;
    m_axi_key_ARLEN <= ap_const_lv32_1;
    m_axi_key_ARLOCK <= ap_const_lv2_0;
    m_axi_key_ARPROT <= ap_const_lv3_0;
    m_axi_key_ARQOS <= ap_const_lv4_0;
    m_axi_key_ARREGION <= ap_const_lv4_0;
    m_axi_key_ARSIZE <= ap_const_lv3_0;
    m_axi_key_ARUSER <= ap_const_lv1_0;

    m_axi_key_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)))) then 
            m_axi_key_ARVALID <= ap_const_logic_1;
        else 
            m_axi_key_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_AWADDR <= ap_const_lv32_0;
    m_axi_key_AWBURST <= ap_const_lv2_0;
    m_axi_key_AWCACHE <= ap_const_lv4_0;
    m_axi_key_AWID <= ap_const_lv1_0;
    m_axi_key_AWLEN <= ap_const_lv32_0;
    m_axi_key_AWLOCK <= ap_const_lv2_0;
    m_axi_key_AWPROT <= ap_const_lv3_0;
    m_axi_key_AWQOS <= ap_const_lv4_0;
    m_axi_key_AWREGION <= ap_const_lv4_0;
    m_axi_key_AWSIZE <= ap_const_lv3_0;
    m_axi_key_AWUSER <= ap_const_lv1_0;
    m_axi_key_AWVALID <= ap_const_logic_0;
    m_axi_key_BREADY <= ap_const_logic_0;

    m_axi_key_RREADY_assign_proc : process(m_axi_buf_r_RVALID, m_axi_key_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_sig_ioackin_m_axi_cpk_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = m_axi_buf_r_RVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state13) and not(((ap_const_logic_0 = m_axi_key_RVALID) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_cpk_AWREADY)))))) then 
            m_axi_key_RREADY <= ap_const_logic_1;
        else 
            m_axi_key_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_WDATA <= ap_const_lv8_0;
    m_axi_key_WID <= ap_const_lv1_0;
    m_axi_key_WLAST <= ap_const_logic_0;
    m_axi_key_WSTRB <= ap_const_lv1_0;
    m_axi_key_WUSER <= ap_const_lv1_0;
    m_axi_key_WVALID <= ap_const_logic_0;
    sum2_fu_189_p2 <= std_logic_vector(unsigned(tmp_s_fu_185_p1) + unsigned(key_offset));
    sum3_fu_232_p2 <= std_logic_vector(unsigned(sum5_cast_fu_228_p1) + unsigned(key_offset));
    sum5_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_222_p2),32));
    sum5_fu_222_p2 <= std_logic_vector(unsigned(i_reg_158) + unsigned(ap_const_lv5_F));
    sum6_fu_200_p2 <= std_logic_vector(unsigned(tmp_s_fu_185_p1) + unsigned(cpk_offset));
    sum7_fu_243_p2 <= std_logic_vector(unsigned(sum5_cast_fu_228_p1) + unsigned(cpk_offset));
    sum_fu_211_p2 <= std_logic_vector(unsigned(tmp_s_fu_185_p1) + unsigned(buf_offset));
    tmp_33_fu_254_p2 <= (buf_addr_read_reg_320 xor key_addr_read_reg_314);
    tmp_fu_179_p2 <= "1" when (i_reg_158 = ap_const_lv5_0) else "0";
    tmp_s_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_cast_fu_175_p1),32));
end behav;
