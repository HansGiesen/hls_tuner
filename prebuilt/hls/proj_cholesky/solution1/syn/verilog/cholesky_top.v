// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cholesky_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.556000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=16,HLS_SYN_FF=5820,HLS_SYN_LUT=14128,HLS_VERSION=2019_1}" *)

module cholesky_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        L_address0,
        L_ce0,
        L_we0,
        L_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [12:0] L_address0;
output   L_ce0;
output   L_we0;
output  [31:0] L_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg L_ce0;
reg L_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] r_fu_181_p2;
reg   [6:0] r_reg_324;
wire    ap_CS_fsm_state2;
wire   [13:0] add_ln47_fu_211_p2;
reg   [13:0] add_ln47_reg_329;
wire   [0:0] icmp_ln45_fu_175_p2;
wire   [6:0] c_fu_223_p2;
reg   [6:0] c_reg_337;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln47_3_fu_238_p1;
reg   [63:0] zext_ln47_3_reg_342;
wire   [0:0] icmp_ln46_fu_217_p2;
wire   [6:0] r_1_fu_255_p2;
reg   [6:0] r_1_reg_358;
wire    ap_CS_fsm_state6;
wire   [13:0] add_ln60_fu_285_p2;
reg   [13:0] add_ln60_reg_363;
wire   [0:0] icmp_ln58_fu_249_p2;
wire   [6:0] c_1_fu_297_p2;
reg   [6:0] c_1_reg_371;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln60_3_fu_312_p1;
reg   [63:0] zext_ln60_3_reg_376;
wire   [0:0] icmp_ln59_fu_291_p2;
reg   [12:0] a_i_address0;
reg    a_i_ce0;
reg    a_i_we0;
wire   [31:0] a_i_q0;
reg   [12:0] L_assign_address0;
reg    L_assign_ce0;
reg    L_assign_we0;
wire   [31:0] L_assign_q0;
wire    grp_cholesky_alt_fu_169_ap_start;
wire    grp_cholesky_alt_fu_169_ap_done;
wire    grp_cholesky_alt_fu_169_ap_idle;
wire    grp_cholesky_alt_fu_169_ap_ready;
wire   [12:0] grp_cholesky_alt_fu_169_A_address0;
wire    grp_cholesky_alt_fu_169_A_ce0;
wire   [12:0] grp_cholesky_alt_fu_169_L_address0;
wire    grp_cholesky_alt_fu_169_L_ce0;
wire    grp_cholesky_alt_fu_169_L_we0;
wire   [31:0] grp_cholesky_alt_fu_169_L_d0;
wire   [31:0] grp_cholesky_alt_fu_169_ap_return;
reg   [6:0] r_0_reg_112;
reg   [6:0] c_0_reg_123;
wire    ap_CS_fsm_state4;
reg   [6:0] r1_0_reg_134;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln52_fu_243_p2;
reg   [6:0] c2_0_reg_145;
wire    ap_CS_fsm_state8;
reg   [0:0] p_0_reg_156;
reg    grp_cholesky_alt_fu_169_ap_start_reg;
wire   [12:0] tmp_fu_187_p3;
wire   [7:0] tmp_1_fu_199_p3;
wire   [13:0] zext_ln47_1_fu_207_p1;
wire   [13:0] zext_ln47_fu_195_p1;
wire   [13:0] zext_ln47_2_fu_229_p1;
wire   [13:0] add_ln47_1_fu_233_p2;
wire   [12:0] tmp_2_fu_261_p3;
wire   [7:0] tmp_3_fu_273_p3;
wire   [13:0] zext_ln60_1_fu_281_p1;
wire   [13:0] zext_ln60_fu_269_p1;
wire   [13:0] zext_ln60_2_fu_303_p1;
wire   [13:0] add_ln60_1_fu_307_p2;
wire    ap_CS_fsm_state9;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_cholesky_alt_fu_169_ap_start_reg = 1'b0;
end

cholesky_top_a_i #(
    .DataWidth( 32 ),
    .AddressRange( 4356 ),
    .AddressWidth( 13 ))
a_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_i_address0),
    .ce0(a_i_ce0),
    .we0(a_i_we0),
    .d0(A_q0),
    .q0(a_i_q0)
);

cholesky_top_a_i #(
    .DataWidth( 32 ),
    .AddressRange( 4356 ),
    .AddressWidth( 13 ))
L_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L_assign_address0),
    .ce0(L_assign_ce0),
    .we0(L_assign_we0),
    .d0(grp_cholesky_alt_fu_169_L_d0),
    .q0(L_assign_q0)
);

cholesky_alt grp_cholesky_alt_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cholesky_alt_fu_169_ap_start),
    .ap_done(grp_cholesky_alt_fu_169_ap_done),
    .ap_idle(grp_cholesky_alt_fu_169_ap_idle),
    .ap_ready(grp_cholesky_alt_fu_169_ap_ready),
    .A_address0(grp_cholesky_alt_fu_169_A_address0),
    .A_ce0(grp_cholesky_alt_fu_169_A_ce0),
    .A_q0(a_i_q0),
    .L_address0(grp_cholesky_alt_fu_169_L_address0),
    .L_ce0(grp_cholesky_alt_fu_169_L_ce0),
    .L_we0(grp_cholesky_alt_fu_169_L_we0),
    .L_d0(grp_cholesky_alt_fu_169_L_d0),
    .ap_return(grp_cholesky_alt_fu_169_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cholesky_alt_fu_169_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln45_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_cholesky_alt_fu_169_ap_start_reg <= 1'b1;
        end else if ((grp_cholesky_alt_fu_169_ap_ready == 1'b1)) begin
            grp_cholesky_alt_fu_169_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_0_reg_145 <= c_1_reg_371;
    end else if (((icmp_ln58_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        c2_0_reg_145 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_0_reg_123 <= c_reg_337;
    end else if (((icmp_ln45_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_123 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        p_0_reg_156 <= 1'd0;
    end else if (((icmp_ln52_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grp_cholesky_alt_fu_169_ap_done == 1'b1))) begin
        p_0_reg_156 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln52_fu_243_p2 == 1'd1) & (grp_cholesky_alt_fu_169_ap_done == 1'b1))) begin
        r1_0_reg_134 <= 7'd0;
    end else if (((icmp_ln59_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        r1_0_reg_134 <= r_1_reg_358;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_112 <= r_reg_324;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_112 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln47_reg_329[13 : 1] <= add_ln47_fu_211_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln60_reg_363[13 : 1] <= add_ln60_fu_285_p2[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_1_reg_371 <= c_1_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_337 <= c_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_1_reg_358 <= r_1_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_324 <= r_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln47_3_reg_342[13 : 0] <= zext_ln47_3_fu_238_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_fu_291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln60_3_reg_376[13 : 0] <= zext_ln60_3_fu_312_p1[13 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        L_assign_address0 = zext_ln60_3_fu_312_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        L_assign_address0 = grp_cholesky_alt_fu_169_L_address0;
    end else begin
        L_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        L_assign_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        L_assign_ce0 = grp_cholesky_alt_fu_169_L_ce0;
    end else begin
        L_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        L_assign_we0 = grp_cholesky_alt_fu_169_L_we0;
    end else begin
        L_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        L_ce0 = 1'b1;
    end else begin
        L_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        L_we0 = 1'b1;
    end else begin
        L_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_address0 = zext_ln47_3_reg_342;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_i_address0 = grp_cholesky_alt_fu_169_A_address0;
    end else begin
        a_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_i_ce0 = grp_cholesky_alt_fu_169_A_ce0;
    end else begin
        a_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_we0 = 1'b1;
    end else begin
        a_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln45_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln46_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln52_fu_243_p2 == 1'd1) & (grp_cholesky_alt_fu_169_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((icmp_ln52_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (grp_cholesky_alt_fu_169_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln58_fu_249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln59_fu_291_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln47_3_fu_238_p1;

assign L_address0 = zext_ln60_3_reg_376;

assign L_d0 = L_assign_q0;

assign add_ln47_1_fu_233_p2 = (add_ln47_reg_329 + zext_ln47_2_fu_229_p1);

assign add_ln47_fu_211_p2 = (zext_ln47_1_fu_207_p1 + zext_ln47_fu_195_p1);

assign add_ln60_1_fu_307_p2 = (add_ln60_reg_363 + zext_ln60_2_fu_303_p1);

assign add_ln60_fu_285_p2 = (zext_ln60_1_fu_281_p1 + zext_ln60_fu_269_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = p_0_reg_156;

assign c_1_fu_297_p2 = (c2_0_reg_145 + 7'd1);

assign c_fu_223_p2 = (c_0_reg_123 + 7'd1);

assign grp_cholesky_alt_fu_169_ap_start = grp_cholesky_alt_fu_169_ap_start_reg;

assign icmp_ln45_fu_175_p2 = ((r_0_reg_112 == 7'd66) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_217_p2 = ((c_0_reg_123 == 7'd66) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_243_p2 = ((grp_cholesky_alt_fu_169_ap_return == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_249_p2 = ((r1_0_reg_134 == 7'd66) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_291_p2 = ((c2_0_reg_145 == 7'd66) ? 1'b1 : 1'b0);

assign r_1_fu_255_p2 = (r1_0_reg_134 + 7'd1);

assign r_fu_181_p2 = (r_0_reg_112 + 7'd1);

assign tmp_1_fu_199_p3 = {{r_0_reg_112}, {1'd0}};

assign tmp_2_fu_261_p3 = {{r1_0_reg_134}, {6'd0}};

assign tmp_3_fu_273_p3 = {{r1_0_reg_134}, {1'd0}};

assign tmp_fu_187_p3 = {{r_0_reg_112}, {6'd0}};

assign zext_ln47_1_fu_207_p1 = tmp_1_fu_199_p3;

assign zext_ln47_2_fu_229_p1 = c_0_reg_123;

assign zext_ln47_3_fu_238_p1 = add_ln47_1_fu_233_p2;

assign zext_ln47_fu_195_p1 = tmp_fu_187_p3;

assign zext_ln60_1_fu_281_p1 = tmp_3_fu_273_p3;

assign zext_ln60_2_fu_303_p1 = c2_0_reg_145;

assign zext_ln60_3_fu_312_p1 = add_ln60_1_fu_307_p2;

assign zext_ln60_fu_269_p1 = tmp_2_fu_261_p3;

always @ (posedge ap_clk) begin
    add_ln47_reg_329[0] <= 1'b0;
    zext_ln47_3_reg_342[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
    add_ln60_reg_363[0] <= 1'b0;
    zext_ln60_3_reg_376[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //cholesky_top
