// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_aes_addRoundKey_cpy (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY,
        m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY,
        m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST,
        m_axi_buf_r_WID,
        m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY,
        m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID,
        m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA,
        m_axi_buf_r_RLAST,
        m_axi_buf_r_RID,
        m_axi_buf_r_RUSER,
        m_axi_buf_r_RRESP,
        m_axi_buf_r_BVALID,
        m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP,
        m_axi_buf_r_BID,
        m_axi_buf_r_BUSER,
        buf_offset,
        m_axi_key_AWVALID,
        m_axi_key_AWREADY,
        m_axi_key_AWADDR,
        m_axi_key_AWID,
        m_axi_key_AWLEN,
        m_axi_key_AWSIZE,
        m_axi_key_AWBURST,
        m_axi_key_AWLOCK,
        m_axi_key_AWCACHE,
        m_axi_key_AWPROT,
        m_axi_key_AWQOS,
        m_axi_key_AWREGION,
        m_axi_key_AWUSER,
        m_axi_key_WVALID,
        m_axi_key_WREADY,
        m_axi_key_WDATA,
        m_axi_key_WSTRB,
        m_axi_key_WLAST,
        m_axi_key_WID,
        m_axi_key_WUSER,
        m_axi_key_ARVALID,
        m_axi_key_ARREADY,
        m_axi_key_ARADDR,
        m_axi_key_ARID,
        m_axi_key_ARLEN,
        m_axi_key_ARSIZE,
        m_axi_key_ARBURST,
        m_axi_key_ARLOCK,
        m_axi_key_ARCACHE,
        m_axi_key_ARPROT,
        m_axi_key_ARQOS,
        m_axi_key_ARREGION,
        m_axi_key_ARUSER,
        m_axi_key_RVALID,
        m_axi_key_RREADY,
        m_axi_key_RDATA,
        m_axi_key_RLAST,
        m_axi_key_RID,
        m_axi_key_RUSER,
        m_axi_key_RRESP,
        m_axi_key_BVALID,
        m_axi_key_BREADY,
        m_axi_key_BRESP,
        m_axi_key_BID,
        m_axi_key_BUSER,
        key_offset,
        m_axi_cpk_AWVALID,
        m_axi_cpk_AWREADY,
        m_axi_cpk_AWADDR,
        m_axi_cpk_AWID,
        m_axi_cpk_AWLEN,
        m_axi_cpk_AWSIZE,
        m_axi_cpk_AWBURST,
        m_axi_cpk_AWLOCK,
        m_axi_cpk_AWCACHE,
        m_axi_cpk_AWPROT,
        m_axi_cpk_AWQOS,
        m_axi_cpk_AWREGION,
        m_axi_cpk_AWUSER,
        m_axi_cpk_WVALID,
        m_axi_cpk_WREADY,
        m_axi_cpk_WDATA,
        m_axi_cpk_WSTRB,
        m_axi_cpk_WLAST,
        m_axi_cpk_WID,
        m_axi_cpk_WUSER,
        m_axi_cpk_ARVALID,
        m_axi_cpk_ARREADY,
        m_axi_cpk_ARADDR,
        m_axi_cpk_ARID,
        m_axi_cpk_ARLEN,
        m_axi_cpk_ARSIZE,
        m_axi_cpk_ARBURST,
        m_axi_cpk_ARLOCK,
        m_axi_cpk_ARCACHE,
        m_axi_cpk_ARPROT,
        m_axi_cpk_ARQOS,
        m_axi_cpk_ARREGION,
        m_axi_cpk_ARUSER,
        m_axi_cpk_RVALID,
        m_axi_cpk_RREADY,
        m_axi_cpk_RDATA,
        m_axi_cpk_RLAST,
        m_axi_cpk_RID,
        m_axi_cpk_RUSER,
        m_axi_cpk_RRESP,
        m_axi_cpk_BVALID,
        m_axi_cpk_BREADY,
        m_axi_cpk_BRESP,
        m_axi_cpk_BID,
        m_axi_cpk_BUSER,
        cpk_offset
);

parameter    ap_ST_fsm_state1 = 66'd1;
parameter    ap_ST_fsm_state2 = 66'd2;
parameter    ap_ST_fsm_state3 = 66'd4;
parameter    ap_ST_fsm_state4 = 66'd8;
parameter    ap_ST_fsm_state5 = 66'd16;
parameter    ap_ST_fsm_state6 = 66'd32;
parameter    ap_ST_fsm_state7 = 66'd64;
parameter    ap_ST_fsm_state8 = 66'd128;
parameter    ap_ST_fsm_state9 = 66'd256;
parameter    ap_ST_fsm_state10 = 66'd512;
parameter    ap_ST_fsm_state11 = 66'd1024;
parameter    ap_ST_fsm_state12 = 66'd2048;
parameter    ap_ST_fsm_state13 = 66'd4096;
parameter    ap_ST_fsm_state14 = 66'd8192;
parameter    ap_ST_fsm_state15 = 66'd16384;
parameter    ap_ST_fsm_state16 = 66'd32768;
parameter    ap_ST_fsm_state17 = 66'd65536;
parameter    ap_ST_fsm_state18 = 66'd131072;
parameter    ap_ST_fsm_state19 = 66'd262144;
parameter    ap_ST_fsm_state20 = 66'd524288;
parameter    ap_ST_fsm_state21 = 66'd1048576;
parameter    ap_ST_fsm_state22 = 66'd2097152;
parameter    ap_ST_fsm_state23 = 66'd4194304;
parameter    ap_ST_fsm_state24 = 66'd8388608;
parameter    ap_ST_fsm_state25 = 66'd16777216;
parameter    ap_ST_fsm_state26 = 66'd33554432;
parameter    ap_ST_fsm_state27 = 66'd67108864;
parameter    ap_ST_fsm_state28 = 66'd134217728;
parameter    ap_ST_fsm_state29 = 66'd268435456;
parameter    ap_ST_fsm_state30 = 66'd536870912;
parameter    ap_ST_fsm_state31 = 66'd1073741824;
parameter    ap_ST_fsm_state32 = 66'd2147483648;
parameter    ap_ST_fsm_state33 = 66'd4294967296;
parameter    ap_ST_fsm_state34 = 66'd8589934592;
parameter    ap_ST_fsm_state35 = 66'd17179869184;
parameter    ap_ST_fsm_state36 = 66'd34359738368;
parameter    ap_ST_fsm_state37 = 66'd68719476736;
parameter    ap_ST_fsm_state38 = 66'd137438953472;
parameter    ap_ST_fsm_state39 = 66'd274877906944;
parameter    ap_ST_fsm_state40 = 66'd549755813888;
parameter    ap_ST_fsm_state41 = 66'd1099511627776;
parameter    ap_ST_fsm_state42 = 66'd2199023255552;
parameter    ap_ST_fsm_state43 = 66'd4398046511104;
parameter    ap_ST_fsm_state44 = 66'd8796093022208;
parameter    ap_ST_fsm_state45 = 66'd17592186044416;
parameter    ap_ST_fsm_state46 = 66'd35184372088832;
parameter    ap_ST_fsm_state47 = 66'd70368744177664;
parameter    ap_ST_fsm_state48 = 66'd140737488355328;
parameter    ap_ST_fsm_state49 = 66'd281474976710656;
parameter    ap_ST_fsm_state50 = 66'd562949953421312;
parameter    ap_ST_fsm_state51 = 66'd1125899906842624;
parameter    ap_ST_fsm_state52 = 66'd2251799813685248;
parameter    ap_ST_fsm_state53 = 66'd4503599627370496;
parameter    ap_ST_fsm_state54 = 66'd9007199254740992;
parameter    ap_ST_fsm_state55 = 66'd18014398509481984;
parameter    ap_ST_fsm_state56 = 66'd36028797018963968;
parameter    ap_ST_fsm_state57 = 66'd72057594037927936;
parameter    ap_ST_fsm_state58 = 66'd144115188075855872;
parameter    ap_ST_fsm_state59 = 66'd288230376151711744;
parameter    ap_ST_fsm_state60 = 66'd576460752303423488;
parameter    ap_ST_fsm_state61 = 66'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 66'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 66'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 66'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 66'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 66'd36893488147419103232;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_buf_r_AWVALID;
input   m_axi_buf_r_AWREADY;
output  [31:0] m_axi_buf_r_AWADDR;
output  [0:0] m_axi_buf_r_AWID;
output  [31:0] m_axi_buf_r_AWLEN;
output  [2:0] m_axi_buf_r_AWSIZE;
output  [1:0] m_axi_buf_r_AWBURST;
output  [1:0] m_axi_buf_r_AWLOCK;
output  [3:0] m_axi_buf_r_AWCACHE;
output  [2:0] m_axi_buf_r_AWPROT;
output  [3:0] m_axi_buf_r_AWQOS;
output  [3:0] m_axi_buf_r_AWREGION;
output  [0:0] m_axi_buf_r_AWUSER;
output   m_axi_buf_r_WVALID;
input   m_axi_buf_r_WREADY;
output  [7:0] m_axi_buf_r_WDATA;
output  [0:0] m_axi_buf_r_WSTRB;
output   m_axi_buf_r_WLAST;
output  [0:0] m_axi_buf_r_WID;
output  [0:0] m_axi_buf_r_WUSER;
output   m_axi_buf_r_ARVALID;
input   m_axi_buf_r_ARREADY;
output  [31:0] m_axi_buf_r_ARADDR;
output  [0:0] m_axi_buf_r_ARID;
output  [31:0] m_axi_buf_r_ARLEN;
output  [2:0] m_axi_buf_r_ARSIZE;
output  [1:0] m_axi_buf_r_ARBURST;
output  [1:0] m_axi_buf_r_ARLOCK;
output  [3:0] m_axi_buf_r_ARCACHE;
output  [2:0] m_axi_buf_r_ARPROT;
output  [3:0] m_axi_buf_r_ARQOS;
output  [3:0] m_axi_buf_r_ARREGION;
output  [0:0] m_axi_buf_r_ARUSER;
input   m_axi_buf_r_RVALID;
output   m_axi_buf_r_RREADY;
input  [7:0] m_axi_buf_r_RDATA;
input   m_axi_buf_r_RLAST;
input  [0:0] m_axi_buf_r_RID;
input  [0:0] m_axi_buf_r_RUSER;
input  [1:0] m_axi_buf_r_RRESP;
input   m_axi_buf_r_BVALID;
output   m_axi_buf_r_BREADY;
input  [1:0] m_axi_buf_r_BRESP;
input  [0:0] m_axi_buf_r_BID;
input  [0:0] m_axi_buf_r_BUSER;
input  [31:0] buf_offset;
output   m_axi_key_AWVALID;
input   m_axi_key_AWREADY;
output  [31:0] m_axi_key_AWADDR;
output  [0:0] m_axi_key_AWID;
output  [31:0] m_axi_key_AWLEN;
output  [2:0] m_axi_key_AWSIZE;
output  [1:0] m_axi_key_AWBURST;
output  [1:0] m_axi_key_AWLOCK;
output  [3:0] m_axi_key_AWCACHE;
output  [2:0] m_axi_key_AWPROT;
output  [3:0] m_axi_key_AWQOS;
output  [3:0] m_axi_key_AWREGION;
output  [0:0] m_axi_key_AWUSER;
output   m_axi_key_WVALID;
input   m_axi_key_WREADY;
output  [7:0] m_axi_key_WDATA;
output  [0:0] m_axi_key_WSTRB;
output   m_axi_key_WLAST;
output  [0:0] m_axi_key_WID;
output  [0:0] m_axi_key_WUSER;
output   m_axi_key_ARVALID;
input   m_axi_key_ARREADY;
output  [31:0] m_axi_key_ARADDR;
output  [0:0] m_axi_key_ARID;
output  [31:0] m_axi_key_ARLEN;
output  [2:0] m_axi_key_ARSIZE;
output  [1:0] m_axi_key_ARBURST;
output  [1:0] m_axi_key_ARLOCK;
output  [3:0] m_axi_key_ARCACHE;
output  [2:0] m_axi_key_ARPROT;
output  [3:0] m_axi_key_ARQOS;
output  [3:0] m_axi_key_ARREGION;
output  [0:0] m_axi_key_ARUSER;
input   m_axi_key_RVALID;
output   m_axi_key_RREADY;
input  [7:0] m_axi_key_RDATA;
input   m_axi_key_RLAST;
input  [0:0] m_axi_key_RID;
input  [0:0] m_axi_key_RUSER;
input  [1:0] m_axi_key_RRESP;
input   m_axi_key_BVALID;
output   m_axi_key_BREADY;
input  [1:0] m_axi_key_BRESP;
input  [0:0] m_axi_key_BID;
input  [0:0] m_axi_key_BUSER;
input  [31:0] key_offset;
output   m_axi_cpk_AWVALID;
input   m_axi_cpk_AWREADY;
output  [31:0] m_axi_cpk_AWADDR;
output  [0:0] m_axi_cpk_AWID;
output  [31:0] m_axi_cpk_AWLEN;
output  [2:0] m_axi_cpk_AWSIZE;
output  [1:0] m_axi_cpk_AWBURST;
output  [1:0] m_axi_cpk_AWLOCK;
output  [3:0] m_axi_cpk_AWCACHE;
output  [2:0] m_axi_cpk_AWPROT;
output  [3:0] m_axi_cpk_AWQOS;
output  [3:0] m_axi_cpk_AWREGION;
output  [0:0] m_axi_cpk_AWUSER;
output   m_axi_cpk_WVALID;
input   m_axi_cpk_WREADY;
output  [7:0] m_axi_cpk_WDATA;
output  [0:0] m_axi_cpk_WSTRB;
output   m_axi_cpk_WLAST;
output  [0:0] m_axi_cpk_WID;
output  [0:0] m_axi_cpk_WUSER;
output   m_axi_cpk_ARVALID;
input   m_axi_cpk_ARREADY;
output  [31:0] m_axi_cpk_ARADDR;
output  [0:0] m_axi_cpk_ARID;
output  [31:0] m_axi_cpk_ARLEN;
output  [2:0] m_axi_cpk_ARSIZE;
output  [1:0] m_axi_cpk_ARBURST;
output  [1:0] m_axi_cpk_ARLOCK;
output  [3:0] m_axi_cpk_ARCACHE;
output  [2:0] m_axi_cpk_ARPROT;
output  [3:0] m_axi_cpk_ARQOS;
output  [3:0] m_axi_cpk_ARREGION;
output  [0:0] m_axi_cpk_ARUSER;
input   m_axi_cpk_RVALID;
output   m_axi_cpk_RREADY;
input  [7:0] m_axi_cpk_RDATA;
input   m_axi_cpk_RLAST;
input  [0:0] m_axi_cpk_RID;
input  [0:0] m_axi_cpk_RUSER;
input  [1:0] m_axi_cpk_RRESP;
input   m_axi_cpk_BVALID;
output   m_axi_cpk_BREADY;
input  [1:0] m_axi_cpk_BRESP;
input  [0:0] m_axi_cpk_BID;
input  [0:0] m_axi_cpk_BUSER;
input  [31:0] cpk_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_buf_r_AWVALID;
reg[31:0] m_axi_buf_r_AWADDR;
reg m_axi_buf_r_WVALID;
reg[7:0] m_axi_buf_r_WDATA;
reg m_axi_buf_r_ARVALID;
reg[31:0] m_axi_buf_r_ARADDR;
reg m_axi_buf_r_RREADY;
reg m_axi_buf_r_BREADY;
reg m_axi_key_ARVALID;
reg[31:0] m_axi_key_ARADDR;
reg m_axi_key_RREADY;
reg m_axi_cpk_AWVALID;
reg[31:0] m_axi_cpk_AWADDR;
reg m_axi_cpk_WVALID;
reg[7:0] m_axi_cpk_WDATA;
reg m_axi_cpk_BREADY;

(* fsm_encoding = "none" *) reg   [65:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buf_r_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    buf_r_blk_n_R;
wire    ap_CS_fsm_state10;
reg    buf_r_blk_n_AW;
wire    ap_CS_fsm_state11;
reg    buf_r_blk_n_W;
wire    ap_CS_fsm_state12;
reg    buf_r_blk_n_B;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state64;
reg    key_blk_n_AR;
reg    key_blk_n_R;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state60;
reg    cpk_blk_n_AW;
reg    cpk_blk_n_W;
reg    cpk_blk_n_B;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state66;
reg   [31:0] key_addr_reg_789;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_426_p2;
reg   [31:0] cpk_addr_reg_795;
reg   [31:0] buf_addr_reg_801;
reg   [7:0] key_addr_read_reg_808;
reg    ap_block_state10;
reg   [7:0] buf_addr_read_reg_814;
wire   [7:0] tmp_24_fu_469_p2;
reg   [7:0] tmp_24_reg_819;
reg    ap_sig_ioackin_m_axi_cpk_AWREADY;
reg    ap_sig_ioackin_m_axi_buf_r_AWREADY;
reg    ap_block_state11_io;
reg   [31:0] key_addr_1_reg_824;
reg    ap_block_state17;
reg   [31:0] cpk_addr_1_reg_830;
reg   [31:0] key_addr_2_reg_836;
reg   [31:0] cpk_addr_2_reg_842;
reg   [31:0] buf_addr_28_reg_848;
reg   [7:0] key_addr_1_read_reg_855;
reg    ap_block_state25;
reg   [7:0] buf_addr_28_read_reg_860;
reg   [7:0] key_addr_2_read_reg_865;
wire   [7:0] tmp_67_1_fu_552_p2;
reg   [7:0] tmp_67_1_reg_871;
reg    ap_block_state27_io;
reg   [31:0] key_addr_3_reg_876;
reg    ap_block_state33;
reg   [31:0] cpk_addr_3_reg_882;
reg   [31:0] key_addr_4_reg_888;
reg   [31:0] cpk_addr_4_reg_894;
reg   [31:0] buf_addr_29_reg_900;
reg   [31:0] key_addr_5_reg_907;
reg   [31:0] cpk_addr_5_reg_913;
wire   [4:0] i_10_3_fu_667_p2;
reg   [4:0] i_10_3_reg_919;
reg   [31:0] key_addr_6_reg_924;
reg   [31:0] cpk_addr_6_reg_930;
reg   [31:0] buf_addr_30_reg_936;
reg   [31:0] key_addr_7_reg_943;
reg   [31:0] cpk_addr_7_reg_949;
reg   [7:0] key_addr_3_read_reg_955;
reg    ap_block_state41;
reg   [7:0] buf_addr_29_read_reg_960;
reg   [7:0] key_addr_4_read_reg_965;
reg    ap_sig_ioackin_m_axi_key_ARREADY;
wire   [7:0] tmp_67_2_fu_746_p2;
reg   [7:0] tmp_67_2_reg_971;
reg    ap_block_state43_io;
reg   [7:0] key_addr_5_read_reg_976;
reg    ap_block_state49;
reg   [7:0] key_addr_6_read_reg_981;
reg    ap_block_state57;
reg   [7:0] buf_addr_30_read_reg_987;
wire   [7:0] tmp_67_3_fu_750_p2;
reg   [7:0] tmp_67_3_reg_992;
reg    ap_block_state58_io;
reg   [7:0] key_addr_7_read_reg_997;
reg   [4:0] i_reg_404;
wire   [31:0] sum6_fu_436_p2;
wire   [31:0] sum15_fu_447_p2;
wire   [31:0] sum_fu_458_p2;
wire   [31:0] sum7_fu_483_p2;
wire   [31:0] sum16_fu_494_p2;
wire   [31:0] sum8_fu_519_p2;
wire   [31:0] sum17_fu_530_p2;
wire   [31:0] sum1_fu_541_p2;
wire   [31:0] sum9_fu_566_p2;
wire   [31:0] sum18_fu_577_p2;
wire   [31:0] sum10_fu_602_p2;
wire   [31:0] sum19_fu_613_p2;
wire   [31:0] sum2_fu_624_p2;
wire   [31:0] sum11_fu_645_p2;
wire   [31:0] sum20_fu_656_p2;
wire   [31:0] sum12_fu_681_p2;
wire   [31:0] sum21_fu_692_p2;
wire   [31:0] sum3_fu_703_p2;
wire   [31:0] sum13_fu_724_p2;
wire   [31:0] sum22_fu_735_p2;
reg    ap_reg_ioackin_m_axi_key_ARREADY;
reg    ap_sig_ioackin_m_axi_buf_r_ARREADY;
reg    ap_block_state3_io;
reg    ap_reg_ioackin_m_axi_buf_r_ARREADY;
reg    ap_reg_ioackin_m_axi_buf_r_AWREADY;
reg    ap_reg_ioackin_m_axi_cpk_AWREADY;
reg    ap_reg_ioackin_m_axi_cpk_WREADY;
reg    ap_sig_ioackin_m_axi_cpk_WREADY;
reg    ap_sig_ioackin_m_axi_buf_r_WREADY;
reg    ap_block_state12_io;
reg    ap_reg_ioackin_m_axi_buf_r_WREADY;
reg    ap_block_state18_io;
reg    ap_block_state28_io;
reg    ap_block_state34_io;
reg    ap_block_state44_io;
reg    ap_block_state50_io;
reg    ap_block_state64;
reg    ap_block_state59_io;
wire   [4:0] i_s_fu_416_p2;
wire  signed [7:0] i_cast_fu_422_p1;
wire   [31:0] tmp_s_fu_432_p1;
wire   [4:0] sum5_fu_473_p2;
wire   [31:0] sum5_cast_fu_479_p1;
wire   [4:0] i_10_1_fu_505_p2;
wire  signed [7:0] i_10_1_cast_fu_511_p1;
wire   [31:0] tmp_1_fu_515_p1;
wire   [4:0] sum5_1_fu_556_p2;
wire   [31:0] sum5_1_cast_fu_562_p1;
wire   [4:0] i_10_2_fu_588_p2;
wire  signed [7:0] i_10_2_cast_fu_594_p1;
wire   [31:0] tmp_2_fu_598_p1;
wire   [4:0] sum5_2_fu_635_p2;
wire   [31:0] sum5_2_cast_fu_641_p1;
wire  signed [7:0] i_10_3_cast_fu_673_p1;
wire   [31:0] tmp_3_fu_677_p1;
wire   [4:0] sum5_3_fu_714_p2;
wire   [31:0] sum5_3_cast_fu_720_p1;
reg   [65:0] ap_NS_fsm;
reg    ap_condition_825;

// power-on initialization
initial begin
#0 ap_CS_fsm = 66'd1;
#0 ap_reg_ioackin_m_axi_key_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_buf_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_buf_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_cpk_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_cpk_WREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_buf_r_WREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_buf_r_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state18) & (ap_block_state18_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state34) & (ap_block_state34_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state50) & (ap_block_state50_io == 1'b0)))) begin
            ap_reg_ioackin_m_axi_buf_r_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == m_axi_buf_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == m_axi_buf_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b1 == m_axi_buf_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state50) & (1'b1 == m_axi_buf_r_ARREADY)))) begin
            ap_reg_ioackin_m_axi_buf_r_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_buf_r_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state11) & (ap_block_state11_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state27) & (ap_block_state27_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state43) & (ap_block_state43_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state58) & (ap_block_state58_io == 1'b0)))) begin
            ap_reg_ioackin_m_axi_buf_r_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state11) & (1'b1 == m_axi_buf_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b1 == m_axi_buf_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state43) & (1'b1 == m_axi_buf_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state58) & (1'b1 == m_axi_buf_r_AWREADY)))) begin
            ap_reg_ioackin_m_axi_buf_r_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_buf_r_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state12) & (ap_block_state12_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state28) & (ap_block_state28_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state44) & (ap_block_state44_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state59) & (ap_block_state59_io == 1'b0)))) begin
            ap_reg_ioackin_m_axi_buf_r_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state12) & (1'b1 == m_axi_buf_r_WREADY)) | ((1'b1 == ap_CS_fsm_state28) & (1'b1 == m_axi_buf_r_WREADY)) | ((1'b1 == ap_CS_fsm_state44) & (1'b1 == m_axi_buf_r_WREADY)) | ((1'b1 == ap_CS_fsm_state59) & (1'b1 == m_axi_buf_r_WREADY)))) begin
            ap_reg_ioackin_m_axi_buf_r_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_cpk_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state11) & (ap_block_state11_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state27) & (ap_block_state27_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state43) & (ap_block_state43_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state58) & (ap_block_state58_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state60) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY))) | ((1'b1 == ap_CS_fsm_state45) & (ap_sig_ioackin_m_axi_cpk_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (ap_sig_ioackin_m_axi_cpk_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_cpk_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state11) & (1'b1 == m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b1 == m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state43) & (1'b1 == m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state45) & (1'b1 == m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state47) & (1'b1 == m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state49) & (1'b1 == m_axi_cpk_AWREADY) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state58) & (1'b1 == m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_key_RVALID == 1'b1) & (1'b1 == m_axi_cpk_AWREADY)))) begin
            ap_reg_ioackin_m_axi_cpk_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_cpk_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state12) & (ap_block_state12_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state28) & (ap_block_state28_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state44) & (ap_block_state44_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state46) & (ap_sig_ioackin_m_axi_cpk_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (ap_sig_ioackin_m_axi_cpk_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state50) & (ap_block_state50_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state59) & (ap_block_state59_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state61) & (ap_sig_ioackin_m_axi_cpk_WREADY == 1'b1)))) begin
            ap_reg_ioackin_m_axi_cpk_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state12) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state28) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state44) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state46) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state48) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state50) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state59) & (1'b1 == m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state61) & (1'b1 == m_axi_cpk_WREADY)))) begin
            ap_reg_ioackin_m_axi_cpk_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_key_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state42) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY))) | ((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state18) & (ap_block_state18_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_m_axi_key_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (ap_block_state34_io == 1'b0)) | ((1'b1 == ap_CS_fsm_state35) & (ap_sig_ioackin_m_axi_key_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY))) | ((1'b1 == ap_CS_fsm_state50) & (ap_block_state50_io == 1'b0)))) begin
            ap_reg_ioackin_m_axi_key_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state19) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state35) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state42) & (m_axi_key_RVALID == 1'b1) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state50) & (1'b1 == m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_cpk_BVALID == 1'b1) & (1'b1 == m_axi_key_ARREADY)))) begin
            ap_reg_ioackin_m_axi_key_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (m_axi_cpk_BVALID == 1'b1))) begin
        i_reg_404 <= i_10_3_reg_919;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_404 <= 5'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
        buf_addr_28_read_reg_860 <= m_axi_buf_r_RDATA;
        key_addr_1_read_reg_855 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
        buf_addr_28_reg_848 <= sum1_fu_541_p2;
        cpk_addr_1_reg_830 <= sum16_fu_494_p2;
        cpk_addr_2_reg_842 <= sum17_fu_530_p2;
        key_addr_1_reg_824 <= sum7_fu_483_p2;
        key_addr_2_reg_836 <= sum8_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
        buf_addr_29_read_reg_960 <= m_axi_buf_r_RDATA;
        key_addr_3_read_reg_955 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
        buf_addr_29_reg_900 <= sum2_fu_624_p2;
        buf_addr_30_reg_936 <= sum3_fu_703_p2;
        cpk_addr_3_reg_882 <= sum18_fu_577_p2;
        cpk_addr_4_reg_894 <= sum19_fu_613_p2;
        cpk_addr_5_reg_913 <= sum20_fu_656_p2;
        cpk_addr_6_reg_930 <= sum21_fu_692_p2;
        cpk_addr_7_reg_949 <= sum22_fu_735_p2;
        i_10_3_reg_919 <= i_10_3_fu_667_p2;
        key_addr_3_reg_876 <= sum9_fu_566_p2;
        key_addr_4_reg_888 <= sum10_fu_602_p2;
        key_addr_5_reg_907 <= sum11_fu_645_p2;
        key_addr_6_reg_924 <= sum12_fu_681_p2;
        key_addr_7_reg_943 <= sum13_fu_724_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state57) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
        buf_addr_30_read_reg_987 <= m_axi_buf_r_RDATA;
        key_addr_6_read_reg_981 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
        buf_addr_read_reg_814 <= m_axi_buf_r_RDATA;
        key_addr_read_reg_808 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_426_p2))) begin
        buf_addr_reg_801 <= sum_fu_458_p2;
        cpk_addr_reg_795 <= sum15_fu_447_p2;
        key_addr_reg_789 <= sum6_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (m_axi_key_RVALID == 1'b1))) begin
        key_addr_2_read_reg_865 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY)))) begin
        key_addr_4_read_reg_965 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
        key_addr_5_read_reg_976 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY)))) begin
        key_addr_7_read_reg_997 <= m_axi_key_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (ap_block_state11_io == 1'b0))) begin
        tmp_24_reg_819 <= tmp_24_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & (ap_block_state27_io == 1'b0))) begin
        tmp_67_1_reg_871 <= tmp_67_1_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (ap_block_state43_io == 1'b0))) begin
        tmp_67_2_reg_971 <= tmp_67_2_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (ap_block_state58_io == 1'b0))) begin
        tmp_67_3_reg_992 <= tmp_67_3_fu_750_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_fu_426_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_426_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_buf_r_ARREADY = m_axi_buf_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_buf_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)) begin
        ap_sig_ioackin_m_axi_buf_r_AWREADY = m_axi_buf_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_buf_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)) begin
        ap_sig_ioackin_m_axi_buf_r_WREADY = m_axi_buf_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_buf_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) begin
        ap_sig_ioackin_m_axi_cpk_AWREADY = m_axi_cpk_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_cpk_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) begin
        ap_sig_ioackin_m_axi_cpk_WREADY = m_axi_cpk_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_cpk_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) begin
        ap_sig_ioackin_m_axi_key_ARREADY = m_axi_key_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_key_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state50))) begin
        buf_r_blk_n_AR = m_axi_buf_r_ARREADY;
    end else begin
        buf_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state58))) begin
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY;
    end else begin
        buf_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state64))) begin
        buf_r_blk_n_B = m_axi_buf_r_BVALID;
    end else begin
        buf_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state57))) begin
        buf_r_blk_n_R = m_axi_buf_r_RVALID;
    end else begin
        buf_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state59))) begin
        buf_r_blk_n_W = m_axi_buf_r_WREADY;
    end else begin
        buf_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state47))) begin
        cpk_blk_n_AW = m_axi_cpk_AWREADY;
    end else begin
        cpk_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state66))) begin
        cpk_blk_n_B = m_axi_cpk_BVALID;
    end else begin
        cpk_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state61))) begin
        cpk_blk_n_W = m_axi_cpk_WREADY;
    end else begin
        cpk_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state53))) begin
        key_blk_n_AR = m_axi_key_ARREADY;
    end else begin
        key_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state60))) begin
        key_blk_n_R = m_axi_key_RVALID;
    end else begin
        key_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_buf_r_ARADDR = buf_addr_30_reg_936;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            m_axi_buf_r_ARADDR = buf_addr_29_reg_900;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            m_axi_buf_r_ARADDR = buf_addr_28_reg_848;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_buf_r_ARADDR = buf_addr_reg_801;
        end else begin
            m_axi_buf_r_ARADDR = 'bx;
        end
    end else begin
        m_axi_buf_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state50) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)))) begin
        m_axi_buf_r_ARVALID = 1'b1;
    end else begin
        m_axi_buf_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state58)) begin
            m_axi_buf_r_AWADDR = buf_addr_30_reg_936;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            m_axi_buf_r_AWADDR = buf_addr_29_reg_900;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            m_axi_buf_r_AWADDR = buf_addr_28_reg_848;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            m_axi_buf_r_AWADDR = buf_addr_reg_801;
        end else begin
            m_axi_buf_r_AWADDR = 'bx;
        end
    end else begin
        m_axi_buf_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state43) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)) | ((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)))) begin
        m_axi_buf_r_AWVALID = 1'b1;
    end else begin
        m_axi_buf_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state33) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state64) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))))) begin
        m_axi_buf_r_BREADY = 1'b1;
    end else begin
        m_axi_buf_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state41) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state57) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))))) begin
        m_axi_buf_r_RREADY = 1'b1;
    end else begin
        m_axi_buf_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state59)) begin
            m_axi_buf_r_WDATA = tmp_67_3_reg_992;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_buf_r_WDATA = tmp_67_2_reg_971;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            m_axi_buf_r_WDATA = tmp_67_1_reg_871;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            m_axi_buf_r_WDATA = tmp_24_reg_819;
        end else begin
            m_axi_buf_r_WDATA = 'bx;
        end
    end else begin
        m_axi_buf_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)) | ((1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)) | ((1'b1 == ap_CS_fsm_state59) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)))) begin
        m_axi_buf_r_WVALID = 1'b1;
    end else begin
        m_axi_buf_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) begin
        if (((1'b1 == ap_CS_fsm_state60) & (m_axi_key_RVALID == 1'b1))) begin
            m_axi_cpk_AWADDR = cpk_addr_7_reg_949;
        end else if ((1'b1 == ap_CS_fsm_state58)) begin
            m_axi_cpk_AWADDR = cpk_addr_6_reg_930;
        end else if ((ap_condition_825 == 1'b1)) begin
            m_axi_cpk_AWADDR = cpk_addr_5_reg_913;
        end else if ((1'b1 == ap_CS_fsm_state47)) begin
            m_axi_cpk_AWADDR = cpk_addr_4_reg_894;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            m_axi_cpk_AWADDR = cpk_addr_3_reg_882;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            m_axi_cpk_AWADDR = cpk_addr_2_reg_842;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            m_axi_cpk_AWADDR = cpk_addr_1_reg_830;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            m_axi_cpk_AWADDR = cpk_addr_reg_795;
        end else begin
            m_axi_cpk_AWADDR = 'bx;
        end
    end else begin
        m_axi_cpk_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state43) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state45) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state47) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state49) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state58) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)) | ((1'b1 == ap_CS_fsm_state60) & (m_axi_key_RVALID == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_cpk_AWREADY)))) begin
        m_axi_cpk_AWVALID = 1'b1;
    end else begin
        m_axi_cpk_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state17) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state33) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state66) & (m_axi_cpk_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state51) & (m_axi_cpk_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY))) | ((1'b1 == ap_CS_fsm_state55) & (m_axi_cpk_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))))) begin
        m_axi_cpk_BREADY = 1'b1;
    end else begin
        m_axi_cpk_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            m_axi_cpk_WDATA = key_addr_7_read_reg_997;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            m_axi_cpk_WDATA = key_addr_6_read_reg_981;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_cpk_WDATA = key_addr_5_read_reg_976;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            m_axi_cpk_WDATA = key_addr_4_read_reg_965;
        end else if ((1'b1 == ap_CS_fsm_state46)) begin
            m_axi_cpk_WDATA = key_addr_3_read_reg_955;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_cpk_WDATA = key_addr_2_read_reg_865;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            m_axi_cpk_WDATA = key_addr_1_read_reg_855;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            m_axi_cpk_WDATA = key_addr_read_reg_808;
        end else begin
            m_axi_cpk_WDATA = 'bx;
        end
    end else begin
        m_axi_cpk_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state28) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state46) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state48) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state50) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state59) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)) | ((1'b1 == ap_CS_fsm_state61) & (1'b0 == ap_reg_ioackin_m_axi_cpk_WREADY)))) begin
        m_axi_cpk_WVALID = 1'b1;
    end else begin
        m_axi_cpk_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) begin
        if (((1'b1 == ap_CS_fsm_state53) & (m_axi_cpk_BVALID == 1'b1))) begin
            m_axi_key_ARADDR = key_addr_7_reg_943;
        end else if ((1'b1 == ap_CS_fsm_state50)) begin
            m_axi_key_ARADDR = key_addr_6_reg_924;
        end else if (((1'b1 == ap_CS_fsm_state42) & (m_axi_key_RVALID == 1'b1))) begin
            m_axi_key_ARADDR = key_addr_5_reg_907;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            m_axi_key_ARADDR = key_addr_4_reg_888;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            m_axi_key_ARADDR = key_addr_3_reg_876;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            m_axi_key_ARADDR = key_addr_2_reg_836;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            m_axi_key_ARADDR = key_addr_1_reg_824;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_key_ARADDR = key_addr_reg_789;
        end else begin
            m_axi_key_ARADDR = 'bx;
        end
    end else begin
        m_axi_key_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state19) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state35) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state42) & (m_axi_key_RVALID == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state50) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) | ((1'b1 == ap_CS_fsm_state53) & (m_axi_cpk_BVALID == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)))) begin
        m_axi_key_ARVALID = 1'b1;
    end else begin
        m_axi_key_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state26) & (m_axi_key_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state42) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY))) | ((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID))) | ((1'b1 == ap_CS_fsm_state57) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID))) | ((1'b1 == ap_CS_fsm_state60) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY))))) begin
        m_axi_key_RREADY = 1'b1;
    end else begin
        m_axi_key_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_426_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (ap_block_state3_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (ap_block_state11_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (ap_block_state12_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_block_state18_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (ap_sig_ioackin_m_axi_key_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (m_axi_key_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (ap_block_state27_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (ap_block_state28_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (ap_block_state34_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (ap_sig_ioackin_m_axi_key_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (ap_block_state43_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (ap_block_state44_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (ap_sig_ioackin_m_axi_cpk_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (ap_sig_ioackin_m_axi_cpk_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (ap_sig_ioackin_m_axi_cpk_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (ap_sig_ioackin_m_axi_cpk_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (ap_block_state50_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (m_axi_cpk_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (m_axi_cpk_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (((1'b1 == ap_CS_fsm_state58) & (ap_block_state58_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((1'b1 == ap_CS_fsm_state59) & (ap_block_state59_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            if (((1'b1 == ap_CS_fsm_state60) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (ap_sig_ioackin_m_axi_cpk_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & ~((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            if (((1'b1 == ap_CS_fsm_state66) & (m_axi_cpk_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

always @ (*) begin
    ap_block_state10 = ((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID));
end

always @ (*) begin
    ap_block_state11_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_AWREADY));
end

always @ (*) begin
    ap_block_state12_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_WREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_WREADY));
end

always @ (*) begin
    ap_block_state17 = ((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID));
end

always @ (*) begin
    ap_block_state18_io = ((1'b0 == ap_sig_ioackin_m_axi_key_ARREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_ARREADY));
end

always @ (*) begin
    ap_block_state25 = ((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID));
end

always @ (*) begin
    ap_block_state27_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_AWREADY));
end

always @ (*) begin
    ap_block_state28_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_WREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_WREADY));
end

always @ (*) begin
    ap_block_state33 = ((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID));
end

always @ (*) begin
    ap_block_state34_io = ((1'b0 == ap_sig_ioackin_m_axi_key_ARREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_ARREADY));
end

always @ (*) begin
    ap_block_state3_io = ((1'b0 == ap_sig_ioackin_m_axi_key_ARREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_ARREADY));
end

always @ (*) begin
    ap_block_state41 = ((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID));
end

always @ (*) begin
    ap_block_state43_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_AWREADY));
end

always @ (*) begin
    ap_block_state44_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_WREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_WREADY));
end

always @ (*) begin
    ap_block_state49 = ((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID));
end

always @ (*) begin
    ap_block_state50_io = ((1'b0 == ap_sig_ioackin_m_axi_key_ARREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_ARREADY) | (1'b0 == ap_sig_ioackin_m_axi_cpk_WREADY));
end

always @ (*) begin
    ap_block_state57 = ((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_buf_r_RVALID));
end

always @ (*) begin
    ap_block_state58_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_AWREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_AWREADY));
end

always @ (*) begin
    ap_block_state59_io = ((1'b0 == ap_sig_ioackin_m_axi_cpk_WREADY) | (1'b0 == ap_sig_ioackin_m_axi_buf_r_WREADY));
end

always @ (*) begin
    ap_block_state64 = ((1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID));
end

always @ (*) begin
    ap_condition_825 = ((1'b1 == ap_CS_fsm_state49) & ~((1'b0 == m_axi_key_RVALID) | (1'b0 == m_axi_cpk_BVALID) | (1'b0 == m_axi_buf_r_BVALID)));
end

assign i_10_1_cast_fu_511_p1 = $signed(i_10_1_fu_505_p2);

assign i_10_1_fu_505_p2 = ($signed(i_reg_404) + $signed(5'd30));

assign i_10_2_cast_fu_594_p1 = $signed(i_10_2_fu_588_p2);

assign i_10_2_fu_588_p2 = ($signed(i_reg_404) + $signed(5'd29));

assign i_10_3_cast_fu_673_p1 = $signed(i_10_3_fu_667_p2);

assign i_10_3_fu_667_p2 = ($signed(i_reg_404) + $signed(5'd28));

assign i_cast_fu_422_p1 = $signed(i_s_fu_416_p2);

assign i_s_fu_416_p2 = ($signed(i_reg_404) + $signed(5'd31));

assign m_axi_buf_r_ARBURST = 2'd0;

assign m_axi_buf_r_ARCACHE = 4'd0;

assign m_axi_buf_r_ARID = 1'd0;

assign m_axi_buf_r_ARLEN = 32'd1;

assign m_axi_buf_r_ARLOCK = 2'd0;

assign m_axi_buf_r_ARPROT = 3'd0;

assign m_axi_buf_r_ARQOS = 4'd0;

assign m_axi_buf_r_ARREGION = 4'd0;

assign m_axi_buf_r_ARSIZE = 3'd0;

assign m_axi_buf_r_ARUSER = 1'd0;

assign m_axi_buf_r_AWBURST = 2'd0;

assign m_axi_buf_r_AWCACHE = 4'd0;

assign m_axi_buf_r_AWID = 1'd0;

assign m_axi_buf_r_AWLEN = 32'd1;

assign m_axi_buf_r_AWLOCK = 2'd0;

assign m_axi_buf_r_AWPROT = 3'd0;

assign m_axi_buf_r_AWQOS = 4'd0;

assign m_axi_buf_r_AWREGION = 4'd0;

assign m_axi_buf_r_AWSIZE = 3'd0;

assign m_axi_buf_r_AWUSER = 1'd0;

assign m_axi_buf_r_WID = 1'd0;

assign m_axi_buf_r_WLAST = 1'b0;

assign m_axi_buf_r_WSTRB = 1'd1;

assign m_axi_buf_r_WUSER = 1'd0;

assign m_axi_cpk_ARADDR = 32'd0;

assign m_axi_cpk_ARBURST = 2'd0;

assign m_axi_cpk_ARCACHE = 4'd0;

assign m_axi_cpk_ARID = 1'd0;

assign m_axi_cpk_ARLEN = 32'd0;

assign m_axi_cpk_ARLOCK = 2'd0;

assign m_axi_cpk_ARPROT = 3'd0;

assign m_axi_cpk_ARQOS = 4'd0;

assign m_axi_cpk_ARREGION = 4'd0;

assign m_axi_cpk_ARSIZE = 3'd0;

assign m_axi_cpk_ARUSER = 1'd0;

assign m_axi_cpk_ARVALID = 1'b0;

assign m_axi_cpk_AWBURST = 2'd0;

assign m_axi_cpk_AWCACHE = 4'd0;

assign m_axi_cpk_AWID = 1'd0;

assign m_axi_cpk_AWLEN = 32'd1;

assign m_axi_cpk_AWLOCK = 2'd0;

assign m_axi_cpk_AWPROT = 3'd0;

assign m_axi_cpk_AWQOS = 4'd0;

assign m_axi_cpk_AWREGION = 4'd0;

assign m_axi_cpk_AWSIZE = 3'd0;

assign m_axi_cpk_AWUSER = 1'd0;

assign m_axi_cpk_RREADY = 1'b0;

assign m_axi_cpk_WID = 1'd0;

assign m_axi_cpk_WLAST = 1'b0;

assign m_axi_cpk_WSTRB = 1'd1;

assign m_axi_cpk_WUSER = 1'd0;

assign m_axi_key_ARBURST = 2'd0;

assign m_axi_key_ARCACHE = 4'd0;

assign m_axi_key_ARID = 1'd0;

assign m_axi_key_ARLEN = 32'd1;

assign m_axi_key_ARLOCK = 2'd0;

assign m_axi_key_ARPROT = 3'd0;

assign m_axi_key_ARQOS = 4'd0;

assign m_axi_key_ARREGION = 4'd0;

assign m_axi_key_ARSIZE = 3'd0;

assign m_axi_key_ARUSER = 1'd0;

assign m_axi_key_AWADDR = 32'd0;

assign m_axi_key_AWBURST = 2'd0;

assign m_axi_key_AWCACHE = 4'd0;

assign m_axi_key_AWID = 1'd0;

assign m_axi_key_AWLEN = 32'd0;

assign m_axi_key_AWLOCK = 2'd0;

assign m_axi_key_AWPROT = 3'd0;

assign m_axi_key_AWQOS = 4'd0;

assign m_axi_key_AWREGION = 4'd0;

assign m_axi_key_AWSIZE = 3'd0;

assign m_axi_key_AWUSER = 1'd0;

assign m_axi_key_AWVALID = 1'b0;

assign m_axi_key_BREADY = 1'b0;

assign m_axi_key_WDATA = 8'd0;

assign m_axi_key_WID = 1'd0;

assign m_axi_key_WLAST = 1'b0;

assign m_axi_key_WSTRB = 1'd0;

assign m_axi_key_WUSER = 1'd0;

assign m_axi_key_WVALID = 1'b0;

assign sum10_fu_602_p2 = (key_offset + tmp_2_fu_598_p1);

assign sum11_fu_645_p2 = (key_offset + sum5_2_cast_fu_641_p1);

assign sum12_fu_681_p2 = (key_offset + tmp_3_fu_677_p1);

assign sum13_fu_724_p2 = (key_offset + sum5_3_cast_fu_720_p1);

assign sum15_fu_447_p2 = (cpk_offset + tmp_s_fu_432_p1);

assign sum16_fu_494_p2 = (cpk_offset + sum5_cast_fu_479_p1);

assign sum17_fu_530_p2 = (cpk_offset + tmp_1_fu_515_p1);

assign sum18_fu_577_p2 = (cpk_offset + sum5_1_cast_fu_562_p1);

assign sum19_fu_613_p2 = (cpk_offset + tmp_2_fu_598_p1);

assign sum1_fu_541_p2 = (buf_offset + tmp_1_fu_515_p1);

assign sum20_fu_656_p2 = (cpk_offset + sum5_2_cast_fu_641_p1);

assign sum21_fu_692_p2 = (cpk_offset + tmp_3_fu_677_p1);

assign sum22_fu_735_p2 = (cpk_offset + sum5_3_cast_fu_720_p1);

assign sum2_fu_624_p2 = (buf_offset + tmp_2_fu_598_p1);

assign sum3_fu_703_p2 = (buf_offset + tmp_3_fu_677_p1);

assign sum5_1_cast_fu_562_p1 = sum5_1_fu_556_p2;

assign sum5_1_fu_556_p2 = (i_reg_404 + 5'd14);

assign sum5_2_cast_fu_641_p1 = sum5_2_fu_635_p2;

assign sum5_2_fu_635_p2 = (i_reg_404 + 5'd13);

assign sum5_3_cast_fu_720_p1 = sum5_3_fu_714_p2;

assign sum5_3_fu_714_p2 = (i_reg_404 + 5'd12);

assign sum5_cast_fu_479_p1 = sum5_fu_473_p2;

assign sum5_fu_473_p2 = (i_reg_404 + 5'd15);

assign sum6_fu_436_p2 = (key_offset + tmp_s_fu_432_p1);

assign sum7_fu_483_p2 = (key_offset + sum5_cast_fu_479_p1);

assign sum8_fu_519_p2 = (key_offset + tmp_1_fu_515_p1);

assign sum9_fu_566_p2 = (key_offset + sum5_1_cast_fu_562_p1);

assign sum_fu_458_p2 = (buf_offset + tmp_s_fu_432_p1);

assign tmp_1_fu_515_p1 = $unsigned(i_10_1_cast_fu_511_p1);

assign tmp_24_fu_469_p2 = (buf_addr_read_reg_814 ^ key_addr_read_reg_808);

assign tmp_2_fu_598_p1 = $unsigned(i_10_2_cast_fu_594_p1);

assign tmp_3_fu_677_p1 = $unsigned(i_10_3_cast_fu_673_p1);

assign tmp_67_1_fu_552_p2 = (buf_addr_28_read_reg_860 ^ key_addr_2_read_reg_865);

assign tmp_67_2_fu_746_p2 = (buf_addr_29_read_reg_960 ^ key_addr_4_read_reg_965);

assign tmp_67_3_fu_750_p2 = (buf_addr_30_read_reg_987 ^ key_addr_6_read_reg_981);

assign tmp_fu_426_p2 = ((i_reg_404 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_432_p1 = $unsigned(i_cast_fu_422_p1);

endmodule //a0_aes_addRoundKey_cpy
