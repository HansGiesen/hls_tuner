// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_aes_addRoundKey_cpy.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_aes_addRoundKey_cpy::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_aes_addRoundKey_cpy::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state1 = "1";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state2 = "10";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state3 = "100";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state4 = "1000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state5 = "10000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state6 = "100000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state7 = "1000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state8 = "10000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state9 = "100000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state10 = "1000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state11 = "10000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state12 = "100000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<66> a0_aes_addRoundKey_cpy::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> a0_aes_addRoundKey_cpy::ap_const_lv1_0 = "0";
const sc_lv<3> a0_aes_addRoundKey_cpy::ap_const_lv3_0 = "000";
const sc_lv<2> a0_aes_addRoundKey_cpy::ap_const_lv2_0 = "00";
const sc_lv<4> a0_aes_addRoundKey_cpy::ap_const_lv4_0 = "0000";
const sc_lv<8> a0_aes_addRoundKey_cpy::ap_const_lv8_0 = "00000000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2 = "10";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_9 = "1001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_A = "1010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_B = "1011";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_10 = "10000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_11 = "10001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_18 = "11000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_1A = "11010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_1B = "11011";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_20 = "100000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_21 = "100001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_28 = "101000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2A = "101010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2B = "101011";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_30 = "110000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_31 = "110001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_38 = "111000";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_39 = "111001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_3A = "111010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_3F = "111111";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_12 = "10010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_19 = "11001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_22 = "100010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_29 = "101001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_34 = "110100";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_3B = "111011";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2C = "101100";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2D = "101101";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_32 = "110010";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2E = "101110";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_2F = "101111";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_36 = "110110";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_3C = "111100";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_41 = "1000001";
const sc_lv<32> a0_aes_addRoundKey_cpy::ap_const_lv32_1 = "1";
const bool a0_aes_addRoundKey_cpy::ap_const_boolean_0 = false;
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_10 = "10000";
const sc_lv<1> a0_aes_addRoundKey_cpy::ap_const_lv1_1 = "1";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_1F = "11111";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_0 = "00000";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_F = "1111";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_1E = "11110";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_E = "1110";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_1D = "11101";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_D = "1101";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_1C = "11100";
const sc_lv<5> a0_aes_addRoundKey_cpy::ap_const_lv5_C = "1100";
const bool a0_aes_addRoundKey_cpy::ap_const_boolean_1 = true;

a0_aes_addRoundKey_cpy::a0_aes_addRoundKey_cpy(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state42);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state55);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state61);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state64);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state66);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state10);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_key_RVALID );

    SC_METHOD(thread_ap_block_state11_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_block_state12_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_WREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_block_state17);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_cpk_BVALID );

    SC_METHOD(thread_ap_block_state18_io);
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_block_state25);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_key_RVALID );

    SC_METHOD(thread_ap_block_state27_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_block_state28_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_WREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_block_state33);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_cpk_BVALID );

    SC_METHOD(thread_ap_block_state34_io);
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_block_state41);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_key_RVALID );

    SC_METHOD(thread_ap_block_state43_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_block_state44_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_WREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_block_state49);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );

    SC_METHOD(thread_ap_block_state50_io);
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_cpk_WREADY );

    SC_METHOD(thread_ap_block_state57);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_key_RVALID );

    SC_METHOD(thread_ap_block_state58_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_block_state59_io);
    sensitive << ( ap_sig_ioackin_m_axi_cpk_WREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_block_state64);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_cpk_BVALID );

    SC_METHOD(thread_ap_condition_825);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state49 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_426_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_426_p2 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_ARREADY);
    sensitive << ( m_axi_buf_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_AWREADY);
    sensitive << ( m_axi_buf_r_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_WREADY);
    sensitive << ( m_axi_buf_r_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_cpk_AWREADY);
    sensitive << ( m_axi_cpk_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_cpk_WREADY);
    sensitive << ( m_axi_cpk_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_key_ARREADY);
    sensitive << ( m_axi_key_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_buf_r_blk_n_AR);
    sensitive << ( m_axi_buf_r_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );

    SC_METHOD(thread_buf_r_blk_n_AW);
    sensitive << ( m_axi_buf_r_AWREADY );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_buf_r_blk_n_B);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state64 );

    SC_METHOD(thread_buf_r_blk_n_R);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state57 );

    SC_METHOD(thread_buf_r_blk_n_W);
    sensitive << ( m_axi_buf_r_WREADY );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state59 );

    SC_METHOD(thread_cpk_blk_n_AW);
    sensitive << ( m_axi_cpk_AWREADY );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );

    SC_METHOD(thread_cpk_blk_n_B);
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state64 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state66 );

    SC_METHOD(thread_cpk_blk_n_W);
    sensitive << ( m_axi_cpk_WREADY );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state61 );

    SC_METHOD(thread_i_10_1_cast_fu_511_p1);
    sensitive << ( i_10_1_fu_505_p2 );

    SC_METHOD(thread_i_10_1_fu_505_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_i_10_2_cast_fu_594_p1);
    sensitive << ( i_10_2_fu_588_p2 );

    SC_METHOD(thread_i_10_2_fu_588_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_i_10_3_cast_fu_673_p1);
    sensitive << ( i_10_3_fu_667_p2 );

    SC_METHOD(thread_i_10_3_fu_667_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_i_cast_fu_422_p1);
    sensitive << ( i_s_fu_416_p2 );

    SC_METHOD(thread_i_s_fu_416_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_key_blk_n_AR);
    sensitive << ( m_axi_key_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state53 );

    SC_METHOD(thread_key_blk_n_R);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state60 );

    SC_METHOD(thread_m_axi_buf_r_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( buf_addr_reg_801 );
    sensitive << ( buf_addr_28_reg_848 );
    sensitive << ( buf_addr_29_reg_900 );
    sensitive << ( buf_addr_30_reg_936 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_m_axi_buf_r_ARBURST);

    SC_METHOD(thread_m_axi_buf_r_ARCACHE);

    SC_METHOD(thread_m_axi_buf_r_ARID);

    SC_METHOD(thread_m_axi_buf_r_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_m_axi_buf_r_ARLOCK);

    SC_METHOD(thread_m_axi_buf_r_ARPROT);

    SC_METHOD(thread_m_axi_buf_r_ARQOS);

    SC_METHOD(thread_m_axi_buf_r_ARREGION);

    SC_METHOD(thread_m_axi_buf_r_ARSIZE);

    SC_METHOD(thread_m_axi_buf_r_ARUSER);

    SC_METHOD(thread_m_axi_buf_r_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_m_axi_buf_r_AWADDR);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( buf_addr_reg_801 );
    sensitive << ( buf_addr_28_reg_848 );
    sensitive << ( buf_addr_29_reg_900 );
    sensitive << ( buf_addr_30_reg_936 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_AWBURST);

    SC_METHOD(thread_m_axi_buf_r_AWCACHE);

    SC_METHOD(thread_m_axi_buf_r_AWID);

    SC_METHOD(thread_m_axi_buf_r_AWLEN);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_AWLOCK);

    SC_METHOD(thread_m_axi_buf_r_AWPROT);

    SC_METHOD(thread_m_axi_buf_r_AWQOS);

    SC_METHOD(thread_m_axi_buf_r_AWREGION);

    SC_METHOD(thread_m_axi_buf_r_AWSIZE);

    SC_METHOD(thread_m_axi_buf_r_AWUSER);

    SC_METHOD(thread_m_axi_buf_r_AWVALID);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_BREADY);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state64 );
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_RREADY);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state57 );

    SC_METHOD(thread_m_axi_buf_r_WDATA);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( tmp_24_reg_819 );
    sensitive << ( tmp_67_1_reg_871 );
    sensitive << ( tmp_67_2_reg_971 );
    sensitive << ( tmp_67_3_reg_992 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_m_axi_buf_r_WID);

    SC_METHOD(thread_m_axi_buf_r_WLAST);

    SC_METHOD(thread_m_axi_buf_r_WSTRB);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_m_axi_buf_r_WUSER);

    SC_METHOD(thread_m_axi_buf_r_WVALID);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_m_axi_cpk_ARADDR);

    SC_METHOD(thread_m_axi_cpk_ARBURST);

    SC_METHOD(thread_m_axi_cpk_ARCACHE);

    SC_METHOD(thread_m_axi_cpk_ARID);

    SC_METHOD(thread_m_axi_cpk_ARLEN);

    SC_METHOD(thread_m_axi_cpk_ARLOCK);

    SC_METHOD(thread_m_axi_cpk_ARPROT);

    SC_METHOD(thread_m_axi_cpk_ARQOS);

    SC_METHOD(thread_m_axi_cpk_ARREGION);

    SC_METHOD(thread_m_axi_cpk_ARSIZE);

    SC_METHOD(thread_m_axi_cpk_ARUSER);

    SC_METHOD(thread_m_axi_cpk_ARVALID);

    SC_METHOD(thread_m_axi_cpk_AWADDR);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( cpk_addr_reg_795 );
    sensitive << ( cpk_addr_1_reg_830 );
    sensitive << ( cpk_addr_2_reg_842 );
    sensitive << ( cpk_addr_3_reg_882 );
    sensitive << ( cpk_addr_4_reg_894 );
    sensitive << ( cpk_addr_5_reg_913 );
    sensitive << ( cpk_addr_6_reg_930 );
    sensitive << ( cpk_addr_7_reg_949 );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_condition_825 );

    SC_METHOD(thread_m_axi_cpk_AWBURST);

    SC_METHOD(thread_m_axi_cpk_AWCACHE);

    SC_METHOD(thread_m_axi_cpk_AWID);

    SC_METHOD(thread_m_axi_cpk_AWLEN);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_AWREADY );

    SC_METHOD(thread_m_axi_cpk_AWLOCK);

    SC_METHOD(thread_m_axi_cpk_AWPROT);

    SC_METHOD(thread_m_axi_cpk_AWQOS);

    SC_METHOD(thread_m_axi_cpk_AWREGION);

    SC_METHOD(thread_m_axi_cpk_AWSIZE);

    SC_METHOD(thread_m_axi_cpk_AWUSER);

    SC_METHOD(thread_m_axi_cpk_AWVALID);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_AWREADY );

    SC_METHOD(thread_m_axi_cpk_BREADY);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state64 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state66 );
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_m_axi_cpk_RREADY);

    SC_METHOD(thread_m_axi_cpk_WDATA);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( key_addr_read_reg_808 );
    sensitive << ( key_addr_1_read_reg_855 );
    sensitive << ( key_addr_2_read_reg_865 );
    sensitive << ( key_addr_3_read_reg_955 );
    sensitive << ( key_addr_4_read_reg_965 );
    sensitive << ( key_addr_5_read_reg_976 );
    sensitive << ( key_addr_6_read_reg_981 );
    sensitive << ( key_addr_7_read_reg_997 );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_WREADY );

    SC_METHOD(thread_m_axi_cpk_WID);

    SC_METHOD(thread_m_axi_cpk_WLAST);

    SC_METHOD(thread_m_axi_cpk_WSTRB);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_WREADY );

    SC_METHOD(thread_m_axi_cpk_WUSER);

    SC_METHOD(thread_m_axi_cpk_WVALID);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_reg_ioackin_m_axi_cpk_WREADY );

    SC_METHOD(thread_m_axi_key_ARADDR);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( key_addr_reg_789 );
    sensitive << ( key_addr_1_reg_824 );
    sensitive << ( key_addr_2_reg_836 );
    sensitive << ( key_addr_3_reg_876 );
    sensitive << ( key_addr_4_reg_888 );
    sensitive << ( key_addr_5_reg_907 );
    sensitive << ( key_addr_6_reg_924 );
    sensitive << ( key_addr_7_reg_943 );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_m_axi_key_ARBURST);

    SC_METHOD(thread_m_axi_key_ARCACHE);

    SC_METHOD(thread_m_axi_key_ARID);

    SC_METHOD(thread_m_axi_key_ARLEN);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_m_axi_key_ARLOCK);

    SC_METHOD(thread_m_axi_key_ARPROT);

    SC_METHOD(thread_m_axi_key_ARQOS);

    SC_METHOD(thread_m_axi_key_ARREGION);

    SC_METHOD(thread_m_axi_key_ARSIZE);

    SC_METHOD(thread_m_axi_key_ARUSER);

    SC_METHOD(thread_m_axi_key_ARVALID);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_m_axi_key_AWADDR);

    SC_METHOD(thread_m_axi_key_AWBURST);

    SC_METHOD(thread_m_axi_key_AWCACHE);

    SC_METHOD(thread_m_axi_key_AWID);

    SC_METHOD(thread_m_axi_key_AWLEN);

    SC_METHOD(thread_m_axi_key_AWLOCK);

    SC_METHOD(thread_m_axi_key_AWPROT);

    SC_METHOD(thread_m_axi_key_AWQOS);

    SC_METHOD(thread_m_axi_key_AWREGION);

    SC_METHOD(thread_m_axi_key_AWSIZE);

    SC_METHOD(thread_m_axi_key_AWUSER);

    SC_METHOD(thread_m_axi_key_AWVALID);

    SC_METHOD(thread_m_axi_key_BREADY);

    SC_METHOD(thread_m_axi_key_RREADY);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_m_axi_key_WDATA);

    SC_METHOD(thread_m_axi_key_WID);

    SC_METHOD(thread_m_axi_key_WLAST);

    SC_METHOD(thread_m_axi_key_WSTRB);

    SC_METHOD(thread_m_axi_key_WUSER);

    SC_METHOD(thread_m_axi_key_WVALID);

    SC_METHOD(thread_sum10_fu_602_p2);
    sensitive << ( key_offset );
    sensitive << ( tmp_2_fu_598_p1 );

    SC_METHOD(thread_sum11_fu_645_p2);
    sensitive << ( key_offset );
    sensitive << ( sum5_2_cast_fu_641_p1 );

    SC_METHOD(thread_sum12_fu_681_p2);
    sensitive << ( key_offset );
    sensitive << ( tmp_3_fu_677_p1 );

    SC_METHOD(thread_sum13_fu_724_p2);
    sensitive << ( key_offset );
    sensitive << ( sum5_3_cast_fu_720_p1 );

    SC_METHOD(thread_sum15_fu_447_p2);
    sensitive << ( cpk_offset );
    sensitive << ( tmp_s_fu_432_p1 );

    SC_METHOD(thread_sum16_fu_494_p2);
    sensitive << ( cpk_offset );
    sensitive << ( sum5_cast_fu_479_p1 );

    SC_METHOD(thread_sum17_fu_530_p2);
    sensitive << ( cpk_offset );
    sensitive << ( tmp_1_fu_515_p1 );

    SC_METHOD(thread_sum18_fu_577_p2);
    sensitive << ( cpk_offset );
    sensitive << ( sum5_1_cast_fu_562_p1 );

    SC_METHOD(thread_sum19_fu_613_p2);
    sensitive << ( cpk_offset );
    sensitive << ( tmp_2_fu_598_p1 );

    SC_METHOD(thread_sum1_fu_541_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_1_fu_515_p1 );

    SC_METHOD(thread_sum20_fu_656_p2);
    sensitive << ( cpk_offset );
    sensitive << ( sum5_2_cast_fu_641_p1 );

    SC_METHOD(thread_sum21_fu_692_p2);
    sensitive << ( cpk_offset );
    sensitive << ( tmp_3_fu_677_p1 );

    SC_METHOD(thread_sum22_fu_735_p2);
    sensitive << ( cpk_offset );
    sensitive << ( sum5_3_cast_fu_720_p1 );

    SC_METHOD(thread_sum2_fu_624_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_2_fu_598_p1 );

    SC_METHOD(thread_sum3_fu_703_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_3_fu_677_p1 );

    SC_METHOD(thread_sum5_1_cast_fu_562_p1);
    sensitive << ( sum5_1_fu_556_p2 );

    SC_METHOD(thread_sum5_1_fu_556_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_sum5_2_cast_fu_641_p1);
    sensitive << ( sum5_2_fu_635_p2 );

    SC_METHOD(thread_sum5_2_fu_635_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_sum5_3_cast_fu_720_p1);
    sensitive << ( sum5_3_fu_714_p2 );

    SC_METHOD(thread_sum5_3_fu_714_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_sum5_cast_fu_479_p1);
    sensitive << ( sum5_fu_473_p2 );

    SC_METHOD(thread_sum5_fu_473_p2);
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_sum6_fu_436_p2);
    sensitive << ( key_offset );
    sensitive << ( tmp_s_fu_432_p1 );

    SC_METHOD(thread_sum7_fu_483_p2);
    sensitive << ( key_offset );
    sensitive << ( sum5_cast_fu_479_p1 );

    SC_METHOD(thread_sum8_fu_519_p2);
    sensitive << ( key_offset );
    sensitive << ( tmp_1_fu_515_p1 );

    SC_METHOD(thread_sum9_fu_566_p2);
    sensitive << ( key_offset );
    sensitive << ( sum5_1_cast_fu_562_p1 );

    SC_METHOD(thread_sum_fu_458_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_s_fu_432_p1 );

    SC_METHOD(thread_tmp_1_fu_515_p1);
    sensitive << ( i_10_1_cast_fu_511_p1 );

    SC_METHOD(thread_tmp_24_fu_469_p2);
    sensitive << ( key_addr_read_reg_808 );
    sensitive << ( buf_addr_read_reg_814 );

    SC_METHOD(thread_tmp_2_fu_598_p1);
    sensitive << ( i_10_2_cast_fu_594_p1 );

    SC_METHOD(thread_tmp_3_fu_677_p1);
    sensitive << ( i_10_3_cast_fu_673_p1 );

    SC_METHOD(thread_tmp_67_1_fu_552_p2);
    sensitive << ( buf_addr_28_read_reg_860 );
    sensitive << ( key_addr_2_read_reg_865 );

    SC_METHOD(thread_tmp_67_2_fu_746_p2);
    sensitive << ( buf_addr_29_read_reg_960 );
    sensitive << ( key_addr_4_read_reg_965 );

    SC_METHOD(thread_tmp_67_3_fu_750_p2);
    sensitive << ( key_addr_6_read_reg_981 );
    sensitive << ( buf_addr_30_read_reg_987 );

    SC_METHOD(thread_tmp_fu_426_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_404 );

    SC_METHOD(thread_tmp_s_fu_432_p1);
    sensitive << ( i_cast_fu_422_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( m_axi_cpk_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state41 );
    sensitive << ( ap_CS_fsm_state43 );
    sensitive << ( ap_CS_fsm_state44 );
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( ap_CS_fsm_state50 );
    sensitive << ( ap_CS_fsm_state57 );
    sensitive << ( ap_CS_fsm_state58 );
    sensitive << ( ap_CS_fsm_state59 );
    sensitive << ( ap_CS_fsm_state64 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state42 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state60 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_CS_fsm_state47 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state55 );
    sensitive << ( ap_CS_fsm_state61 );
    sensitive << ( ap_CS_fsm_state66 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_426_p2 );
    sensitive << ( ap_sig_ioackin_m_axi_cpk_AWREADY );
    sensitive << ( ap_block_state11_io );
    sensitive << ( ap_block_state27_io );
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_block_state43_io );
    sensitive << ( ap_block_state58_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_sig_ioackin_m_axi_cpk_WREADY );
    sensitive << ( ap_block_state12_io );
    sensitive << ( ap_block_state18_io );
    sensitive << ( ap_block_state28_io );
    sensitive << ( ap_block_state34_io );
    sensitive << ( ap_block_state44_io );
    sensitive << ( ap_block_state50_io );
    sensitive << ( ap_block_state59_io );

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000000000000000001";
    ap_reg_ioackin_m_axi_key_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_cpk_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_cpk_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_aes_addRoundKey_cpy_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_buf_r_AWVALID, "(port)m_axi_buf_r_AWVALID");
    sc_trace(mVcdFile, m_axi_buf_r_AWREADY, "(port)m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, m_axi_buf_r_AWADDR, "(port)m_axi_buf_r_AWADDR");
    sc_trace(mVcdFile, m_axi_buf_r_AWID, "(port)m_axi_buf_r_AWID");
    sc_trace(mVcdFile, m_axi_buf_r_AWLEN, "(port)m_axi_buf_r_AWLEN");
    sc_trace(mVcdFile, m_axi_buf_r_AWSIZE, "(port)m_axi_buf_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_buf_r_AWBURST, "(port)m_axi_buf_r_AWBURST");
    sc_trace(mVcdFile, m_axi_buf_r_AWLOCK, "(port)m_axi_buf_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_buf_r_AWCACHE, "(port)m_axi_buf_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_buf_r_AWPROT, "(port)m_axi_buf_r_AWPROT");
    sc_trace(mVcdFile, m_axi_buf_r_AWQOS, "(port)m_axi_buf_r_AWQOS");
    sc_trace(mVcdFile, m_axi_buf_r_AWREGION, "(port)m_axi_buf_r_AWREGION");
    sc_trace(mVcdFile, m_axi_buf_r_AWUSER, "(port)m_axi_buf_r_AWUSER");
    sc_trace(mVcdFile, m_axi_buf_r_WVALID, "(port)m_axi_buf_r_WVALID");
    sc_trace(mVcdFile, m_axi_buf_r_WREADY, "(port)m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, m_axi_buf_r_WDATA, "(port)m_axi_buf_r_WDATA");
    sc_trace(mVcdFile, m_axi_buf_r_WSTRB, "(port)m_axi_buf_r_WSTRB");
    sc_trace(mVcdFile, m_axi_buf_r_WLAST, "(port)m_axi_buf_r_WLAST");
    sc_trace(mVcdFile, m_axi_buf_r_WID, "(port)m_axi_buf_r_WID");
    sc_trace(mVcdFile, m_axi_buf_r_WUSER, "(port)m_axi_buf_r_WUSER");
    sc_trace(mVcdFile, m_axi_buf_r_ARVALID, "(port)m_axi_buf_r_ARVALID");
    sc_trace(mVcdFile, m_axi_buf_r_ARREADY, "(port)m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, m_axi_buf_r_ARADDR, "(port)m_axi_buf_r_ARADDR");
    sc_trace(mVcdFile, m_axi_buf_r_ARID, "(port)m_axi_buf_r_ARID");
    sc_trace(mVcdFile, m_axi_buf_r_ARLEN, "(port)m_axi_buf_r_ARLEN");
    sc_trace(mVcdFile, m_axi_buf_r_ARSIZE, "(port)m_axi_buf_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_buf_r_ARBURST, "(port)m_axi_buf_r_ARBURST");
    sc_trace(mVcdFile, m_axi_buf_r_ARLOCK, "(port)m_axi_buf_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_buf_r_ARCACHE, "(port)m_axi_buf_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_buf_r_ARPROT, "(port)m_axi_buf_r_ARPROT");
    sc_trace(mVcdFile, m_axi_buf_r_ARQOS, "(port)m_axi_buf_r_ARQOS");
    sc_trace(mVcdFile, m_axi_buf_r_ARREGION, "(port)m_axi_buf_r_ARREGION");
    sc_trace(mVcdFile, m_axi_buf_r_ARUSER, "(port)m_axi_buf_r_ARUSER");
    sc_trace(mVcdFile, m_axi_buf_r_RVALID, "(port)m_axi_buf_r_RVALID");
    sc_trace(mVcdFile, m_axi_buf_r_RREADY, "(port)m_axi_buf_r_RREADY");
    sc_trace(mVcdFile, m_axi_buf_r_RDATA, "(port)m_axi_buf_r_RDATA");
    sc_trace(mVcdFile, m_axi_buf_r_RLAST, "(port)m_axi_buf_r_RLAST");
    sc_trace(mVcdFile, m_axi_buf_r_RID, "(port)m_axi_buf_r_RID");
    sc_trace(mVcdFile, m_axi_buf_r_RUSER, "(port)m_axi_buf_r_RUSER");
    sc_trace(mVcdFile, m_axi_buf_r_RRESP, "(port)m_axi_buf_r_RRESP");
    sc_trace(mVcdFile, m_axi_buf_r_BVALID, "(port)m_axi_buf_r_BVALID");
    sc_trace(mVcdFile, m_axi_buf_r_BREADY, "(port)m_axi_buf_r_BREADY");
    sc_trace(mVcdFile, m_axi_buf_r_BRESP, "(port)m_axi_buf_r_BRESP");
    sc_trace(mVcdFile, m_axi_buf_r_BID, "(port)m_axi_buf_r_BID");
    sc_trace(mVcdFile, m_axi_buf_r_BUSER, "(port)m_axi_buf_r_BUSER");
    sc_trace(mVcdFile, buf_offset, "(port)buf_offset");
    sc_trace(mVcdFile, m_axi_key_AWVALID, "(port)m_axi_key_AWVALID");
    sc_trace(mVcdFile, m_axi_key_AWREADY, "(port)m_axi_key_AWREADY");
    sc_trace(mVcdFile, m_axi_key_AWADDR, "(port)m_axi_key_AWADDR");
    sc_trace(mVcdFile, m_axi_key_AWID, "(port)m_axi_key_AWID");
    sc_trace(mVcdFile, m_axi_key_AWLEN, "(port)m_axi_key_AWLEN");
    sc_trace(mVcdFile, m_axi_key_AWSIZE, "(port)m_axi_key_AWSIZE");
    sc_trace(mVcdFile, m_axi_key_AWBURST, "(port)m_axi_key_AWBURST");
    sc_trace(mVcdFile, m_axi_key_AWLOCK, "(port)m_axi_key_AWLOCK");
    sc_trace(mVcdFile, m_axi_key_AWCACHE, "(port)m_axi_key_AWCACHE");
    sc_trace(mVcdFile, m_axi_key_AWPROT, "(port)m_axi_key_AWPROT");
    sc_trace(mVcdFile, m_axi_key_AWQOS, "(port)m_axi_key_AWQOS");
    sc_trace(mVcdFile, m_axi_key_AWREGION, "(port)m_axi_key_AWREGION");
    sc_trace(mVcdFile, m_axi_key_AWUSER, "(port)m_axi_key_AWUSER");
    sc_trace(mVcdFile, m_axi_key_WVALID, "(port)m_axi_key_WVALID");
    sc_trace(mVcdFile, m_axi_key_WREADY, "(port)m_axi_key_WREADY");
    sc_trace(mVcdFile, m_axi_key_WDATA, "(port)m_axi_key_WDATA");
    sc_trace(mVcdFile, m_axi_key_WSTRB, "(port)m_axi_key_WSTRB");
    sc_trace(mVcdFile, m_axi_key_WLAST, "(port)m_axi_key_WLAST");
    sc_trace(mVcdFile, m_axi_key_WID, "(port)m_axi_key_WID");
    sc_trace(mVcdFile, m_axi_key_WUSER, "(port)m_axi_key_WUSER");
    sc_trace(mVcdFile, m_axi_key_ARVALID, "(port)m_axi_key_ARVALID");
    sc_trace(mVcdFile, m_axi_key_ARREADY, "(port)m_axi_key_ARREADY");
    sc_trace(mVcdFile, m_axi_key_ARADDR, "(port)m_axi_key_ARADDR");
    sc_trace(mVcdFile, m_axi_key_ARID, "(port)m_axi_key_ARID");
    sc_trace(mVcdFile, m_axi_key_ARLEN, "(port)m_axi_key_ARLEN");
    sc_trace(mVcdFile, m_axi_key_ARSIZE, "(port)m_axi_key_ARSIZE");
    sc_trace(mVcdFile, m_axi_key_ARBURST, "(port)m_axi_key_ARBURST");
    sc_trace(mVcdFile, m_axi_key_ARLOCK, "(port)m_axi_key_ARLOCK");
    sc_trace(mVcdFile, m_axi_key_ARCACHE, "(port)m_axi_key_ARCACHE");
    sc_trace(mVcdFile, m_axi_key_ARPROT, "(port)m_axi_key_ARPROT");
    sc_trace(mVcdFile, m_axi_key_ARQOS, "(port)m_axi_key_ARQOS");
    sc_trace(mVcdFile, m_axi_key_ARREGION, "(port)m_axi_key_ARREGION");
    sc_trace(mVcdFile, m_axi_key_ARUSER, "(port)m_axi_key_ARUSER");
    sc_trace(mVcdFile, m_axi_key_RVALID, "(port)m_axi_key_RVALID");
    sc_trace(mVcdFile, m_axi_key_RREADY, "(port)m_axi_key_RREADY");
    sc_trace(mVcdFile, m_axi_key_RDATA, "(port)m_axi_key_RDATA");
    sc_trace(mVcdFile, m_axi_key_RLAST, "(port)m_axi_key_RLAST");
    sc_trace(mVcdFile, m_axi_key_RID, "(port)m_axi_key_RID");
    sc_trace(mVcdFile, m_axi_key_RUSER, "(port)m_axi_key_RUSER");
    sc_trace(mVcdFile, m_axi_key_RRESP, "(port)m_axi_key_RRESP");
    sc_trace(mVcdFile, m_axi_key_BVALID, "(port)m_axi_key_BVALID");
    sc_trace(mVcdFile, m_axi_key_BREADY, "(port)m_axi_key_BREADY");
    sc_trace(mVcdFile, m_axi_key_BRESP, "(port)m_axi_key_BRESP");
    sc_trace(mVcdFile, m_axi_key_BID, "(port)m_axi_key_BID");
    sc_trace(mVcdFile, m_axi_key_BUSER, "(port)m_axi_key_BUSER");
    sc_trace(mVcdFile, key_offset, "(port)key_offset");
    sc_trace(mVcdFile, m_axi_cpk_AWVALID, "(port)m_axi_cpk_AWVALID");
    sc_trace(mVcdFile, m_axi_cpk_AWREADY, "(port)m_axi_cpk_AWREADY");
    sc_trace(mVcdFile, m_axi_cpk_AWADDR, "(port)m_axi_cpk_AWADDR");
    sc_trace(mVcdFile, m_axi_cpk_AWID, "(port)m_axi_cpk_AWID");
    sc_trace(mVcdFile, m_axi_cpk_AWLEN, "(port)m_axi_cpk_AWLEN");
    sc_trace(mVcdFile, m_axi_cpk_AWSIZE, "(port)m_axi_cpk_AWSIZE");
    sc_trace(mVcdFile, m_axi_cpk_AWBURST, "(port)m_axi_cpk_AWBURST");
    sc_trace(mVcdFile, m_axi_cpk_AWLOCK, "(port)m_axi_cpk_AWLOCK");
    sc_trace(mVcdFile, m_axi_cpk_AWCACHE, "(port)m_axi_cpk_AWCACHE");
    sc_trace(mVcdFile, m_axi_cpk_AWPROT, "(port)m_axi_cpk_AWPROT");
    sc_trace(mVcdFile, m_axi_cpk_AWQOS, "(port)m_axi_cpk_AWQOS");
    sc_trace(mVcdFile, m_axi_cpk_AWREGION, "(port)m_axi_cpk_AWREGION");
    sc_trace(mVcdFile, m_axi_cpk_AWUSER, "(port)m_axi_cpk_AWUSER");
    sc_trace(mVcdFile, m_axi_cpk_WVALID, "(port)m_axi_cpk_WVALID");
    sc_trace(mVcdFile, m_axi_cpk_WREADY, "(port)m_axi_cpk_WREADY");
    sc_trace(mVcdFile, m_axi_cpk_WDATA, "(port)m_axi_cpk_WDATA");
    sc_trace(mVcdFile, m_axi_cpk_WSTRB, "(port)m_axi_cpk_WSTRB");
    sc_trace(mVcdFile, m_axi_cpk_WLAST, "(port)m_axi_cpk_WLAST");
    sc_trace(mVcdFile, m_axi_cpk_WID, "(port)m_axi_cpk_WID");
    sc_trace(mVcdFile, m_axi_cpk_WUSER, "(port)m_axi_cpk_WUSER");
    sc_trace(mVcdFile, m_axi_cpk_ARVALID, "(port)m_axi_cpk_ARVALID");
    sc_trace(mVcdFile, m_axi_cpk_ARREADY, "(port)m_axi_cpk_ARREADY");
    sc_trace(mVcdFile, m_axi_cpk_ARADDR, "(port)m_axi_cpk_ARADDR");
    sc_trace(mVcdFile, m_axi_cpk_ARID, "(port)m_axi_cpk_ARID");
    sc_trace(mVcdFile, m_axi_cpk_ARLEN, "(port)m_axi_cpk_ARLEN");
    sc_trace(mVcdFile, m_axi_cpk_ARSIZE, "(port)m_axi_cpk_ARSIZE");
    sc_trace(mVcdFile, m_axi_cpk_ARBURST, "(port)m_axi_cpk_ARBURST");
    sc_trace(mVcdFile, m_axi_cpk_ARLOCK, "(port)m_axi_cpk_ARLOCK");
    sc_trace(mVcdFile, m_axi_cpk_ARCACHE, "(port)m_axi_cpk_ARCACHE");
    sc_trace(mVcdFile, m_axi_cpk_ARPROT, "(port)m_axi_cpk_ARPROT");
    sc_trace(mVcdFile, m_axi_cpk_ARQOS, "(port)m_axi_cpk_ARQOS");
    sc_trace(mVcdFile, m_axi_cpk_ARREGION, "(port)m_axi_cpk_ARREGION");
    sc_trace(mVcdFile, m_axi_cpk_ARUSER, "(port)m_axi_cpk_ARUSER");
    sc_trace(mVcdFile, m_axi_cpk_RVALID, "(port)m_axi_cpk_RVALID");
    sc_trace(mVcdFile, m_axi_cpk_RREADY, "(port)m_axi_cpk_RREADY");
    sc_trace(mVcdFile, m_axi_cpk_RDATA, "(port)m_axi_cpk_RDATA");
    sc_trace(mVcdFile, m_axi_cpk_RLAST, "(port)m_axi_cpk_RLAST");
    sc_trace(mVcdFile, m_axi_cpk_RID, "(port)m_axi_cpk_RID");
    sc_trace(mVcdFile, m_axi_cpk_RUSER, "(port)m_axi_cpk_RUSER");
    sc_trace(mVcdFile, m_axi_cpk_RRESP, "(port)m_axi_cpk_RRESP");
    sc_trace(mVcdFile, m_axi_cpk_BVALID, "(port)m_axi_cpk_BVALID");
    sc_trace(mVcdFile, m_axi_cpk_BREADY, "(port)m_axi_cpk_BREADY");
    sc_trace(mVcdFile, m_axi_cpk_BRESP, "(port)m_axi_cpk_BRESP");
    sc_trace(mVcdFile, m_axi_cpk_BID, "(port)m_axi_cpk_BID");
    sc_trace(mVcdFile, m_axi_cpk_BUSER, "(port)m_axi_cpk_BUSER");
    sc_trace(mVcdFile, cpk_offset, "(port)cpk_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, buf_r_blk_n_AR, "buf_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, buf_r_blk_n_R, "buf_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, buf_r_blk_n_AW, "buf_r_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, buf_r_blk_n_W, "buf_r_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, buf_r_blk_n_B, "buf_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, ap_CS_fsm_state41, "ap_CS_fsm_state41");
    sc_trace(mVcdFile, ap_CS_fsm_state43, "ap_CS_fsm_state43");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, ap_CS_fsm_state64, "ap_CS_fsm_state64");
    sc_trace(mVcdFile, key_blk_n_AR, "key_blk_n_AR");
    sc_trace(mVcdFile, key_blk_n_R, "key_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state42, "ap_CS_fsm_state42");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, ap_CS_fsm_state60, "ap_CS_fsm_state60");
    sc_trace(mVcdFile, cpk_blk_n_AW, "cpk_blk_n_AW");
    sc_trace(mVcdFile, cpk_blk_n_W, "cpk_blk_n_W");
    sc_trace(mVcdFile, cpk_blk_n_B, "cpk_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state55, "ap_CS_fsm_state55");
    sc_trace(mVcdFile, ap_CS_fsm_state61, "ap_CS_fsm_state61");
    sc_trace(mVcdFile, ap_CS_fsm_state66, "ap_CS_fsm_state66");
    sc_trace(mVcdFile, key_addr_reg_789, "key_addr_reg_789");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_426_p2, "tmp_fu_426_p2");
    sc_trace(mVcdFile, cpk_addr_reg_795, "cpk_addr_reg_795");
    sc_trace(mVcdFile, buf_addr_reg_801, "buf_addr_reg_801");
    sc_trace(mVcdFile, key_addr_read_reg_808, "key_addr_read_reg_808");
    sc_trace(mVcdFile, ap_block_state10, "ap_block_state10");
    sc_trace(mVcdFile, buf_addr_read_reg_814, "buf_addr_read_reg_814");
    sc_trace(mVcdFile, tmp_24_fu_469_p2, "tmp_24_fu_469_p2");
    sc_trace(mVcdFile, tmp_24_reg_819, "tmp_24_reg_819");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_cpk_AWREADY, "ap_sig_ioackin_m_axi_cpk_AWREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_AWREADY, "ap_sig_ioackin_m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, ap_block_state11_io, "ap_block_state11_io");
    sc_trace(mVcdFile, key_addr_1_reg_824, "key_addr_1_reg_824");
    sc_trace(mVcdFile, ap_block_state17, "ap_block_state17");
    sc_trace(mVcdFile, cpk_addr_1_reg_830, "cpk_addr_1_reg_830");
    sc_trace(mVcdFile, key_addr_2_reg_836, "key_addr_2_reg_836");
    sc_trace(mVcdFile, cpk_addr_2_reg_842, "cpk_addr_2_reg_842");
    sc_trace(mVcdFile, buf_addr_28_reg_848, "buf_addr_28_reg_848");
    sc_trace(mVcdFile, key_addr_1_read_reg_855, "key_addr_1_read_reg_855");
    sc_trace(mVcdFile, ap_block_state25, "ap_block_state25");
    sc_trace(mVcdFile, buf_addr_28_read_reg_860, "buf_addr_28_read_reg_860");
    sc_trace(mVcdFile, key_addr_2_read_reg_865, "key_addr_2_read_reg_865");
    sc_trace(mVcdFile, tmp_67_1_fu_552_p2, "tmp_67_1_fu_552_p2");
    sc_trace(mVcdFile, tmp_67_1_reg_871, "tmp_67_1_reg_871");
    sc_trace(mVcdFile, ap_block_state27_io, "ap_block_state27_io");
    sc_trace(mVcdFile, key_addr_3_reg_876, "key_addr_3_reg_876");
    sc_trace(mVcdFile, ap_block_state33, "ap_block_state33");
    sc_trace(mVcdFile, cpk_addr_3_reg_882, "cpk_addr_3_reg_882");
    sc_trace(mVcdFile, key_addr_4_reg_888, "key_addr_4_reg_888");
    sc_trace(mVcdFile, cpk_addr_4_reg_894, "cpk_addr_4_reg_894");
    sc_trace(mVcdFile, buf_addr_29_reg_900, "buf_addr_29_reg_900");
    sc_trace(mVcdFile, key_addr_5_reg_907, "key_addr_5_reg_907");
    sc_trace(mVcdFile, cpk_addr_5_reg_913, "cpk_addr_5_reg_913");
    sc_trace(mVcdFile, i_10_3_fu_667_p2, "i_10_3_fu_667_p2");
    sc_trace(mVcdFile, i_10_3_reg_919, "i_10_3_reg_919");
    sc_trace(mVcdFile, key_addr_6_reg_924, "key_addr_6_reg_924");
    sc_trace(mVcdFile, cpk_addr_6_reg_930, "cpk_addr_6_reg_930");
    sc_trace(mVcdFile, buf_addr_30_reg_936, "buf_addr_30_reg_936");
    sc_trace(mVcdFile, key_addr_7_reg_943, "key_addr_7_reg_943");
    sc_trace(mVcdFile, cpk_addr_7_reg_949, "cpk_addr_7_reg_949");
    sc_trace(mVcdFile, key_addr_3_read_reg_955, "key_addr_3_read_reg_955");
    sc_trace(mVcdFile, ap_block_state41, "ap_block_state41");
    sc_trace(mVcdFile, buf_addr_29_read_reg_960, "buf_addr_29_read_reg_960");
    sc_trace(mVcdFile, key_addr_4_read_reg_965, "key_addr_4_read_reg_965");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_key_ARREADY, "ap_sig_ioackin_m_axi_key_ARREADY");
    sc_trace(mVcdFile, tmp_67_2_fu_746_p2, "tmp_67_2_fu_746_p2");
    sc_trace(mVcdFile, tmp_67_2_reg_971, "tmp_67_2_reg_971");
    sc_trace(mVcdFile, ap_block_state43_io, "ap_block_state43_io");
    sc_trace(mVcdFile, key_addr_5_read_reg_976, "key_addr_5_read_reg_976");
    sc_trace(mVcdFile, ap_block_state49, "ap_block_state49");
    sc_trace(mVcdFile, key_addr_6_read_reg_981, "key_addr_6_read_reg_981");
    sc_trace(mVcdFile, ap_block_state57, "ap_block_state57");
    sc_trace(mVcdFile, buf_addr_30_read_reg_987, "buf_addr_30_read_reg_987");
    sc_trace(mVcdFile, tmp_67_3_fu_750_p2, "tmp_67_3_fu_750_p2");
    sc_trace(mVcdFile, tmp_67_3_reg_992, "tmp_67_3_reg_992");
    sc_trace(mVcdFile, ap_block_state58_io, "ap_block_state58_io");
    sc_trace(mVcdFile, key_addr_7_read_reg_997, "key_addr_7_read_reg_997");
    sc_trace(mVcdFile, i_reg_404, "i_reg_404");
    sc_trace(mVcdFile, sum6_fu_436_p2, "sum6_fu_436_p2");
    sc_trace(mVcdFile, sum15_fu_447_p2, "sum15_fu_447_p2");
    sc_trace(mVcdFile, sum_fu_458_p2, "sum_fu_458_p2");
    sc_trace(mVcdFile, sum7_fu_483_p2, "sum7_fu_483_p2");
    sc_trace(mVcdFile, sum16_fu_494_p2, "sum16_fu_494_p2");
    sc_trace(mVcdFile, sum8_fu_519_p2, "sum8_fu_519_p2");
    sc_trace(mVcdFile, sum17_fu_530_p2, "sum17_fu_530_p2");
    sc_trace(mVcdFile, sum1_fu_541_p2, "sum1_fu_541_p2");
    sc_trace(mVcdFile, sum9_fu_566_p2, "sum9_fu_566_p2");
    sc_trace(mVcdFile, sum18_fu_577_p2, "sum18_fu_577_p2");
    sc_trace(mVcdFile, sum10_fu_602_p2, "sum10_fu_602_p2");
    sc_trace(mVcdFile, sum19_fu_613_p2, "sum19_fu_613_p2");
    sc_trace(mVcdFile, sum2_fu_624_p2, "sum2_fu_624_p2");
    sc_trace(mVcdFile, sum11_fu_645_p2, "sum11_fu_645_p2");
    sc_trace(mVcdFile, sum20_fu_656_p2, "sum20_fu_656_p2");
    sc_trace(mVcdFile, sum12_fu_681_p2, "sum12_fu_681_p2");
    sc_trace(mVcdFile, sum21_fu_692_p2, "sum21_fu_692_p2");
    sc_trace(mVcdFile, sum3_fu_703_p2, "sum3_fu_703_p2");
    sc_trace(mVcdFile, sum13_fu_724_p2, "sum13_fu_724_p2");
    sc_trace(mVcdFile, sum22_fu_735_p2, "sum22_fu_735_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_key_ARREADY, "ap_reg_ioackin_m_axi_key_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_ARREADY, "ap_sig_ioackin_m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_ARREADY, "ap_reg_ioackin_m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_AWREADY, "ap_reg_ioackin_m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_cpk_AWREADY, "ap_reg_ioackin_m_axi_cpk_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_cpk_WREADY, "ap_reg_ioackin_m_axi_cpk_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_cpk_WREADY, "ap_sig_ioackin_m_axi_cpk_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_WREADY, "ap_sig_ioackin_m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, ap_block_state12_io, "ap_block_state12_io");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_WREADY, "ap_reg_ioackin_m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, ap_block_state18_io, "ap_block_state18_io");
    sc_trace(mVcdFile, ap_block_state28_io, "ap_block_state28_io");
    sc_trace(mVcdFile, ap_block_state34_io, "ap_block_state34_io");
    sc_trace(mVcdFile, ap_block_state44_io, "ap_block_state44_io");
    sc_trace(mVcdFile, ap_block_state50_io, "ap_block_state50_io");
    sc_trace(mVcdFile, ap_block_state64, "ap_block_state64");
    sc_trace(mVcdFile, ap_block_state59_io, "ap_block_state59_io");
    sc_trace(mVcdFile, i_s_fu_416_p2, "i_s_fu_416_p2");
    sc_trace(mVcdFile, i_cast_fu_422_p1, "i_cast_fu_422_p1");
    sc_trace(mVcdFile, tmp_s_fu_432_p1, "tmp_s_fu_432_p1");
    sc_trace(mVcdFile, sum5_fu_473_p2, "sum5_fu_473_p2");
    sc_trace(mVcdFile, sum5_cast_fu_479_p1, "sum5_cast_fu_479_p1");
    sc_trace(mVcdFile, i_10_1_fu_505_p2, "i_10_1_fu_505_p2");
    sc_trace(mVcdFile, i_10_1_cast_fu_511_p1, "i_10_1_cast_fu_511_p1");
    sc_trace(mVcdFile, tmp_1_fu_515_p1, "tmp_1_fu_515_p1");
    sc_trace(mVcdFile, sum5_1_fu_556_p2, "sum5_1_fu_556_p2");
    sc_trace(mVcdFile, sum5_1_cast_fu_562_p1, "sum5_1_cast_fu_562_p1");
    sc_trace(mVcdFile, i_10_2_fu_588_p2, "i_10_2_fu_588_p2");
    sc_trace(mVcdFile, i_10_2_cast_fu_594_p1, "i_10_2_cast_fu_594_p1");
    sc_trace(mVcdFile, tmp_2_fu_598_p1, "tmp_2_fu_598_p1");
    sc_trace(mVcdFile, sum5_2_fu_635_p2, "sum5_2_fu_635_p2");
    sc_trace(mVcdFile, sum5_2_cast_fu_641_p1, "sum5_2_cast_fu_641_p1");
    sc_trace(mVcdFile, i_10_3_cast_fu_673_p1, "i_10_3_cast_fu_673_p1");
    sc_trace(mVcdFile, tmp_3_fu_677_p1, "tmp_3_fu_677_p1");
    sc_trace(mVcdFile, sum5_3_fu_714_p2, "sum5_3_fu_714_p2");
    sc_trace(mVcdFile, sum5_3_cast_fu_720_p1, "sum5_3_cast_fu_720_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_825, "ap_condition_825");
#endif

    }
}

a0_aes_addRoundKey_cpy::~a0_aes_addRoundKey_cpy() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void a0_aes_addRoundKey_cpy::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
              esl_seteq<1,1,1>(ap_block_state18_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
              esl_seteq<1,1,1>(ap_block_state34_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
              esl_seteq<1,1,1>(ap_block_state50_io.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())))) {
            ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
              esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
              esl_seteq<1,1,1>(ap_block_state27_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
              esl_seteq<1,1,1>(ap_block_state43_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
              esl_seteq<1,1,1>(ap_block_state58_io.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())))) {
            ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
              esl_seteq<1,1,1>(ap_block_state12_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
              esl_seteq<1,1,1>(ap_block_state28_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
              esl_seteq<1,1,1>(ap_block_state44_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && 
              esl_seteq<1,1,1>(ap_block_state59_io.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())))) {
            ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_cpk_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
              esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
              esl_seteq<1,1,1>(ap_block_state27_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
              esl_seteq<1,1,1>(ap_block_state43_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
              esl_seteq<1,1,1>(ap_block_state58_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_m_axi_cpk_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
                     esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_AWREADY.read())))) {
            ap_reg_ioackin_m_axi_cpk_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_cpk_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
              esl_seteq<1,1,1>(ap_block_state12_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
              esl_seteq<1,1,1>(ap_block_state28_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
              esl_seteq<1,1,1>(ap_block_state44_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
              esl_seteq<1,1,1>(ap_block_state50_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && 
              esl_seteq<1,1,1>(ap_block_state59_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_m_axi_cpk_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_cpk_WREADY.read())))) {
            ap_reg_ioackin_m_axi_cpk_WREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_key_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
              esl_seteq<1,1,1>(ap_block_state18_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_key_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
              esl_seteq<1,1,1>(ap_block_state34_io.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_key_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
              esl_seteq<1,1,1>(ap_block_state50_io.read(), ap_const_boolean_0)))) {
            ap_reg_ioackin_m_axi_key_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
                     esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
                     esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read())))) {
            ap_reg_ioackin_m_axi_key_ARREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) && 
         esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1))) {
        i_reg_404 = i_10_3_reg_919.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_404 = ap_const_lv5_10;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
        buf_addr_28_read_reg_860 = m_axi_buf_r_RDATA.read();
        key_addr_1_read_reg_855 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
        buf_addr_28_reg_848 = sum1_fu_541_p2.read();
        cpk_addr_1_reg_830 = sum16_fu_494_p2.read();
        cpk_addr_2_reg_842 = sum17_fu_530_p2.read();
        key_addr_1_reg_824 = sum7_fu_483_p2.read();
        key_addr_2_reg_836 = sum8_fu_519_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
        buf_addr_29_read_reg_960 = m_axi_buf_r_RDATA.read();
        key_addr_3_read_reg_955 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
        buf_addr_29_reg_900 = sum2_fu_624_p2.read();
        buf_addr_30_reg_936 = sum3_fu_703_p2.read();
        cpk_addr_3_reg_882 = sum18_fu_577_p2.read();
        cpk_addr_4_reg_894 = sum19_fu_613_p2.read();
        cpk_addr_5_reg_913 = sum20_fu_656_p2.read();
        cpk_addr_6_reg_930 = sum21_fu_692_p2.read();
        cpk_addr_7_reg_949 = sum22_fu_735_p2.read();
        i_10_3_reg_919 = i_10_3_fu_667_p2.read();
        key_addr_3_reg_876 = sum9_fu_566_p2.read();
        key_addr_4_reg_888 = sum10_fu_602_p2.read();
        key_addr_5_reg_907 = sum11_fu_645_p2.read();
        key_addr_6_reg_924 = sum12_fu_681_p2.read();
        key_addr_7_reg_943 = sum13_fu_724_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
        buf_addr_30_read_reg_987 = m_axi_buf_r_RDATA.read();
        key_addr_6_read_reg_981 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
        buf_addr_read_reg_814 = m_axi_buf_r_RDATA.read();
        key_addr_read_reg_808 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_426_p2.read()))) {
        buf_addr_reg_801 = sum_fu_458_p2.read();
        cpk_addr_reg_795 = sum15_fu_447_p2.read();
        key_addr_reg_789 = sum6_fu_436_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1))) {
        key_addr_2_read_reg_865 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read())))) {
        key_addr_4_read_reg_965 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
        key_addr_5_read_reg_976 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read())))) {
        key_addr_7_read_reg_997 = m_axi_key_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
        tmp_24_reg_819 = tmp_24_fu_469_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(ap_block_state27_io.read(), ap_const_boolean_0))) {
        tmp_67_1_reg_871 = tmp_67_1_fu_552_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(ap_block_state43_io.read(), ap_const_boolean_0))) {
        tmp_67_2_reg_971 = tmp_67_2_fu_746_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && esl_seteq<1,1,1>(ap_block_state58_io.read(), ap_const_boolean_0))) {
        tmp_67_3_reg_992 = tmp_67_3_fu_750_p2.read();
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state41() {
    ap_CS_fsm_state41 = ap_CS_fsm.read()[40];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state42() {
    ap_CS_fsm_state42 = ap_CS_fsm.read()[41];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state43() {
    ap_CS_fsm_state43 = ap_CS_fsm.read()[42];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state55() {
    ap_CS_fsm_state55 = ap_CS_fsm.read()[54];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state60() {
    ap_CS_fsm_state60 = ap_CS_fsm.read()[59];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state61() {
    ap_CS_fsm_state61 = ap_CS_fsm.read()[60];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state64() {
    ap_CS_fsm_state64 = ap_CS_fsm.read()[63];
}

void a0_aes_addRoundKey_cpy::thread_ap_CS_fsm_state66() {
    ap_CS_fsm_state66 = ap_CS_fsm.read()[65];
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state10() {
    ap_block_state10 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state11_io() {
    ap_block_state11_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state12_io() {
    ap_block_state12_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_WREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_WREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state17() {
    ap_block_state17 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state18_io() {
    ap_block_state18_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_ARREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state25() {
    ap_block_state25 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state27_io() {
    ap_block_state27_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state28_io() {
    ap_block_state28_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_WREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_WREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state33() {
    ap_block_state33 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state34_io() {
    ap_block_state34_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_ARREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_ARREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state41() {
    ap_block_state41 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state43_io() {
    ap_block_state43_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state44_io() {
    ap_block_state44_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_WREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_WREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state49() {
    ap_block_state49 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state50_io() {
    ap_block_state50_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_ARREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_WREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state57() {
    ap_block_state57 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state58_io() {
    ap_block_state58_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state59_io() {
    ap_block_state59_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_WREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_WREADY.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_block_state64() {
    ap_block_state64 = (esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey_cpy::thread_ap_condition_825() {
    ap_condition_825 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())));
}

void a0_aes_addRoundKey_cpy::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_426_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_426_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_sig_ioackin_m_axi_buf_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_ARREADY = m_axi_buf_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_sig_ioackin_m_axi_buf_r_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_AWREADY = m_axi_buf_r_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_sig_ioackin_m_axi_buf_r_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_WREADY = m_axi_buf_r_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_sig_ioackin_m_axi_cpk_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) {
        ap_sig_ioackin_m_axi_cpk_AWREADY = m_axi_cpk_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_cpk_AWREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_sig_ioackin_m_axi_cpk_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) {
        ap_sig_ioackin_m_axi_cpk_WREADY = m_axi_cpk_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_cpk_WREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_ap_sig_ioackin_m_axi_key_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) {
        ap_sig_ioackin_m_axi_key_ARREADY = m_axi_key_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_buf_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        buf_r_blk_n_AR = m_axi_buf_r_ARREADY.read();
    } else {
        buf_r_blk_n_AR = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_buf_r_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()))) {
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY.read();
    } else {
        buf_r_blk_n_AW = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_buf_r_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read()))) {
        buf_r_blk_n_B = m_axi_buf_r_BVALID.read();
    } else {
        buf_r_blk_n_B = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_buf_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()))) {
        buf_r_blk_n_R = m_axi_buf_r_RVALID.read();
    } else {
        buf_r_blk_n_R = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_buf_r_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()))) {
        buf_r_blk_n_W = m_axi_buf_r_WREADY.read();
    } else {
        buf_r_blk_n_W = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_cpk_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()))) {
        cpk_blk_n_AW = m_axi_cpk_AWREADY.read();
    } else {
        cpk_blk_n_AW = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_cpk_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()))) {
        cpk_blk_n_B = m_axi_cpk_BVALID.read();
    } else {
        cpk_blk_n_B = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_cpk_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()))) {
        cpk_blk_n_W = m_axi_cpk_WREADY.read();
    } else {
        cpk_blk_n_W = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_i_10_1_cast_fu_511_p1() {
    i_10_1_cast_fu_511_p1 = esl_sext<8,5>(i_10_1_fu_505_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_i_10_1_fu_505_p2() {
    i_10_1_fu_505_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_bigint<5>(ap_const_lv5_1E));
}

void a0_aes_addRoundKey_cpy::thread_i_10_2_cast_fu_594_p1() {
    i_10_2_cast_fu_594_p1 = esl_sext<8,5>(i_10_2_fu_588_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_i_10_2_fu_588_p2() {
    i_10_2_fu_588_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_1D.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_bigint<5>(ap_const_lv5_1D));
}

void a0_aes_addRoundKey_cpy::thread_i_10_3_cast_fu_673_p1() {
    i_10_3_cast_fu_673_p1 = esl_sext<8,5>(i_10_3_fu_667_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_i_10_3_fu_667_p2() {
    i_10_3_fu_667_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_bigint<5>(ap_const_lv5_1C));
}

void a0_aes_addRoundKey_cpy::thread_i_cast_fu_422_p1() {
    i_cast_fu_422_p1 = esl_sext<8,5>(i_s_fu_416_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_i_s_fu_416_p2() {
    i_s_fu_416_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void a0_aes_addRoundKey_cpy::thread_key_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()))) {
        key_blk_n_AR = m_axi_key_ARREADY.read();
    } else {
        key_blk_n_AR = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_key_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()))) {
        key_blk_n_R = m_axi_key_RVALID.read();
    } else {
        key_blk_n_R = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
            m_axi_buf_r_ARADDR = buf_addr_30_reg_936.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
            m_axi_buf_r_ARADDR = buf_addr_29_reg_900.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            m_axi_buf_r_ARADDR = buf_addr_28_reg_848.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            m_axi_buf_r_ARADDR = buf_addr_reg_801.read();
        } else {
            m_axi_buf_r_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_buf_r_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARBURST() {
    m_axi_buf_r_ARBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARCACHE() {
    m_axi_buf_r_ARCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARID() {
    m_axi_buf_r_ARID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARLEN() {
    m_axi_buf_r_ARLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARLOCK() {
    m_axi_buf_r_ARLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARPROT() {
    m_axi_buf_r_ARPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARQOS() {
    m_axi_buf_r_ARQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARREGION() {
    m_axi_buf_r_ARREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARSIZE() {
    m_axi_buf_r_ARSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARUSER() {
    m_axi_buf_r_ARUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())))) {
        m_axi_buf_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_ARVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
            m_axi_buf_r_AWADDR = buf_addr_30_reg_936.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
            m_axi_buf_r_AWADDR = buf_addr_29_reg_900.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
            m_axi_buf_r_AWADDR = buf_addr_28_reg_848.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            m_axi_buf_r_AWADDR = buf_addr_reg_801.read();
        } else {
            m_axi_buf_r_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_buf_r_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWBURST() {
    m_axi_buf_r_AWBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWCACHE() {
    m_axi_buf_r_AWCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWID() {
    m_axi_buf_r_AWID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWLEN() {
    m_axi_buf_r_AWLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWLOCK() {
    m_axi_buf_r_AWLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWPROT() {
    m_axi_buf_r_AWPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWQOS() {
    m_axi_buf_r_AWQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWREGION() {
    m_axi_buf_r_AWREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWSIZE() {
    m_axi_buf_r_AWSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWUSER() {
    m_axi_buf_r_AWUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())))) {
        m_axi_buf_r_AWVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_AWVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))))) {
        m_axi_buf_r_BREADY = ap_const_logic_1;
    } else {
        m_axi_buf_r_BREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))))) {
        m_axi_buf_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_buf_r_RREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read())) {
            m_axi_buf_r_WDATA = tmp_67_3_reg_992.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
            m_axi_buf_r_WDATA = tmp_67_2_reg_971.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
            m_axi_buf_r_WDATA = tmp_67_1_reg_871.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            m_axi_buf_r_WDATA = tmp_24_reg_819.read();
        } else {
            m_axi_buf_r_WDATA =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        m_axi_buf_r_WDATA =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_WID() {
    m_axi_buf_r_WID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_WLAST() {
    m_axi_buf_r_WLAST = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_WSTRB() {
    m_axi_buf_r_WSTRB = ap_const_lv1_1;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_WUSER() {
    m_axi_buf_r_WUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_buf_r_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())))) {
        m_axi_buf_r_WVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_WVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARADDR() {
    m_axi_cpk_ARADDR = ap_const_lv32_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARBURST() {
    m_axi_cpk_ARBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARCACHE() {
    m_axi_cpk_ARCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARID() {
    m_axi_cpk_ARID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARLEN() {
    m_axi_cpk_ARLEN = ap_const_lv32_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARLOCK() {
    m_axi_cpk_ARLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARPROT() {
    m_axi_cpk_ARPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARQOS() {
    m_axi_cpk_ARQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARREGION() {
    m_axi_cpk_ARREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARSIZE() {
    m_axi_cpk_ARSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARUSER() {
    m_axi_cpk_ARUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_ARVALID() {
    m_axi_cpk_ARVALID = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
             esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1))) {
            m_axi_cpk_AWADDR = cpk_addr_7_reg_949.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
            m_axi_cpk_AWADDR = cpk_addr_6_reg_930.read();
        } else if (esl_seteq<1,1,1>(ap_condition_825.read(), ap_const_boolean_1)) {
            m_axi_cpk_AWADDR = cpk_addr_5_reg_913.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
            m_axi_cpk_AWADDR = cpk_addr_4_reg_894.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
            m_axi_cpk_AWADDR = cpk_addr_3_reg_882.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read())) {
            m_axi_cpk_AWADDR = cpk_addr_2_reg_842.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read())) {
            m_axi_cpk_AWADDR = cpk_addr_1_reg_830.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            m_axi_cpk_AWADDR = cpk_addr_reg_795.read();
        } else {
            m_axi_cpk_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_cpk_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWBURST() {
    m_axi_cpk_AWBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWCACHE() {
    m_axi_cpk_AWCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWID() {
    m_axi_cpk_AWID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWLEN() {
    m_axi_cpk_AWLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWLOCK() {
    m_axi_cpk_AWLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWPROT() {
    m_axi_cpk_AWPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWQOS() {
    m_axi_cpk_AWQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWREGION() {
    m_axi_cpk_AWREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWSIZE() {
    m_axi_cpk_AWSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWUSER() {
    m_axi_cpk_AWUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
          esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_AWREADY.read())))) {
        m_axi_cpk_AWVALID = ap_const_logic_1;
    } else {
        m_axi_cpk_AWVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) && 
          esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
          esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && 
          esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))))) {
        m_axi_cpk_BREADY = ap_const_logic_1;
    } else {
        m_axi_cpk_BREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_RREADY() {
    m_axi_cpk_RREADY = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read())) {
            m_axi_cpk_WDATA = key_addr_7_read_reg_997.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read())) {
            m_axi_cpk_WDATA = key_addr_6_read_reg_981.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
            m_axi_cpk_WDATA = key_addr_5_read_reg_976.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
            m_axi_cpk_WDATA = key_addr_4_read_reg_965.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
            m_axi_cpk_WDATA = key_addr_3_read_reg_955.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
            m_axi_cpk_WDATA = key_addr_2_read_reg_865.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
            m_axi_cpk_WDATA = key_addr_1_read_reg_855.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
            m_axi_cpk_WDATA = key_addr_read_reg_808.read();
        } else {
            m_axi_cpk_WDATA =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        m_axi_cpk_WDATA =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_WID() {
    m_axi_cpk_WID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_WLAST() {
    m_axi_cpk_WLAST = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_WSTRB() {
    m_axi_cpk_WSTRB = ap_const_lv1_1;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_WUSER() {
    m_axi_cpk_WUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_cpk_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_cpk_WREADY.read())))) {
        m_axi_cpk_WVALID = ap_const_logic_1;
    } else {
        m_axi_cpk_WVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
             esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1))) {
            m_axi_key_ARADDR = key_addr_7_reg_943.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
            m_axi_key_ARADDR = key_addr_6_reg_924.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
                    esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1))) {
            m_axi_key_ARADDR = key_addr_5_reg_907.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
            m_axi_key_ARADDR = key_addr_4_reg_888.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
            m_axi_key_ARADDR = key_addr_3_reg_876.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            m_axi_key_ARADDR = key_addr_2_reg_836.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            m_axi_key_ARADDR = key_addr_1_reg_824.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            m_axi_key_ARADDR = key_addr_reg_789.read();
        } else {
            m_axi_key_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_key_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARBURST() {
    m_axi_key_ARBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARCACHE() {
    m_axi_key_ARCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARID() {
    m_axi_key_ARID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARLEN() {
    m_axi_key_ARLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARLOCK() {
    m_axi_key_ARLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARPROT() {
    m_axi_key_ARPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARQOS() {
    m_axi_key_ARQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARREGION() {
    m_axi_key_ARREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARSIZE() {
    m_axi_key_ARSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARUSER() {
    m_axi_key_ARUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
          esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())))) {
        m_axi_key_ARVALID = ap_const_logic_1;
    } else {
        m_axi_key_ARVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWADDR() {
    m_axi_key_AWADDR = ap_const_lv32_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWBURST() {
    m_axi_key_AWBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWCACHE() {
    m_axi_key_AWCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWID() {
    m_axi_key_AWID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWLEN() {
    m_axi_key_AWLEN = ap_const_lv32_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWLOCK() {
    m_axi_key_AWLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWPROT() {
    m_axi_key_AWPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWQOS() {
    m_axi_key_AWQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWREGION() {
    m_axi_key_AWREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWSIZE() {
    m_axi_key_AWSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWUSER() {
    m_axi_key_AWUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_AWVALID() {
    m_axi_key_AWVALID = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_BREADY() {
    m_axi_key_BREADY = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()))))) {
        m_axi_key_RREADY = ap_const_logic_1;
    } else {
        m_axi_key_RREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_WDATA() {
    m_axi_key_WDATA = ap_const_lv8_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_WID() {
    m_axi_key_WID = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_WLAST() {
    m_axi_key_WLAST = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_WSTRB() {
    m_axi_key_WSTRB = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_WUSER() {
    m_axi_key_WUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey_cpy::thread_m_axi_key_WVALID() {
    m_axi_key_WVALID = ap_const_logic_0;
}

void a0_aes_addRoundKey_cpy::thread_sum10_fu_602_p2() {
    sum10_fu_602_p2 = (!key_offset.read().is_01() || !tmp_2_fu_598_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(tmp_2_fu_598_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum11_fu_645_p2() {
    sum11_fu_645_p2 = (!key_offset.read().is_01() || !sum5_2_cast_fu_641_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(sum5_2_cast_fu_641_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum12_fu_681_p2() {
    sum12_fu_681_p2 = (!key_offset.read().is_01() || !tmp_3_fu_677_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(tmp_3_fu_677_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum13_fu_724_p2() {
    sum13_fu_724_p2 = (!key_offset.read().is_01() || !sum5_3_cast_fu_720_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(sum5_3_cast_fu_720_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum15_fu_447_p2() {
    sum15_fu_447_p2 = (!cpk_offset.read().is_01() || !tmp_s_fu_432_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(tmp_s_fu_432_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum16_fu_494_p2() {
    sum16_fu_494_p2 = (!cpk_offset.read().is_01() || !sum5_cast_fu_479_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(sum5_cast_fu_479_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum17_fu_530_p2() {
    sum17_fu_530_p2 = (!cpk_offset.read().is_01() || !tmp_1_fu_515_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(tmp_1_fu_515_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum18_fu_577_p2() {
    sum18_fu_577_p2 = (!cpk_offset.read().is_01() || !sum5_1_cast_fu_562_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(sum5_1_cast_fu_562_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum19_fu_613_p2() {
    sum19_fu_613_p2 = (!cpk_offset.read().is_01() || !tmp_2_fu_598_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(tmp_2_fu_598_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum1_fu_541_p2() {
    sum1_fu_541_p2 = (!buf_offset.read().is_01() || !tmp_1_fu_515_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_1_fu_515_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum20_fu_656_p2() {
    sum20_fu_656_p2 = (!cpk_offset.read().is_01() || !sum5_2_cast_fu_641_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(sum5_2_cast_fu_641_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum21_fu_692_p2() {
    sum21_fu_692_p2 = (!cpk_offset.read().is_01() || !tmp_3_fu_677_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(tmp_3_fu_677_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum22_fu_735_p2() {
    sum22_fu_735_p2 = (!cpk_offset.read().is_01() || !sum5_3_cast_fu_720_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(cpk_offset.read()) + sc_biguint<32>(sum5_3_cast_fu_720_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum2_fu_624_p2() {
    sum2_fu_624_p2 = (!buf_offset.read().is_01() || !tmp_2_fu_598_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_2_fu_598_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum3_fu_703_p2() {
    sum3_fu_703_p2 = (!buf_offset.read().is_01() || !tmp_3_fu_677_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_3_fu_677_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum5_1_cast_fu_562_p1() {
    sum5_1_cast_fu_562_p1 = esl_zext<32,5>(sum5_1_fu_556_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_sum5_1_fu_556_p2() {
    sum5_1_fu_556_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_E.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_biguint<5>(ap_const_lv5_E));
}

void a0_aes_addRoundKey_cpy::thread_sum5_2_cast_fu_641_p1() {
    sum5_2_cast_fu_641_p1 = esl_zext<32,5>(sum5_2_fu_635_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_sum5_2_fu_635_p2() {
    sum5_2_fu_635_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_D.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_biguint<5>(ap_const_lv5_D));
}

void a0_aes_addRoundKey_cpy::thread_sum5_3_cast_fu_720_p1() {
    sum5_3_cast_fu_720_p1 = esl_zext<32,5>(sum5_3_fu_714_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_sum5_3_fu_714_p2() {
    sum5_3_fu_714_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_C.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_biguint<5>(ap_const_lv5_C));
}

void a0_aes_addRoundKey_cpy::thread_sum5_cast_fu_479_p1() {
    sum5_cast_fu_479_p1 = esl_zext<32,5>(sum5_fu_473_p2.read());
}

void a0_aes_addRoundKey_cpy::thread_sum5_fu_473_p2() {
    sum5_fu_473_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_404.read()) + sc_biguint<5>(ap_const_lv5_F));
}

void a0_aes_addRoundKey_cpy::thread_sum6_fu_436_p2() {
    sum6_fu_436_p2 = (!key_offset.read().is_01() || !tmp_s_fu_432_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(tmp_s_fu_432_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum7_fu_483_p2() {
    sum7_fu_483_p2 = (!key_offset.read().is_01() || !sum5_cast_fu_479_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(sum5_cast_fu_479_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum8_fu_519_p2() {
    sum8_fu_519_p2 = (!key_offset.read().is_01() || !tmp_1_fu_515_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(tmp_1_fu_515_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum9_fu_566_p2() {
    sum9_fu_566_p2 = (!key_offset.read().is_01() || !sum5_1_cast_fu_562_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(key_offset.read()) + sc_biguint<32>(sum5_1_cast_fu_562_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_sum_fu_458_p2() {
    sum_fu_458_p2 = (!buf_offset.read().is_01() || !tmp_s_fu_432_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_s_fu_432_p1.read()));
}

void a0_aes_addRoundKey_cpy::thread_tmp_1_fu_515_p1() {
    tmp_1_fu_515_p1 = esl_zext<32,8>(i_10_1_cast_fu_511_p1.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_24_fu_469_p2() {
    tmp_24_fu_469_p2 = (buf_addr_read_reg_814.read() ^ key_addr_read_reg_808.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_2_fu_598_p1() {
    tmp_2_fu_598_p1 = esl_zext<32,8>(i_10_2_cast_fu_594_p1.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_3_fu_677_p1() {
    tmp_3_fu_677_p1 = esl_zext<32,8>(i_10_3_cast_fu_673_p1.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_67_1_fu_552_p2() {
    tmp_67_1_fu_552_p2 = (buf_addr_28_read_reg_860.read() ^ key_addr_2_read_reg_865.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_67_2_fu_746_p2() {
    tmp_67_2_fu_746_p2 = (buf_addr_29_read_reg_960.read() ^ key_addr_4_read_reg_965.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_67_3_fu_750_p2() {
    tmp_67_3_fu_750_p2 = (buf_addr_30_read_reg_987.read() ^ key_addr_6_read_reg_981.read());
}

void a0_aes_addRoundKey_cpy::thread_tmp_fu_426_p2() {
    tmp_fu_426_p2 = (!i_reg_404.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_404.read() == ap_const_lv5_0);
}

void a0_aes_addRoundKey_cpy::thread_tmp_s_fu_432_p1() {
    tmp_s_fu_432_p1 = esl_zext<32,8>(i_cast_fu_422_p1.read());
}

void a0_aes_addRoundKey_cpy::thread_ap_NS_fsm() {
    if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_426_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state3;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state4;
        } else {
            ap_NS_fsm = ap_ST_fsm_state3;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state11;
        } else {
            ap_NS_fsm = ap_ST_fsm_state10;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_block_state11_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state12;
        } else {
            ap_NS_fsm = ap_ST_fsm_state11;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_block_state12_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state13;
        } else {
            ap_NS_fsm = ap_ST_fsm_state12;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state18;
        } else {
            ap_NS_fsm = ap_ST_fsm_state17;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_block_state18_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state19;
        } else {
            ap_NS_fsm = ap_ST_fsm_state18;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_key_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state20;
        } else {
            ap_NS_fsm = ap_ST_fsm_state19;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state26;
        } else {
            ap_NS_fsm = ap_ST_fsm_state25;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(m_axi_key_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state27;
        } else {
            ap_NS_fsm = ap_ST_fsm_state26;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) && esl_seteq<1,1,1>(ap_block_state27_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state28;
        } else {
            ap_NS_fsm = ap_ST_fsm_state27;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) && esl_seteq<1,1,1>(ap_block_state28_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state29;
        } else {
            ap_NS_fsm = ap_ST_fsm_state28;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state34;
        } else {
            ap_NS_fsm = ap_ST_fsm_state33;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) && esl_seteq<1,1,1>(ap_block_state34_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state35;
        } else {
            ap_NS_fsm = ap_ST_fsm_state34;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_key_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state36;
        } else {
            ap_NS_fsm = ap_ST_fsm_state35;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state41.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state42;
        } else {
            ap_NS_fsm = ap_ST_fsm_state41;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state42.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read())))) {
            ap_NS_fsm = ap_ST_fsm_state43;
        } else {
            ap_NS_fsm = ap_ST_fsm_state42;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state43.read()) && esl_seteq<1,1,1>(ap_block_state43_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state44;
        } else {
            ap_NS_fsm = ap_ST_fsm_state43;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(ap_block_state44_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state45;
        } else {
            ap_NS_fsm = ap_ST_fsm_state44;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state46;
        } else {
            ap_NS_fsm = ap_ST_fsm_state45;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state47;
        } else {
            ap_NS_fsm = ap_ST_fsm_state46;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state48;
        } else {
            ap_NS_fsm = ap_ST_fsm_state47;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state49;
        } else {
            ap_NS_fsm = ap_ST_fsm_state48;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state50;
        } else {
            ap_NS_fsm = ap_ST_fsm_state49;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) && esl_seteq<1,1,1>(ap_block_state50_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state51;
        } else {
            ap_NS_fsm = ap_ST_fsm_state50;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state52;
        } else {
            ap_NS_fsm = ap_ST_fsm_state51;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read())))) {
            ap_NS_fsm = ap_ST_fsm_state54;
        } else {
            ap_NS_fsm = ap_ST_fsm_state53;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state55.read()) && esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state56;
        } else {
            ap_NS_fsm = ap_ST_fsm_state55;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state58;
        } else {
            ap_NS_fsm = ap_ST_fsm_state57;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()) && esl_seteq<1,1,1>(ap_block_state58_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state59;
        } else {
            ap_NS_fsm = ap_ST_fsm_state58;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state59.read()) && esl_seteq<1,1,1>(ap_block_state59_io.read(), ap_const_boolean_0))) {
            ap_NS_fsm = ap_ST_fsm_state60;
        } else {
            ap_NS_fsm = ap_ST_fsm_state59;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state60.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_cpk_AWREADY.read())))) {
            ap_NS_fsm = ap_ST_fsm_state61;
        } else {
            ap_NS_fsm = ap_ST_fsm_state60;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state61.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_cpk_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state62;
        } else {
            ap_NS_fsm = ap_ST_fsm_state61;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state64.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, m_axi_cpk_BVALID.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state65;
        } else {
            ap_NS_fsm = ap_ST_fsm_state64;
        }
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,66,66>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) && esl_seteq<1,1,1>(m_axi_cpk_BVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state66;
        }
    }
    else
    {
        ap_NS_fsm =  (sc_lv<66>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
}

